//Thisfilecontainstextinlines.
//Thatitisjavacodeiscoincidenceandnotimportantforthetests.
packageedu.tum.cs.conqat.clonedetective.normalization.token;

importjava.io.IOException;
importjava.util.ArrayList;
importjava.util.List;

importedu.tum.cs.commons.test.CCSMTestCaseBase;
importedu.tum.cs.conqat.clonedetective.scope.SourceCodeElementProvider;
importedu.tum.cs.conqat.core.ConQATException;
importedu.tum.cs.conqat.core.ProcessorInfoMock;
importedu.tum.cs.conqat.sourcecode.scope.ISourceCodeElement;
importedu.tum.cs.conqat.sourcecode.scope.SourceCodeScope;
importedu.tum.cs.scanner.ELanguage;
importedu.tum.cs.scanner.ETokenType;
importedu.tum.cs.scanner.IScanner;
importedu.tum.cs.scanner.IToken;
importedu.tum.cs.scanner.ScannerException;
importedu.tum.cs.scanner.ScannerFactory;
importedu.tum.cs.scanner.ScannerUtils;

/**
*Testcaseforthe{@linkTokenProvider}class.
*<p>
*Testonlyusesthejavascanner,sincethistestreliesonthescannersto
*workcorrectlyandonlyteststhefunctionalitythatthe
*{@linkTokenProvider}addsontopofthescannercode.
*
*@authorElmarJuergens
*@author$Author:juergens$
*
*/
publicclassTokenProviderTestextendsCCSMTestCaseBase{

/**Nameofthefilethatcontainsthetokensthisclassworkson*/
privatestaticfinalStringTOKENS_FILE="tokens.java";

/**Listoftokensreadfromthetestdatafile*/
List<IToken>expectedTokens;

/**TokenProviderunderTest*/
TokenProviderprovider;

/**{@inheritDoc}*/
@Override
protectedvoidsetUp()throwsException{
super.setUp();
expectedTokens=readTokens();
provider=setUpProvider();
}

/**
*Readtokensfromtestfileintolist
*
*@throwsScannerException
*/
privateList<IToken>readTokens()throwsIOException,ScannerException{
IScannerscanner=ScannerFactory.newScanner(ELanguage.JAVA,
useTestFile(TOKENS_FILE));

List<ScannerException>scannerExceptions=newArrayList<ScannerException>();
List<IToken>tokens=newArrayList<IToken>();
ScannerUtils.readTokens(scanner,tokens,scannerExceptions);
if(scannerExceptions.size()>0){
throwscannerExceptions.get(0);
}

returntokens;
}

/**
*Setuptokenproviderontestdata
*
*@throwsConQATException
*/
privateTokenProvidersetUpProvider()throwsConQATException{
SourceCodeScopescope=newSourceCodeScope();
scope.init(newProcessorInfoMock());
scope.setLanguage("Java");
scope.setRootDirectory(useTestFile("").getPath());
scope.addIncludePattern("*.java");
ISourceCodeElementroot=scope.process();

SourceCodeElementProvidersceProvider=newSourceCodeElementProvider(
root);

TokenProvidertokenProvider=newTokenProvider(sceProvider);
returntokenProvider;
}

/**Testif{@linkTokenProvider}deliverstheexpectedtokens*/
publicvoidtestGetNextToken()throwsException{
//iterateoverexpectedtokensandcomparewithactualtokens
for(ITokenexpectedToken:expectedTokens){
ITokenactualToken=provider.getNextToken();
assertEquals(expectedToken.getType(),actualToken.getType());
assertEquals(expectedToken.getText(),actualToken.getText());
}

//makesurethatproviderhasnoadditionalunexpectedtokens
ITokenlastToken=provider.getNextToken();
assertTrue(lastToken==null||lastToken.getType()==ETokenType.EOF);
}

}
