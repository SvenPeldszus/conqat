META: #include <stdio.h>: null (lines 23-23)
META: #include <stdlib.h>: null (lines 24-24)
META: #include <SDL/SDL.h>: null (lines 25-25)
META: #include "somedefs.h": null (lines 26-26)
ATTRIBUTE: attribute: effect (lines 29-29)
ATTRIBUTE: attribute: fullscreen (lines 30-30)
ATTRIBUTE: attribute: use_grayscale (lines 31-31)
ATTRIBUTE: attribute: color1 (lines 32-32)
ATTRIBUTE: attribute: color2 (lines 33-33)
ATTRIBUTE: attribute: param (lines 34-34)
ATTRIBUTE: attribute: print_statistics (lines 35-35)
ATTRIBUTE: attribute: running (lines 36-36)
ATTRIBUTE: attribute: nowindow (lines 37-37)
ATTRIBUTE: attribute: camera_num (lines 38-38)
ATTRIBUTE: attribute: verbose (lines 39-39)
ATTRIBUTE: attribute: use_dma (lines 40-40)
ATTRIBUTE: attribute: use_coloramp (lines 41-41)
ATTRIBUTE: attribute: capturing (lines 43-43)
ATTRIBUTE: attribute: capture_mode (lines 44-44)
ATTRIBUTE: attribute: cap_param (lines 45-45)
ATTRIBUTE: attribute: outputfile (lines 46-46)
ATTRIBUTE: attribute: event (lines 48-48)
ATTRIBUTE: attribute: effect_names (lines 50-50)
METHOD: function declaration: fill_dmask_buffer (lines 53-53)
METHOD: function: hex2rgba (lines 57-82)
  STATEMENT: local variable: i (lines 60-60)
  STATEMENT: if: null (lines 61-61)
    STATEMENT: simple statement: return (lines 61-61)
  STATEMENT: for: null (lines 62-79)
    STATEMENT: if: null (lines 64-64)
      STATEMENT: simple statement: j (lines 64-64)
    STATEMENT: else if: null (lines 65-65)
      STATEMENT: simple statement: j (lines 65-65)
    STATEMENT: else if: null (lines 66-66)
      STATEMENT: simple statement: j (lines 66-66)
    STATEMENT: else: null (lines 67-67)
      STATEMENT: simple statement: return (lines 67-67)
    STATEMENT: switch: null (lines 68-78)
      META: case: 0 (lines 70-70)
      STATEMENT: simple statement: c (lines 70-70)
      STATEMENT: simple statement: break (lines 70-70)
      META: case: 1 (lines 71-71)
      STATEMENT: simple statement: c (lines 71-71)
      STATEMENT: simple statement: break (lines 71-71)
      META: case: 2 (lines 72-72)
      STATEMENT: simple statement: c (lines 72-72)
      STATEMENT: simple statement: break (lines 72-72)
      META: case: 3 (lines 73-73)
      STATEMENT: simple statement: c (lines 73-73)
      STATEMENT: simple statement: break (lines 73-73)
      META: case: 4 (lines 74-74)
      STATEMENT: simple statement: c (lines 74-74)
      STATEMENT: simple statement: break (lines 74-74)
      META: case: 5 (lines 75-75)
      STATEMENT: simple statement: c (lines 75-75)
      STATEMENT: simple statement: break (lines 75-75)
      META: default: null (lines 76-76)
      STATEMENT: simple statement: fprintf (lines 77-77)
      STATEMENT: simple statement: return (lines 77-77)
  STATEMENT: simple statement: c (lines 80-80)
  STATEMENT: simple statement: return (lines 81-81)
METHOD: function: print_usage (lines 85-119)
  STATEMENT: local variable: i (lines 88-88)
  STATEMENT: simple statement: printf (lines 90-90)
  STATEMENT: simple statement: printf (lines 91-91)
  STATEMENT: simple statement: printf (lines 92-92)
  STATEMENT: simple statement: printf (lines 93-93)
  STATEMENT: simple statement: printf (lines 94-94)
  STATEMENT: simple statement: printf (lines 95-95)
  STATEMENT: simple statement: printf (lines 96-96)
  STATEMENT: simple statement: printf (lines 97-97)
  STATEMENT: simple statement: printf (lines 98-98)
  STATEMENT: simple statement: printf (lines 99-99)
  STATEMENT: simple statement: printf (lines 100-100)
  STATEMENT: simple statement: printf (lines 101-101)
  STATEMENT: simple statement: printf (lines 102-102)
  STATEMENT: simple statement: printf (lines 103-103)
  STATEMENT: simple statement: printf (lines 104-104)
  STATEMENT: simple statement: printf (lines 105-105)
  STATEMENT: simple statement: printf (lines 106-106)
  STATEMENT: simple statement: printf (lines 107-107)
  STATEMENT: simple statement: printf (lines 108-108)
  STATEMENT: simple statement: printf (lines 109-109)
  STATEMENT: simple statement: printf (lines 110-110)
  STATEMENT: simple statement: printf (lines 111-111)
  STATEMENT: for: null (lines 112-113)
    STATEMENT: simple statement: printf (lines 113-113)
  STATEMENT: simple statement: printf (lines 114-114)
  STATEMENT: simple statement: printf (lines 115-115)
  STATEMENT: simple statement: printf (lines 116-116)
  STATEMENT: simple statement: printf (lines 117-117)
  STATEMENT: simple statement: printf (lines 118-118)
METHOD: function: parse_commandline (lines 122-305)
  META: #define CHECK_PARAM_OPTION(x) if (++i >= argc) { fprintf(stderr, x); return FALSE; }: null (lines 125-125)
  STATEMENT: local variable: i (lines 126-126)
  STATEMENT: for: null (lines 127-301)
    STATEMENT: if: null (lines 129-132)
      STATEMENT: simple statement: capturing (lines 131-131)
    STATEMENT: else if: null (lines 133-136)
      STATEMENT: simple statement: capturing (lines 135-135)
    STATEMENT: else if: null (lines 137-146)
      STATEMENT: simple statement: CHECK_PARAM_OPTION (lines 139-139)
      STATEMENT: simple statement: camera_num (lines 140-140)
      STATEMENT: if: null (lines 141-145)
        STATEMENT: simple statement: fprintf (lines 143-143)
        STATEMENT: simple statement: return (lines 144-144)
    STATEMENT: else if: null (lines 147-155)
      STATEMENT: simple statement: CHECK_PARAM_OPTION (lines 149-149)
      STATEMENT: if: null (lines 150-154)
        STATEMENT: simple statement: fprintf (lines 152-152)
        STATEMENT: simple statement: return (lines 153-153)
    STATEMENT: else if: null (lines 156-164)
      STATEMENT: simple statement: CHECK_PARAM_OPTION (lines 158-158)
      STATEMENT: if: null (lines 159-163)
        STATEMENT: simple statement: fprintf (lines 161-161)
        STATEMENT: simple statement: return (lines 162-162)
    STATEMENT: else if: null (lines 165-168)
      STATEMENT: simple statement: use_coloramp (lines 167-167)
    STATEMENT: else if: null (lines 169-172)
      STATEMENT: simple statement: use_dma (lines 171-171)
    STATEMENT: else if: null (lines 173-176)
      STATEMENT: simple statement: use_dma (lines 175-175)
    STATEMENT: else if: null (lines 177-193)
      STATEMENT: simple statement: CHECK_PARAM_OPTION (lines 179-179)
      STATEMENT: simple statement: effect (lines 180-180)
      STATEMENT: for: null (lines 181-187)
        STATEMENT: if: null (lines 183-186)
          STATEMENT: simple statement: effect (lines 185-185)
      STATEMENT: if: null (lines 188-192)
        STATEMENT: simple statement: fprintf (lines 190-190)
        STATEMENT: simple statement: return (lines 191-191)
    STATEMENT: else if: null (lines 194-198)
      STATEMENT: simple statement: fullscreen (lines 197-197)
    STATEMENT: else if: null (lines 199-203)
      STATEMENT: simple statement: use_grayscale (lines 202-202)
    STATEMENT: else if: null (lines 204-209)
      STATEMENT: simple statement: print_usage (lines 207-207)
      STATEMENT: simple statement: return (lines 208-208)
    STATEMENT: else if: null (lines 210-213)
      STATEMENT: simple statement: nowindow (lines 212-212)
    STATEMENT: else if: null (lines 214-217)
      STATEMENT: simple statement: nowindow (lines 216-216)
    STATEMENT: else if: null (lines 218-229)
      STATEMENT: simple statement: CHECK_PARAM_OPTION (lines 220-220)
      STATEMENT: if: null (lines 221-221)
        STATEMENT: simple statement: free (lines 221-221)
      STATEMENT: simple statement: outputfile (lines 222-222)
      STATEMENT: if: null (lines 223-227)
        STATEMENT: simple statement: fprintf (lines 225-225)
        STATEMENT: simple statement: return (lines 226-226)
      STATEMENT: simple statement: strcpy (lines 228-228)
    STATEMENT: else if: null (lines 230-239)
      STATEMENT: simple statement: CHECK_PARAM_OPTION (lines 232-232)
      STATEMENT: simple statement: param (lines 233-233)
      STATEMENT: if: null (lines 234-238)
        STATEMENT: simple statement: fprintf (lines 236-236)
        STATEMENT: simple statement: return (lines 237-237)
    STATEMENT: else if: null (lines 240-243)
      STATEMENT: simple statement: print_statistics (lines 242-242)
    STATEMENT: else if: null (lines 244-247)
      STATEMENT: simple statement: print_statistics (lines 246-246)
    STATEMENT: else if: null (lines 248-286)
      STATEMENT: simple statement: CHECK_PARAM_OPTION (lines 250-250)
      STATEMENT: if: null (lines 251-254)
        STATEMENT: simple statement: capture_mode (lines 253-253)
      STATEMENT: else if: null (lines 255-258)
        STATEMENT: simple statement: capture_mode (lines 257-257)
      STATEMENT: else: null (lines 259-285)
        STATEMENT: local variable: c (lines 261-261)
        STATEMENT: if: null (lines 262-266)
          STATEMENT: simple statement: fprintf (lines 264-264)
          STATEMENT: simple statement: return (lines 265-265)
        STATEMENT: simple statement: c (lines 267-267)
        STATEMENT: simple statement: argv (lines 268-268)
        STATEMENT: simple statement: cap_param (lines 269-269)
        STATEMENT: if: null (lines 270-274)
          STATEMENT: simple statement: fprintf (lines 272-272)
          STATEMENT: simple statement: return (lines 273-273)
        STATEMENT: switch: null (lines 275-284)
          META: case: 'f' (lines 277-277)
          STATEMENT: simple statement: capture_mode (lines 277-277)
          STATEMENT: simple statement: break (lines 277-277)
          META: case: 'm' (lines 278-278)
          STATEMENT: simple statement: capture_mode (lines 278-278)
          STATEMENT: simple statement: break (lines 278-278)
          META: case: 's' (lines 279-279)
          STATEMENT: simple statement: capture_mode (lines 279-279)
          STATEMENT: simple statement: cap_param (lines 280-280)
          STATEMENT: simple statement: break (lines 280-280)
          META: default: null (lines 281-281)
          STATEMENT: simple statement: fprintf (lines 282-282)
          STATEMENT: simple statement: return (lines 283-283)
    STATEMENT: else if: null (lines 287-290)
      STATEMENT: simple statement: verbose (lines 289-289)
    STATEMENT: else if: null (lines 291-294)
      STATEMENT: simple statement: verbose (lines 293-293)
    STATEMENT: else: null (lines 295-300)
      STATEMENT: simple statement: fprintf (lines 297-297)
      STATEMENT: simple statement: print_usage (lines 298-298)
      STATEMENT: simple statement: return (lines 299-299)
  STATEMENT: simple statement: return (lines 303-303)
  META: #undef CHECK_PARAM_OPTION: null (lines 304-304)
METHOD: function: key_handler (lines 308-419)
  META: #define TOGGLE(x) if (x) x = FALSE; else x = TRUE: null (lines 311-311)
  META: #define SET_FX(x) if ((FX_MIN+(x)-1) <= FX_MAX) effect = FX_MIN+(x)-1: null (lines 312-312)
  STATEMENT: if: null (lines 313-408)
    STATEMENT: switch: null (lines 315-407)
      META: case: SDLK_ESCAPE (lines 317-317)
      META: case: SDLK_q (lines 318-318)
      STATEMENT: simple statement: running (lines 318-318)
      STATEMENT: simple statement: break (lines 318-318)
      META: case: SDLK_SPACE (lines 320-320)
      META: case: SDLK_c (lines 321-321)
      STATEMENT: simple statement: TOGGLE (lines 321-321)
      STATEMENT: simple statement: break (lines 321-321)
      META: case: SDLK_g (lines 323-323)
      STATEMENT: simple statement: TOGGLE (lines 323-323)
      STATEMENT: simple statement: break (lines 323-323)
      META: case: SDLK_a (lines 325-325)
      STATEMENT: simple statement: TOGGLE (lines 325-325)
      STATEMENT: simple statement: break (lines 325-325)
      META: case: SDLK_F1 (lines 327-327)
      STATEMENT: simple statement: SET_FX (lines 327-327)
      STATEMENT: simple statement: break (lines 327-327)
      META: case: SDLK_F2 (lines 328-328)
      STATEMENT: simple statement: SET_FX (lines 328-328)
      STATEMENT: simple statement: break (lines 328-328)
      META: case: SDLK_F3 (lines 329-329)
      STATEMENT: simple statement: SET_FX (lines 329-329)
      STATEMENT: simple statement: break (lines 329-329)
      META: case: SDLK_F4 (lines 330-330)
      STATEMENT: simple statement: SET_FX (lines 330-330)
      STATEMENT: simple statement: break (lines 330-330)
      META: case: SDLK_F5 (lines 331-331)
      STATEMENT: simple statement: SET_FX (lines 331-331)
      STATEMENT: simple statement: break (lines 331-331)
      META: case: SDLK_F6 (lines 332-332)
      STATEMENT: simple statement: SET_FX (lines 332-332)
      STATEMENT: simple statement: break (lines 332-332)
      META: case: SDLK_F7 (lines 333-333)
      STATEMENT: simple statement: SET_FX (lines 333-333)
      STATEMENT: simple statement: break (lines 333-333)
      META: case: SDLK_F8 (lines 334-334)
      STATEMENT: simple statement: SET_FX (lines 334-334)
      STATEMENT: simple statement: break (lines 334-334)
      META: case: SDLK_F9 (lines 335-335)
      STATEMENT: simple statement: SET_FX (lines 335-335)
      STATEMENT: simple statement: break (lines 335-335)
      META: case: SDLK_F10 (lines 336-336)
      STATEMENT: simple statement: SET_FX (lines 336-336)
      STATEMENT: simple statement: break (lines 336-336)
      META: case: SDLK_F11 (lines 337-337)
      STATEMENT: simple statement: SET_FX (lines 337-337)
      STATEMENT: simple statement: break (lines 337-337)
      META: case: SDLK_F12 (lines 338-338)
      STATEMENT: simple statement: SET_FX (lines 338-338)
      STATEMENT: simple statement: break (lines 338-338)
      META: case: SDLK_UP (lines 340-340)
      STATEMENT: if: null (lines 341-344)
        STATEMENT: if: null (lines 343-343)
          STATEMENT: simple statement: param (lines 343-343)
      STATEMENT: else: null (lines 345-348)
        STATEMENT: simple statement: param (lines 347-347)
      STATEMENT: simple statement: break (lines 349-349)
      META: case: SDLK_DOWN (lines 350-350)
      STATEMENT: if: null (lines 351-354)
        STATEMENT: if: null (lines 353-353)
          STATEMENT: simple statement: param (lines 353-353)
      STATEMENT: else: null (lines 355-358)
        STATEMENT: simple statement: param (lines 357-357)
      STATEMENT: simple statement: break (lines 359-359)
      META: case: SDLK_RIGHT (lines 361-361)
      STATEMENT: simple statement: effect (lines 362-362)
      STATEMENT: if: null (lines 363-363)
        STATEMENT: simple statement: effect (lines 363-363)
      STATEMENT: simple statement: break (lines 364-364)
      META: case: SDLK_LEFT (lines 365-365)
      STATEMENT: simple statement: effect (lines 366-366)
      STATEMENT: if: null (lines 367-367)
        STATEMENT: simple statement: effect (lines 367-367)
      STATEMENT: simple statement: break (lines 368-368)
      META: #define SETCOL(x) if(event.key.keysym.mod&KMOD_SHIFT) \
	{rgba c=x; color2.r=c.r; color2.g=c.g; color2.b=c.b;} else \
	{rgba c=x; color1.r=c.r; color1.g=c.g; color1.b=c.b;} break: null (lines 372-372)
      META: case: SDLK_1 (lines 373-373)
      STATEMENT: simple statement: SETCOL (lines 373-373)
      META: case: SDLK_2 (lines 374-374)
      STATEMENT: simple statement: SETCOL (lines 374-374)
      META: case: SDLK_3 (lines 375-375)
      STATEMENT: simple statement: SETCOL (lines 375-375)
      META: case: SDLK_4 (lines 376-376)
      STATEMENT: simple statement: SETCOL (lines 376-376)
      META: case: SDLK_5 (lines 377-377)
      STATEMENT: simple statement: SETCOL (lines 377-377)
      META: case: SDLK_6 (lines 378-378)
      STATEMENT: simple statement: SETCOL (lines 378-378)
      META: case: SDLK_7 (lines 379-379)
      STATEMENT: simple statement: SETCOL (lines 379-379)
      META: case: SDLK_8 (lines 380-380)
      STATEMENT: simple statement: SETCOL (lines 380-380)
      META: #undef SETCOL: null (lines 381-381)
      META: #define STEP_COL(col, stepmul) \
	{ int val, step;\
	if(event.key.keysym.mod&KMOD_CTRL) step = 1; else step = STEPSIZE; \
	step *= (stepmul); val = col; val += step; \
	val = (val > 255)?255:val; val = (val < 0)?0:val; col = val; }: null (lines 387-387)
      META: #define USECOL2 event.key.keysym.mod&KMOD_SHIFT: null (lines 388-388)
      META: case: SDLK_u (lines 390-390)
      STATEMENT: if: null (lines 390-390)
        STATEMENT: Expanded macro: STEP_COL (lines 390-390)
      STATEMENT: else: null (lines 390-390)
        STATEMENT: Expanded macro: STEP_COL (lines 390-390)
      STATEMENT: simple statement: break (lines 390-390)
      META: case: SDLK_i (lines 391-391)
      STATEMENT: if: null (lines 391-391)
        STATEMENT: Expanded macro: STEP_COL (lines 391-391)
      STATEMENT: else: null (lines 391-391)
        STATEMENT: Expanded macro: STEP_COL (lines 391-391)
      STATEMENT: simple statement: break (lines 391-391)
      META: case: SDLK_o (lines 392-392)
      STATEMENT: if: null (lines 392-392)
        STATEMENT: Expanded macro: STEP_COL (lines 392-392)
      STATEMENT: else: null (lines 392-392)
        STATEMENT: Expanded macro: STEP_COL (lines 392-392)
      STATEMENT: simple statement: break (lines 392-392)
      META: case: SDLK_j (lines 393-393)
      STATEMENT: if: null (lines 393-393)
        STATEMENT: Expanded macro: STEP_COL (lines 393-393)
      STATEMENT: else: null (lines 393-393)
        STATEMENT: Expanded macro: STEP_COL (lines 393-393)
      STATEMENT: simple statement: break (lines 393-393)
      META: case: SDLK_k (lines 394-394)
      STATEMENT: if: null (lines 394-394)
        STATEMENT: Expanded macro: STEP_COL (lines 394-394)
      STATEMENT: else: null (lines 394-394)
        STATEMENT: Expanded macro: STEP_COL (lines 394-394)
      STATEMENT: simple statement: break (lines 394-394)
      META: case: SDLK_l (lines 395-395)
      STATEMENT: if: null (lines 395-395)
        STATEMENT: Expanded macro: STEP_COL (lines 395-395)
      STATEMENT: else: null (lines 395-395)
        STATEMENT: Expanded macro: STEP_COL (lines 395-395)
      STATEMENT: simple statement: break (lines 395-395)
      META: #undef STEP_COL: null (lines 396-396)
      META: #undef USECOL2: null (lines 397-397)
      META: case: SDLK_x (lines 399-399)
      STATEMENT: anonymous block: null (lines 400-404)
        STATEMENT: local variable: temp (lines 401-401)
        STATEMENT: simple statement: color1 (lines 402-402)
        STATEMENT: simple statement: color2 (lines 403-403)
      STATEMENT: simple statement: break (lines 404-404)
      META: default: null (lines 406-406)
  STATEMENT: else if: null (lines 409-412)
  STATEMENT: else: null (lines 413-416)
    STATEMENT: simple statement: fprintf (lines 415-415)
  META: #undef SET_FX: null (lines 417-417)
  META: #undef TOGGLE: null (lines 418-418)
METHOD: function: update_caption (lines 422-445)
  STATEMENT: local variable: s (lines 425-425)
  STATEMENT: simple statement: static (lines 426-426)
  STATEMENT: simple statement: unsigned (lines 427-427)
  STATEMENT: simple statement: unsigned (lines 428-428)
  STATEMENT: simple statement: unsigned (lines 430-430)
  STATEMENT: local variable: fps (lines 431-431)
  STATEMENT: if: null (lines 433-433)
    STATEMENT: simple statement: fps (lines 433-433)
  STATEMENT: simple statement: lasttime (lines 434-434)
  STATEMENT: simple statement: sprintf (lines 436-442)
  STATEMENT: simple statement: SDL_WM_SetCaption (lines 444-444)
