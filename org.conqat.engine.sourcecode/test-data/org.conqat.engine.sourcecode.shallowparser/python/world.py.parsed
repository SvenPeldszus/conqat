META: import: null (lines 23-23)
META: import: null (lines 24-24)
META: import: null (lines 25-25)
META: from: null (lines 27-27)
META: from: null (lines 28-28)
META: import: null (lines 30-30)
META: from: null (lines 31-31)
META: from: null (lines 32-32)
META: from: null (lines 33-33)
META: from: null (lines 34-34)
META: from: null (lines 35-35)
META: from: null (lines 36-36)
META: from: null (lines 37-37)
META: from: null (lines 38-38)
META: from: null (lines 39-39)
META: from: null (lines 40-40)
META: from: null (lines 41-41)
META: from: null (lines 42-42)
META: from: null (lines 43-43)
META: from: null (lines 44-44)
META: from: null (lines 45-45)
META: from: null (lines 46-46)
META: from: null (lines 47-47)
META: from: null (lines 48-48)
META: from: null (lines 49-49)
META: from: null (lines 50-50)
META: from: null (lines 51-51)
META: from: null (lines 52-52)
META: from: null (lines 53-53)
META: from: null (lines 54-54)
META: from: null (lines 55-55)
TYPE: class: World (lines 58-744)
  STATEMENT: simple statement: """The World class represents an Unknown Horizons map with all its units, grounds, buildings, etc.

	It inherits from BuildingOwner, among other things, so it has building management capabilities.
	There is always one big reference per building, which is stored in either the world, the island,
	or the settlement.

	The main components of the world are:
	   * players - a list of all the session's players - Player instances
	   * islands - a list of all the map's islands - Island instances
	   * grounds - a list of all the map's groundtiles
	   * ground_map - a dictionary that binds tuples of coordinates with a reference to the tile:
	                  { (x, y): tileref, ...}
	                 This is important for pathfinding and quick tile fetching.
	   * island_map - a dictionary that binds tuples of coordinates with a reference to the island
	   * ships - a list of all the ships ingame - horizons.world.units.ship.Ship instances
	   * ship_map - same as ground_map, but for ships
	   * session - reference to horizons.session.Session instance of the current game
	   * trader - The world's ingame free trader player instance (can control multiple ships)
	   * pirate - The world's ingame pirate player instance
	   TUTORIAL: You should now check out the _init() function.
	""" (lines 59-59)
  STATEMENT: simple statement: log (lines 80-80)
  METHOD: method: __init__ (lines 82-106)
    STATEMENT: simple statement: """
		@param session: instance of session the world belongs to.
		""" (lines 83-83)
    STATEMENT: simple statement: self (lines 86-86)
    STATEMENT: if: null (lines 87-89)
      STATEMENT: simple statement: assert (lines 88-88)
    STATEMENT: simple statement: self (lines 89-89)
    STATEMENT: simple statement: self (lines 92-92)
    STATEMENT: simple statement: self (lines 93-93)
    STATEMENT: simple statement: self (lines 94-94)
    STATEMENT: simple statement: self (lines 95-95)
    STATEMENT: simple statement: self (lines 99-99)
    STATEMENT: simple statement: self (lines 100-100)
    STATEMENT: simple statement: self (lines 102-102)
    STATEMENT: simple statement: super (lines 104-104)
  METHOD: method: end (lines 106-148)
    STATEMENT: simple statement: super (lines 108-108)
    STATEMENT: for: null (lines 111-115)
      STATEMENT: if: null (lines 112-115)
        STATEMENT: simple statement: player (lines 113-113)
    STATEMENT: for: null (lines 115-117)
      STATEMENT: simple statement: ship (lines 116-116)
    STATEMENT: for: null (lines 117-119)
      STATEMENT: simple statement: island (lines 118-118)
    STATEMENT: for: null (lines 119-122)
      STATEMENT: simple statement: player (lines 120-120)
    STATEMENT: simple statement: self (lines 122-122)
    STATEMENT: simple statement: self (lines 123-123)
    STATEMENT: simple statement: self (lines 124-124)
    STATEMENT: simple statement: self (lines 125-125)
    STATEMENT: simple statement: self (lines 126-126)
    STATEMENT: simple statement: self (lines 127-127)
    STATEMENT: simple statement: self (lines 128-128)
    STATEMENT: simple statement: self (lines 129-129)
    STATEMENT: simple statement: self (lines 130-130)
    STATEMENT: simple statement: self (lines 131-131)
    STATEMENT: simple statement: self (lines 132-132)
    STATEMENT: simple statement: self (lines 133-133)
    STATEMENT: simple statement: self (lines 134-134)
    STATEMENT: if: null (lines 136-140)
      STATEMENT: simple statement: self (lines 137-137)
      STATEMENT: simple statement: self (lines 138-138)
    STATEMENT: if: null (lines 140-144)
      STATEMENT: simple statement: self (lines 141-141)
      STATEMENT: simple statement: self (lines 142-142)
    STATEMENT: simple statement: self (lines 144-144)
    STATEMENT: simple statement: self (lines 145-145)
    STATEMENT: simple statement: self (lines 146-146)
  METHOD: method: _init (lines 148-251)
    STATEMENT: simple statement: """
		@param savegame_db: Dbreader with loaded savegame database
		@param force_player_id: the worldid of the selected human player or default if None (debug option)
		"""
		"""
		All essential and non-essential parts of the world are set up here, you don't need to
		know everything that happens.
		""" (lines 149-149)
    STATEMENT: simple statement: self (lines 158-158)
    STATEMENT: for: null (lines 159-161)
      STATEMENT: simple statement: self (lines 160-160)
    STATEMENT: if: null (lines 161-165)
      STATEMENT: simple statement: self (lines 163-163)
    STATEMENT: simple statement: self (lines 165-165)
    STATEMENT: simple statement: LoadingProgress (lines 168-168)
    STATEMENT: simple statement: self (lines 169-169)
    STATEMENT: simple statement: LoadingProgress (lines 172-172)
    STATEMENT: simple statement: buildings (lines 173-173)
    STATEMENT: for: null (lines 174-178)
      STATEMENT: simple statement: load_building (lines 175-175)
    STATEMENT: simple statement: LoadingProgress (lines 178-178)
    STATEMENT: simple statement: self (lines 179-179)
    STATEMENT: simple statement: self (lines 180-180)
    STATEMENT: simple statement: self (lines 181-181)
    STATEMENT: for: null (lines 182-189)
      STATEMENT: simple statement: island (lines 183-183)
    STATEMENT: simple statement: self (lines 189-189)
    STATEMENT: for: null (lines 190-194)
      STATEMENT: for: null (lines 191-194)
        STATEMENT: if: null (lines 192-194)
          STATEMENT: simple statement: self (lines 193-193)
    STATEMENT: simple statement: self (lines 194-194)
    STATEMENT: simple statement: self (lines 195-195)
    STATEMENT: simple statement: self (lines 198-198)
    STATEMENT: simple statement: self (lines 199-199)
    STATEMENT: simple statement: self (lines 202-202)
    STATEMENT: if: null (lines 204-215)
      STATEMENT: simple statement: trader_data (lines 206-206)
      STATEMENT: if: null (lines 207-210)
        STATEMENT: simple statement: self (lines 208-208)
      STATEMENT: simple statement: pirate_data (lines 210-210)
      STATEMENT: if: null (lines 211-215)
        STATEMENT: simple statement: self (lines 212-212)
    STATEMENT: simple statement: LoadingProgress (lines 215-215)
    STATEMENT: for: null (lines 216-219)
      STATEMENT: simple statement: Entities (lines 217-217)
    STATEMENT: if: null (lines 219-239)
      STATEMENT: if: null (lines 223-225)
        STATEMENT: simple statement: self (lines 224-224)
      STATEMENT: if: null (lines 225-229)
        STATEMENT: simple statement: self (lines 226-226)
      STATEMENT: simple statement: LoadingProgress (lines 229-229)
      STATEMENT: if: null (lines 230-235)
        STATEMENT: simple statement: AIPlayer (lines 231-231)
      STATEMENT: for: null (lines 235-239)
        STATEMENT: if: null (lines 236-239)
          STATEMENT: simple statement: player (lines 237-237)
    STATEMENT: simple statement: LoadingProgress (lines 239-239)
    STATEMENT: simple statement: self (lines 240-240)
    STATEMENT: simple statement: self (lines 241-241)
    STATEMENT: simple statement: self (lines 242-242)
    STATEMENT: simple statement: self (lines 244-244)
    STATEMENT: simple statement: """TUTORIAL:
		To dig deeper, you should now continue to horizons/world/island.py,
		to check out how buildings and settlements are added to the map.""" (lines 245-245)
  METHOD: method: _load_combat (lines 251-261)
    STATEMENT: if: null (lines 253-258)
      STATEMENT: for: null (lines 254-258)
        STATEMENT: simple statement: Bullet (lines 255-255)
    STATEMENT: if: null (lines 258-261)
      STATEMENT: simple statement: Weapon (lines 259-259)
  METHOD: method: _load_diplomacy (lines 261-266)
    STATEMENT: simple statement: self (lines 262-262)
    STATEMENT: if: null (lines 263-266)
      STATEMENT: simple statement: self (lines 264-264)
  METHOD: method: _load_disasters (lines 266-273)
    STATEMENT: simple statement: disasters_disabled (lines 268-268)
    STATEMENT: simple statement: self (lines 269-269)
    STATEMENT: if: null (lines 270-273)
      STATEMENT: simple statement: self (lines 271-271)
  METHOD: method: load_raw_map (lines 273-330)
    STATEMENT: simple statement: self (lines 274-274)
    STATEMENT: for: null (lines 277-282)
      STATEMENT: simple statement: island (lines 278-278)
      STATEMENT: simple statement: self (lines 279-279)
    STATEMENT: simple statement: self (lines 282-282)
    STATEMENT: for: null (lines 283-288)
      STATEMENT: simple statement: self (lines 284-284)
      STATEMENT: simple statement: self (lines 285-285)
      STATEMENT: simple statement: self (lines 286-286)
      STATEMENT: simple statement: self (lines 287-287)
    STATEMENT: simple statement: self (lines 288-288)
    STATEMENT: simple statement: self (lines 289-289)
    STATEMENT: simple statement: self (lines 290-290)
    STATEMENT: simple statement: self (lines 291-291)
    STATEMENT: simple statement: self (lines 293-293)
    STATEMENT: simple statement: self (lines 296-296)
    STATEMENT: simple statement: self (lines 297-297)
    STATEMENT: if: null (lines 300-303)
      STATEMENT: simple statement: default_grounds (lines 301-301)
    STATEMENT: simple statement: fake_tile_class (lines 303-303)
    STATEMENT: simple statement: fake_tile_size (lines 304-304)
    STATEMENT: for: null (lines 305-317)
      STATEMENT: for: null (lines 306-317)
        STATEMENT: simple statement: fake_tile_x (lines 307-307)
        STATEMENT: simple statement: fake_tile_y (lines 308-308)
        STATEMENT: if: null (lines 309-312)
          STATEMENT: simple statement: default_grounds (lines 311-311)
        STATEMENT: for: null (lines 312-317)
          STATEMENT: if: null (lines 313-317)
            STATEMENT: for: null (lines 314-317)
              STATEMENT: if: null (lines 315-317)
                STATEMENT: simple statement: self (lines 316-316)
    STATEMENT: simple statement: self (lines 317-317)
    STATEMENT: simple statement: self (lines 320-320)
    STATEMENT: simple statement: self (lines 321-321)
    STATEMENT: for: null (lines 322-330)
      STATEMENT: for: null (lines 323-330)
        STATEMENT: if: null (lines 324-330)
          STATEMENT: simple statement: self (lines 325-325)
          STATEMENT: simple statement: del (lines 326-326)
          STATEMENT: simple statement: self (lines 327-327)
  METHOD: method: _load_players (lines 330-374)
    STATEMENT: simple statement: human_players (lines 331-331)
    STATEMENT: for: null (lines 332-351)
      STATEMENT: simple statement: player (lines 333-333)
      STATEMENT: simple statement: ai_data (lines 335-335)
      STATEMENT: if: null (lines 336-342)
        STATEMENT: simple statement: class_package (lines 337-337)
        STATEMENT: simple statement: module (lines 339-339)
        STATEMENT: simple statement: ai_class (lines 340-340)
        STATEMENT: simple statement: player (lines 341-341)
      STATEMENT: else: null (lines 342-344)
        STATEMENT: simple statement: player (lines 343-343)
      STATEMENT: simple statement: self (lines 344-344)
      STATEMENT: if: null (lines 346-348)
        STATEMENT: simple statement: self (lines 347-347)
      STATEMENT: elif: null (lines 348-351)
        STATEMENT: simple statement: human_players (lines 350-350)
    STATEMENT: simple statement: self (lines 351-351)
    STATEMENT: simple statement: self (lines 352-352)
    STATEMENT: if: null (lines 354-368)
      STATEMENT: if: null (lines 360-363)
        STATEMENT: simple statement: self (lines 362-362)
      STATEMENT: elif: null (lines 363-368)
        STATEMENT: simple statement: self (lines 365-365)
    STATEMENT: simple statement: self (lines 368-368)
    STATEMENT: if: null (lines 370-374)
      STATEMENT: simple statement: self (lines 371-372)
  STATEMENT: simple statement: @ (lines 374-374)
  METHOD: method: _recognize_water_bodies (lines 375-396)
    STATEMENT: simple statement: """This function runs the flood fill algorithm on the water to make it easy
		to recognize different water bodies.""" (lines 376-376)
    STATEMENT: simple statement: moves (lines 378-378)
    STATEMENT: simple statement: n (lines 380-380)
    STATEMENT: for: null (lines 381-396)
      STATEMENT: if: null (lines 382-385)
        STATEMENT: simple statement: continue (lines 383-383)
      STATEMENT: simple statement: map_dict (lines 385-385)
      STATEMENT: simple statement: queue (lines 386-386)
      STATEMENT: while: null (lines 387-394)
        STATEMENT: simple statement: x (lines 388-388)
        STATEMENT: for: null (lines 389-394)
          STATEMENT: simple statement: coords2 (lines 390-390)
          STATEMENT: if: null (lines 391-394)
            STATEMENT: simple statement: map_dict (lines 392-392)
            STATEMENT: simple statement: queue (lines 393-393)
      STATEMENT: simple statement: n (lines 394-394)
  METHOD: method: _init_water_bodies (lines 396-402)
    STATEMENT: simple statement: """This function runs the flood fill algorithm on the water to make it easy
		to recognize different water bodies.""" (lines 397-397)
    STATEMENT: simple statement: self (lines 399-399)
    STATEMENT: simple statement: self (lines 400-400)
  METHOD: method: _init_shallow_water_bodies (lines 402-408)
    STATEMENT: simple statement: """This function runs the flood fill algorithm on the water and the coast to
		make it easy to recognise different water bodies for fishers.""" (lines 403-403)
    STATEMENT: simple statement: self (lines 405-405)
    STATEMENT: simple statement: self (lines 406-406)
  METHOD: method: init_fish_indexer (lines 408-413)
    STATEMENT: simple statement: radius (lines 409-409)
    STATEMENT: simple statement: buildings (lines 410-410)
    STATEMENT: simple statement: self (lines 411-411)
  METHOD: method: init_new_world (lines 413-480)
    STATEMENT: simple statement: """
		This should be called if a new map is loaded (not a savegame, a fresh
		map). In other words, when it is loaded for the first time.

		NOTE: commands for creating the world objects are executed directly,
		      bypassing the manager.
		      This is necessary because else the commands would be transmitted
		      over the wire in network games.

		@return: the coordinates of the players first ship
		""" (lines 414-414)
    STATEMENT: simple statement: loggers_to_silence (lines 428-428)
    STATEMENT: for: null (lines 429-435)
      STATEMENT: simple statement: logger (lines 430-430)
      STATEMENT: simple statement: loggers_to_silence (lines 431-431)
      STATEMENT: simple statement: logger (lines 432-432)
    STATEMENT: if: null (lines 435-439)
      STATEMENT: simple statement: self (lines 436-436)
    STATEMENT: for: null (lines 439-443)
      STATEMENT: simple statement: logging (lines 440-440)
    STATEMENT: if: null (lines 443-446)
      STATEMENT: simple statement: self (lines 444-444)
    STATEMENT: simple statement: ret_coords (lines 446-446)
    STATEMENT: for: null (lines 447-470)
      STATEMENT: simple statement: point (lines 450-450)
      STATEMENT: simple statement: ship (lines 453-453)
      STATEMENT: for: null (lines 455-457)
        STATEMENT: simple statement: ship (lines 456-456)
      STATEMENT: if: null (lines 457-470)
        STATEMENT: simple statement: ret_coords (lines 458-458)
        METHOD: method: _preselect_player_ship (lines 460-466)
          STATEMENT: simple statement: sel_comp (lines 461-461)
          STATEMENT: simple statement: sel_comp (lines 462-462)
          STATEMENT: simple statement: self (lines 463-463)
          STATEMENT: simple statement: self (lines 464-464)
          STATEMENT: simple statement: sel_comp (lines 465-465)
        STATEMENT: simple statement: select_ship (lines 466-466)
        STATEMENT: simple statement: Scheduler (lines 467-467)
    STATEMENT: if: null (lines 470-474)
      STATEMENT: simple statement: AIPlayer (lines 471-471)
    STATEMENT: if: null (lines 474-477)
      STATEMENT: simple statement: self (lines 475-475)
    STATEMENT: simple statement: assert (lines 477-477)
    STATEMENT: simple statement: return (lines 478-478)
  METHOD: method: _add_nature_objects (lines 480-483)
    STATEMENT: simple statement: worldutils (lines 481-481)
  METHOD: method: set_forced_player (lines 483-490)
    STATEMENT: if: null (lines 484-490)
      STATEMENT: for: null (lines 485-490)
        STATEMENT: if: null (lines 486-490)
          STATEMENT: simple statement: self (lines 487-487)
          STATEMENT: simple statement: break (lines 488-488)
  METHOD: method: get_random_possible_ground_unit_position (lines 490-495)
    STATEMENT: simple statement: """Returns a position in water that is not at the border of the world.
		@return: Point""" (lines 491-491)
    STATEMENT: simple statement: return (lines 493-493)
  METHOD: method: get_random_possible_ship_position (lines 495-500)
    STATEMENT: simple statement: """Returns a position in water that is not at the border of the world.
		@return: Point""" (lines 496-496)
    STATEMENT: simple statement: return (lines 498-498)
  METHOD: method: get_random_possible_coastal_ship_position (lines 500-507)
    STATEMENT: simple statement: """Returns a position in water that is not at the border of the world
		but on the coast of an island.
		@return: Point""" (lines 501-501)
    STATEMENT: simple statement: return (lines 504-504)
  METHOD: method: get_tiles_in_radius (lines 507-516)
    STATEMENT: simple statement: """Returns all tiles in the radius around the point.
		This is a generator; make sure you use it appropriately.
		@param position: Point instance
		@return List of tiles in radius.
		""" (lines 508-508)
    STATEMENT: for: null (lines 513-516)
      STATEMENT: simple statement: yield (lines 514-514)
  METHOD: method: get_points_in_radius (lines 516-532)
    STATEMENT: simple statement: """Returns all points in the radius around the point.
		This is a generator; make sure you use it appropriately.
		@param position: Point instance
		@return List of points in radius.
		""" (lines 517-517)
    STATEMENT: simple statement: assert (lines 522-522)
    STATEMENT: simple statement: points (lines 523-523)
    STATEMENT: if: null (lines 524-527)
      STATEMENT: simple statement: points (lines 525-525)
      STATEMENT: simple statement: self (lines 526-526)
    STATEMENT: for: null (lines 527-532)
      STATEMENT: if: null (lines 528-532)
        STATEMENT: simple statement: yield (lines 530-530)
  METHOD: method: setup_player (lines 532-547)
    STATEMENT: simple statement: """Sets up a new Player instance and adds her to the active world.
		Only used for new games. Loading old players is done in _init().
		@param local: bool, whether the player is the one sitting on front of this machine.""" (lines 533-533)
    STATEMENT: simple statement: inv (lines 536-536)
    STATEMENT: simple statement: player (lines 537-537)
    STATEMENT: if: null (lines 538-540)
      STATEMENT: simple statement: player (lines 539-539)
    STATEMENT: else: null (lines 540-542)
      STATEMENT: simple statement: player (lines 541-541)
    STATEMENT: simple statement: player (lines 542-542)
    STATEMENT: if: null (lines 543-545)
      STATEMENT: simple statement: self (lines 544-544)
    STATEMENT: simple statement: self (lines 545-545)
  METHOD: method: get_tile (lines 547-554)
    STATEMENT: simple statement: """Returns the ground at x, y.
		@param point: coords as Point
		@return: instance of Ground at x, y
		""" (lines 548-548)
    STATEMENT: simple statement: return (lines 552-552)
  STATEMENT: simple statement: @ (lines 554-554)
  METHOD: method: settlements (lines 555-562)
    STATEMENT: simple statement: """Returns all settlements on world""" (lines 556-556)
    STATEMENT: simple statement: settlements (lines 557-557)
    STATEMENT: for: null (lines 558-560)
      STATEMENT: simple statement: settlements (lines 559-559)
    STATEMENT: simple statement: return (lines 560-560)
  METHOD: method: get_island (lines 562-568)
    STATEMENT: simple statement: """Returns the island for that coordinate. If none is found, returns None.
		@param point: instance of Point""" (lines 563-563)
    STATEMENT: simple statement: return (lines 566-566)
  METHOD: method: get_island_tuple (lines 568-572)
    STATEMENT: simple statement: """Overloaded from above""" (lines 569-569)
    STATEMENT: simple statement: return (lines 570-570)
  METHOD: method: get_islands_in_radius (lines 572-583)
    STATEMENT: simple statement: """Returns all islands in a certain radius around a point.
		@return set of islands in radius""" (lines 573-573)
    STATEMENT: simple statement: islands (lines 575-575)
    STATEMENT: for: null (lines 576-581)
      STATEMENT: for: null (lines 577-581)
        STATEMENT: simple statement: islands (lines 579-579)
        STATEMENT: simple statement: break (lines 580-580)
    STATEMENT: simple statement: return (lines 581-581)
  METHOD: method: get_warehouses (lines 583-609)
    STATEMENT: simple statement: """Returns all warehouses on the map, optionally only those in range
		around the specified position.
		@param position: Point or Rect instance.
		@param radius: int radius to use.
		@param owner: Player instance, list only warehouses belonging to this player.
		@param include_tradeable also list the warehouses the owner can trade with
		@return: List of warehouses.
		""" (lines 584-584)
    STATEMENT: simple statement: warehouses (lines 592-592)
    STATEMENT: simple statement: islands (lines 593-593)
    STATEMENT: if: null (lines 594-596)
      STATEMENT: simple statement: islands (lines 595-595)
    STATEMENT: else: null (lines 596-599)
      STATEMENT: simple statement: islands (lines 597-597)
    STATEMENT: for: null (lines 599-607)
      STATEMENT: for: null (lines 600-607)
        STATEMENT: simple statement: warehouse (lines 601-601)
        STATEMENT: if: null (lines 602-607)
          STATEMENT: simple statement: warehouses (lines 606-606)
    STATEMENT: simple statement: return (lines 607-607)
  METHOD: method: get_ships (lines 609-622)
    STATEMENT: simple statement: """Returns all ships on the map, optionally only those in range
		around the specified position.
		@param position: Point or Rect instance.
		@param radius: int radius to use.
		@return: List of ships.
		""" (lines 610-610)
    STATEMENT: if: null (lines 616-619)
      STATEMENT: simple statement: circle (lines 617-617)
      STATEMENT: simple statement: return (lines 618-618)
    STATEMENT: else: null (lines 619-622)
      STATEMENT: simple statement: return (lines 620-620)
  METHOD: method: get_ground_units (lines 622-630)
    STATEMENT: simple statement: """@see get_ships""" (lines 623-623)
    STATEMENT: if: null (lines 624-627)
      STATEMENT: simple statement: circle (lines 625-625)
      STATEMENT: simple statement: return (lines 626-626)
    STATEMENT: else: null (lines 627-630)
      STATEMENT: simple statement: return (lines 628-628)
  METHOD: method: get_buildings (lines 630-643)
    STATEMENT: simple statement: """@see get_ships""" (lines 631-631)
    STATEMENT: simple statement: buildings (lines 632-632)
    STATEMENT: if: null (lines 633-640)
      STATEMENT: simple statement: circle (lines 634-634)
      STATEMENT: for: null (lines 635-639)
        STATEMENT: for: null (lines 636-639)
          STATEMENT: if: null (lines 637-639)
            STATEMENT: simple statement: buildings (lines 638-638)
      STATEMENT: simple statement: return (lines 639-639)
    STATEMENT: else: null (lines 640-643)
      STATEMENT: simple statement: return (lines 641-641)
  METHOD: method: get_all_buildings (lines 643-652)
    STATEMENT: simple statement: """Yields all buildings independent of owner""" (lines 644-644)
    STATEMENT: for: null (lines 645-652)
      STATEMENT: for: null (lines 646-648)
        STATEMENT: simple statement: yield (lines 647-647)
      STATEMENT: for: null (lines 648-652)
        STATEMENT: for: null (lines 649-652)
          STATEMENT: simple statement: yield (lines 650-650)
  METHOD: method: get_health_instances (lines 652-661)
    STATEMENT: simple statement: """Returns all instances that have health""" (lines 653-653)
    STATEMENT: simple statement: instances (lines 654-654)
    STATEMENT: for: null (lines 655-659)
      STATEMENT: if: null (lines 657-659)
        STATEMENT: simple statement: instances (lines 658-658)
    STATEMENT: simple statement: return (lines 659-659)
  METHOD: method: save (lines 661-690)
    STATEMENT: simple statement: """Saves the current game to the specified db.
		@param db: DbReader object of the db the game is saved to.""" (lines 662-662)
    STATEMENT: simple statement: super (lines 664-664)
    STATEMENT: if: null (lines 665-667)
      STATEMENT: simple statement: db (lines 666-666)
    STATEMENT: else: null (lines 667-674)
      STATEMENT: simple statement: simplified_name (lines 669-669)
      STATEMENT: if: null (lines 670-672)
        STATEMENT: simple statement: simplified_name (lines 671-671)
      STATEMENT: simple statement: db (lines 672-672)
    STATEMENT: for: null (lines 674-676)
      STATEMENT: simple statement: island (lines 675-675)
    STATEMENT: for: null (lines 676-678)
      STATEMENT: simple statement: player (lines 677-677)
    STATEMENT: if: null (lines 678-680)
      STATEMENT: simple statement: self (lines 679-679)
    STATEMENT: if: null (lines 680-682)
      STATEMENT: simple statement: self (lines 681-681)
    STATEMENT: for: null (lines 682-684)
      STATEMENT: simple statement: unit (lines 683-683)
    STATEMENT: for: null (lines 684-686)
      STATEMENT: simple statement: bullet (lines 685-685)
    STATEMENT: simple statement: self (lines 686-686)
    STATEMENT: simple statement: Weapon (lines 687-687)
    STATEMENT: simple statement: self (lines 688-688)
  METHOD: method: get_checkup_hash (lines 690-723)
    STATEMENT: simple statement: """Returns a collection of important game state values. Used to check if two mp games have diverged.
		Not designed to be reliable.""" (lines 691-691)
    STATEMENT: simple statement: data (lines 695-699)
    STATEMENT: for: null (lines 700-715)
      STATEMENT: simple statement: dict_hash (lines 704-704)
      STATEMENT: for: null (lines 705-715)
        STATEMENT: simple statement: storage_dict (lines 706-706)
        STATEMENT: simple statement: entry (lines 707-713)
        STATEMENT: simple statement: data (lines 714-714)
    STATEMENT: for: null (lines 715-721)
      STATEMENT: simple statement: entry (lines 716-719)
      STATEMENT: simple statement: data (lines 720-720)
    STATEMENT: simple statement: return (lines 721-721)
  METHOD: method: toggle_owner_highlight (lines 723-739)
    STATEMENT: simple statement: renderer (lines 724-724)
    STATEMENT: simple statement: self (lines 726-726)
    STATEMENT: if: null (lines 727-735)
      STATEMENT: for: null (lines 728-735)
        STATEMENT: simple statement: red (lines 729-729)
        STATEMENT: simple statement: green (lines 730-730)
        STATEMENT: simple statement: blue (lines 731-731)
        STATEMENT: for: null (lines 732-735)
          STATEMENT: for: null (lines 733-735)
            STATEMENT: simple statement: renderer (lines 734-734)
    STATEMENT: else: null (lines 735-739)
      STATEMENT: simple statement: renderer (lines 737-737)
  METHOD: method: toggle_translucency (lines 739-743)
    STATEMENT: simple statement: """Make certain building types translucent""" (lines 740-740)
    STATEMENT: simple statement: worldutils (lines 741-741)
  METHOD: method: toggle_health_for_all_health_instances (lines 743-744)
    STATEMENT: simple statement: worldutils (lines 744-744)
METHOD: method: load_building (lines 747-749)
  STATEMENT: simple statement: """Loads a saved building. Don't load buildings yourself in the game code.""" (lines 748-748)
  STATEMENT: simple statement: return (lines 749-749)
METHOD: method: load_raw_world (lines 752-757)
  STATEMENT: simple statement: WorldObject (lines 753-753)
  STATEMENT: simple statement: world (lines 754-754)
  STATEMENT: simple statement: world (lines 755-755)
  STATEMENT: simple statement: world (lines 756-756)
  STATEMENT: simple statement: return (lines 757-757)
STATEMENT: simple statement: decorators (lines 760-760)
STATEMENT: simple statement: decorators (lines 761-761)
