/* The following code was generated by JFlex 1.4.2 on {{TIMESTAMP}} */

package org.conqat.lib.scanner;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on {{TIMESTAMP}} from the specification file
 * <tt>/home/freakout/cqse/repositories/conqat/trunk/lib/org.conqat.lib.scanner/grammars/javascript.flex</tt>
 */
class JavaScriptScanner implements ILenientScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int SINGLE_QUOTE_STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int REGEX = 6;
  public static final int DOUBLE_QUOTE_STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\3\1\2\1\0\1\4\1\1\16\10\4\0\1\3\1\67"+
    "\1\22\1\0\1\7\1\77\1\73\1\23\1\54\1\55\1\6\1\75"+
    "\1\63\1\14\1\12\1\5\1\15\3\20\4\21\2\11\1\72\1\62"+
    "\1\66\1\64\1\65\1\71\1\0\4\17\1\13\1\17\21\7\1\16"+
    "\2\7\1\60\1\24\1\61\1\76\1\7\1\0\1\30\1\25\1\32"+
    "\1\43\1\27\1\45\1\44\1\35\1\41\1\7\1\31\1\36\1\46"+
    "\1\40\1\37\1\50\1\7\1\26\1\33\1\34\1\42\1\53\1\52"+
    "\1\47\1\51\1\7\1\56\1\74\1\57\1\70\41\10\2\0\4\7"+
    "\4\0\1\7\2\0\1\10\7\0\1\7\4\0\1\7\5\0\27\7"+
    "\1\0\37\7\1\0\u01ca\7\4\0\14\7\16\0\5\7\7\0\1\7"+
    "\1\0\1\7\21\0\160\10\5\7\1\0\2\7\2\0\4\7\10\0"+
    "\1\7\1\0\3\7\1\0\1\7\1\0\24\7\1\0\123\7\1\0"+
    "\213\7\1\0\5\10\2\0\236\7\11\0\46\7\2\0\1\7\7\0"+
    "\47\7\11\0\55\10\1\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\1\10\10\0\33\7\5\0\3\7\15\0\4\10\7\0\1\7\4\0"+
    "\13\10\5\0\53\7\37\10\4\0\2\7\1\10\143\7\1\0\1\7"+
    "\10\10\1\0\6\10\2\7\2\10\1\0\4\10\2\7\12\10\3\7"+
    "\2\0\1\7\17\0\1\10\1\7\1\10\36\7\33\10\2\0\131\7"+
    "\13\10\1\7\16\0\12\10\41\7\11\10\2\7\4\0\1\7\5\0"+
    "\26\7\4\10\1\7\11\10\1\7\3\10\1\7\5\10\22\0\31\7"+
    "\3\10\244\0\4\10\66\7\3\10\1\7\22\10\1\7\7\10\12\7"+
    "\2\10\2\0\12\10\1\0\7\7\1\0\7\7\1\0\3\10\1\0"+
    "\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0\1\7\3\0"+
    "\4\7\2\0\1\10\1\7\7\10\2\0\2\10\2\0\3\10\1\7"+
    "\10\0\1\10\4\0\2\7\1\0\3\7\2\10\2\0\12\10\4\7"+
    "\7\0\1\7\5\0\3\10\1\0\6\7\4\0\2\7\2\0\26\7"+
    "\1\0\7\7\1\0\2\7\1\0\2\7\1\0\2\7\2\0\1\10"+
    "\1\0\5\10\4\0\2\10\2\0\3\10\3\0\1\10\7\0\4\7"+
    "\1\0\1\7\7\0\14\10\3\7\1\10\13\0\3\10\1\0\11\7"+
    "\1\0\3\7\1\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7"+
    "\2\0\1\10\1\7\10\10\1\0\3\10\1\0\3\10\2\0\1\7"+
    "\17\0\2\7\2\10\2\0\12\10\1\0\1\7\17\0\3\10\1\0"+
    "\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0\2\7\1\0"+
    "\5\7\2\0\1\10\1\7\7\10\2\0\2\10\2\0\3\10\10\0"+
    "\2\10\4\0\2\7\1\0\3\7\2\10\2\0\12\10\1\0\1\7"+
    "\20\0\1\10\1\7\1\0\6\7\3\0\3\7\1\0\4\7\3\0"+
    "\2\7\1\0\1\7\1\0\2\7\3\0\2\7\3\0\3\7\3\0"+
    "\14\7\4\0\5\10\3\0\3\10\1\0\4\10\2\0\1\7\6\0"+
    "\1\10\16\0\12\10\11\0\1\7\7\0\3\10\1\0\10\7\1\0"+
    "\3\7\1\0\27\7\1\0\12\7\1\0\5\7\3\0\1\7\7\10"+
    "\1\0\3\10\1\0\4\10\7\0\2\10\1\0\2\7\6\0\2\7"+
    "\2\10\2\0\12\10\22\0\2\10\1\0\10\7\1\0\3\7\1\0"+
    "\27\7\1\0\12\7\1\0\5\7\2\0\1\10\1\7\7\10\1\0"+
    "\3\10\1\0\4\10\7\0\2\10\7\0\1\7\1\0\2\7\2\10"+
    "\2\0\12\10\1\0\2\7\17\0\2\10\1\0\10\7\1\0\3\7"+
    "\1\0\51\7\2\0\1\7\7\10\1\0\3\10\1\0\4\10\1\7"+
    "\10\0\1\10\10\0\2\7\2\10\2\0\12\10\12\0\6\7\2\0"+
    "\2\10\1\0\22\7\3\0\30\7\1\0\11\7\1\0\1\7\2\0"+
    "\7\7\3\0\1\10\4\0\6\10\1\0\1\10\1\0\10\10\22\0"+
    "\2\10\15\0\60\7\1\10\2\7\7\10\4\0\10\7\10\10\1\0"+
    "\12\10\47\0\2\7\1\0\1\7\2\0\2\7\1\0\1\7\2\0"+
    "\1\7\6\0\4\7\1\0\7\7\1\0\3\7\1\0\1\7\1\0"+
    "\1\7\2\0\2\7\1\0\4\7\1\10\2\7\6\10\1\0\2\10"+
    "\1\7\2\0\5\7\1\0\1\7\1\0\6\10\2\0\12\10\2\0"+
    "\2\7\42\0\1\7\27\0\2\10\6\0\12\10\13\0\1\10\1\0"+
    "\1\10\1\0\1\10\4\0\2\10\10\7\1\0\44\7\4\0\24\10"+
    "\1\0\2\10\5\7\13\10\1\0\44\10\11\0\1\10\71\0\53\7"+
    "\24\10\1\7\12\10\6\0\6\7\4\10\4\7\3\10\1\7\3\10"+
    "\2\7\7\10\3\7\4\10\15\7\14\10\1\7\17\10\2\0\46\7"+
    "\12\0\53\7\1\0\1\7\3\0\u0149\7\1\0\4\7\2\0\7\7"+
    "\1\0\1\7\1\0\4\7\2\0\51\7\1\0\4\7\2\0\41\7"+
    "\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\17\7"+
    "\1\0\71\7\1\0\4\7\2\0\103\7\2\0\3\10\40\0\20\7"+
    "\20\0\125\7\14\0\u026c\7\2\0\21\7\1\0\32\7\5\0\113\7"+
    "\3\0\3\7\17\0\15\7\1\0\4\7\3\10\13\0\22\7\3\10"+
    "\13\0\22\7\2\10\14\0\15\7\1\0\3\7\1\0\2\10\14\0"+
    "\64\7\40\10\3\0\1\7\3\0\2\7\1\10\2\0\12\10\41\0"+
    "\3\10\2\0\12\10\6\0\130\7\10\0\51\7\1\10\1\7\5\0"+
    "\106\7\12\0\35\7\3\0\14\10\4\0\14\10\12\0\12\10\36\7"+
    "\2\0\5\7\13\0\54\7\4\0\21\10\7\7\2\10\6\0\12\10"+
    "\46\0\27\7\5\10\4\0\65\7\12\10\1\0\35\10\2\0\13\10"+
    "\6\0\12\10\15\0\1\7\130\0\5\10\57\7\21\10\7\7\4\0"+
    "\12\10\21\0\11\10\14\0\3\10\36\7\12\10\3\0\2\7\12\10"+
    "\6\0\46\7\16\10\14\0\44\7\24\10\10\0\12\10\3\0\3\7"+
    "\12\10\44\7\122\0\3\10\1\0\25\10\4\7\1\10\4\7\1\10"+
    "\15\0\300\7\47\10\25\0\4\10\u0116\7\2\0\6\7\2\0\46\7"+
    "\2\0\6\7\2\0\10\7\1\0\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\37\7\2\0\65\7\1\0\7\7\1\0\1\7\3\0\3\7"+
    "\1\0\7\7\3\0\4\7\2\0\6\7\4\0\15\7\5\0\3\7"+
    "\1\0\7\7\16\0\5\10\32\0\5\10\20\0\2\7\23\0\1\7"+
    "\13\0\5\10\5\0\6\10\1\0\1\7\15\0\1\7\20\0\15\7"+
    "\3\0\32\7\26\0\15\10\4\0\1\10\3\0\14\10\21\0\1\7"+
    "\4\0\1\7\2\0\12\7\1\0\1\7\3\0\5\7\6\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\1\0\13\7\2\0\4\7"+
    "\5\0\5\7\4\0\1\7\21\0\51\7\u0a77\0\57\7\1\0\57\7"+
    "\1\0\205\7\6\0\4\7\3\10\16\0\46\7\12\0\66\7\11\0"+
    "\1\7\17\0\1\10\27\7\11\0\7\7\1\0\7\7\1\0\7\7"+
    "\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7"+
    "\1\0\40\10\57\0\1\7\u01d5\0\3\7\31\0\11\7\6\10\1\0"+
    "\5\7\2\0\5\7\4\0\126\7\2\0\2\10\2\0\3\7\1\0"+
    "\132\7\1\0\4\7\5\0\51\7\3\0\136\7\21\0\33\7\65\0"+
    "\20\7\u0200\0\u19b6\7\112\0\u51cc\7\64\0\u048d\7\103\0\56\7\2\0"+
    "\u010d\7\3\0\20\7\12\10\2\7\24\0\57\7\1\10\14\0\2\10"+
    "\1\0\31\7\10\0\120\7\2\10\45\0\11\7\2\0\147\7\2\0"+
    "\4\7\1\0\2\7\16\0\12\7\120\0\10\7\1\10\3\7\1\10"+
    "\4\7\1\10\27\7\5\10\20\0\1\7\7\0\64\7\14\0\2\10"+
    "\62\7\21\10\13\0\12\10\6\0\22\10\6\7\3\0\1\7\4\0"+
    "\12\10\34\7\10\10\2\0\27\7\15\10\14\0\35\7\3\0\4\10"+
    "\57\7\16\10\16\0\1\7\12\10\46\0\51\7\16\10\11\0\3\7"+
    "\1\10\10\7\2\10\2\0\12\10\6\0\27\7\3\0\1\7\1\10"+
    "\4\0\60\7\1\10\1\7\3\10\2\7\2\10\5\7\2\10\1\7"+
    "\1\10\1\7\30\0\3\7\43\0\6\7\2\0\6\7\2\0\6\7"+
    "\11\0\7\7\1\0\7\7\221\0\43\7\10\10\1\0\2\10\2\0"+
    "\12\10\6\0\u2ba4\7\14\0\27\7\4\0\61\7\u2104\0\u012e\7\2\0"+
    "\76\7\2\0\152\7\46\0\7\7\14\0\5\7\5\0\1\7\1\10"+
    "\12\7\1\0\15\7\1\0\5\7\1\0\1\7\1\0\2\7\1\0"+
    "\2\7\1\0\154\7\41\0\u016b\7\22\0\100\7\2\0\66\7\50\0"+
    "\15\7\3\0\20\10\20\0\7\10\14\0\2\7\30\0\3\7\31\0"+
    "\1\7\6\0\5\7\1\0\207\7\2\0\1\10\4\0\1\7\13\0"+
    "\12\10\7\0\32\7\4\0\1\7\1\0\32\7\13\0\131\7\3\0"+
    "\6\7\2\0\6\7\2\0\6\7\2\0\3\7\3\0\2\7\3\0"+
    "\2\7\22\0\3\10\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\7\1\12\1\13\17\6\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\2\41\1\42\1\1\1\40\2\43"+
    "\1\40\2\44\1\45\1\1\1\46\1\0\1\47\1\50"+
    "\1\51\1\0\1\52\1\53\1\51\1\7\1\0\2\7"+
    "\21\6\1\54\1\55\2\6\1\56\14\6\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\2\40\1\75\3\40\2\46"+
    "\2\0\1\51\1\0\3\7\16\6\1\76\3\6\1\77"+
    "\1\100\10\6\1\101\11\6\1\102\1\6\1\103\1\104"+
    "\1\105\1\106\5\0\1\107\2\7\2\6\1\110\1\111"+
    "\2\6\1\112\7\6\1\113\1\6\1\114\1\6\1\115"+
    "\17\6\1\116\1\117\2\0\2\7\1\120\3\6\1\121"+
    "\1\122\1\123\2\6\1\124\1\6\1\125\16\6\1\126"+
    "\1\127\1\130\2\7\1\131\1\6\1\132\1\6\1\133"+
    "\1\134\1\135\3\6\1\136\1\6\1\137\6\6\1\140"+
    "\2\7\1\141\5\6\1\142\1\143\2\6\1\144\1\145"+
    "\2\7\1\146\3\6\1\147\1\150\1\6\2\7\1\6"+
    "\1\151\1\6\1\152\2\7\1\153\1\154\24\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[337];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0100\0\u0100"+
    "\0\u0180\0\u01c0\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0100"+
    "\0\u0100\0\u0340\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0"+
    "\0\u0500\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0"+
    "\0\u0100\0\u0100\0\u0100\0\u0100\0\u0100\0\u0100\0\u0100\0\u0100"+
    "\0\u0700\0\u0740\0\u0780\0\u07c0\0\u0100\0\u0100\0\u0100\0\u0800"+
    "\0\u0840\0\u0880\0\u08c0\0\u0900\0\u0940\0\u0980\0\u0100\0\u0100"+
    "\0\u09c0\0\u0a00\0\u0a40\0\u0100\0\u0a80\0\u0ac0\0\u0100\0\u0b00"+
    "\0\u0b40\0\u0b80\0\u0bc0\0\u0100\0\u0100\0\u0c00\0\u0c40\0\u0100"+
    "\0\u0100\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\u0dc0\0\u0e00"+
    "\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0f80\0\u0fc0\0\u1000"+
    "\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0\0\u1200"+
    "\0\u0200\0\u1240\0\u1280\0\u0200\0\u12c0\0\u1300\0\u1340\0\u1380"+
    "\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540\0\u1580"+
    "\0\u15c0\0\u0100\0\u1600\0\u0100\0\u1640\0\u1680\0\u0100\0\u0100"+
    "\0\u0100\0\u0100\0\u0100\0\u0100\0\u0100\0\u0100\0\u0100\0\u16c0"+
    "\0\u0100\0\u1700\0\u1740\0\u1780\0\u17c0\0\u0100\0\u1800\0\u1840"+
    "\0\u1880\0\u1880\0\u18c0\0\u0d00\0\u1900\0\u1940\0\u1980\0\u19c0"+
    "\0\u1a00\0\u1a40\0\u1a80\0\u1ac0\0\u1b00\0\u1b40\0\u1b80\0\u1bc0"+
    "\0\u1c00\0\u1c40\0\u1c80\0\u0200\0\u1cc0\0\u1d00\0\u1d40\0\u0200"+
    "\0\u0200\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80\0\u1ec0\0\u1f00"+
    "\0\u1f40\0\u0200\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u2080\0\u20c0"+
    "\0\u2100\0\u2140\0\u2180\0\u0200\0\u21c0\0\u0100\0\u0100\0\u0100"+
    "\0\u0100\0\u2200\0\u2240\0\u2280\0\u22c0\0\u2300\0\u0100\0\u2340"+
    "\0\u2380\0\u23c0\0\u2400\0\u0200\0\u0200\0\u2440\0\u2480\0\u0200"+
    "\0\u24c0\0\u2500\0\u2540\0\u2580\0\u25c0\0\u2600\0\u2640\0\u0200"+
    "\0\u2680\0\u0200\0\u26c0\0\u0200\0\u2700\0\u2740\0\u2780\0\u27c0"+
    "\0\u2800\0\u2840\0\u2880\0\u28c0\0\u2900\0\u2940\0\u2980\0\u29c0"+
    "\0\u2a00\0\u2a40\0\u2a80\0\u0200\0\u0200\0\u1780\0\u2ac0\0\u2b00"+
    "\0\u2b40\0\u0200\0\u2b80\0\u2bc0\0\u2c00\0\u0200\0\u0200\0\u0200"+
    "\0\u2c40\0\u2c80\0\u0200\0\u2cc0\0\u0200\0\u2d00\0\u2d40\0\u2d80"+
    "\0\u2dc0\0\u2e00\0\u2e40\0\u2e80\0\u2ec0\0\u2f00\0\u2f40\0\u2f80"+
    "\0\u2fc0\0\u3000\0\u3040\0\u0200\0\u0200\0\u0100\0\u3080\0\u30c0"+
    "\0\u0200\0\u3100\0\u0200\0\u3140\0\u0200\0\u0200\0\u0200\0\u3180"+
    "\0\u31c0\0\u3200\0\u0200\0\u3240\0\u0200\0\u3280\0\u32c0\0\u3300"+
    "\0\u3340\0\u3380\0\u33c0\0\u0200\0\u3400\0\u3440\0\u0200\0\u3480"+
    "\0\u34c0\0\u3500\0\u3540\0\u3580\0\u0200\0\u0200\0\u35c0\0\u3600"+
    "\0\u0200\0\u0200\0\u3640\0\u3680\0\u0200\0\u36c0\0\u3700\0\u3740"+
    "\0\u0200\0\u0200\0\u3780\0\u37c0\0\u3800\0\u3840\0\u0200\0\u3880"+
    "\0\u0200\0\u38c0\0\u3900\0\u0200\0\u0200\0\u3940\0\u3980\0\u39c0"+
    "\0\u3a00\0\u3a40\0\u3a80\0\u3ac0\0\u3b00\0\u3b40\0\u3b80\0\u3bc0"+
    "\0\u3c00\0\u3c40\0\u3c80\0\u0100\0\u3cc0\0\u3d00\0\u3d40\0\u3d80"+
    "\0\u0c80";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[337];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\2\7\1\10\1\11\1\12\1\13\1\5"+
    "\1\14\1\15\1\13\1\16\1\17\2\13\2\14\1\20"+
    "\1\21\1\5\1\22\1\23\1\24\2\13\1\25\1\26"+
    "\1\27\1\13\1\30\1\13\1\31\1\32\1\13\1\33"+
    "\1\13\1\34\2\13\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\20\65\1\70"+
    "\1\71\53\65\1\72\1\73\1\74\17\72\1\70\1\72"+
    "\1\71\53\72\1\75\1\76\1\77\2\75\1\100\16\75"+
    "\1\101\53\75\102\0\1\7\102\0\1\102\1\103\55\0"+
    "\1\104\77\0\1\105\22\0\3\13\1\0\1\13\1\0"+
    "\5\13\3\0\27\13\35\0\1\14\1\106\1\107\1\0"+
    "\1\14\2\0\2\14\5\0\1\107\61\0\1\106\3\0"+
    "\1\106\2\0\2\106\72\0\1\110\47\0\1\111\24\0"+
    "\1\112\1\106\1\107\1\0\1\113\1\114\1\0\1\115"+
    "\1\116\5\0\1\107\17\0\1\114\37\0\3\13\1\0"+
    "\1\13\1\0\5\13\3\0\1\13\1\117\25\13\33\0"+
    "\3\13\1\0\1\13\1\0\5\13\3\0\2\13\1\120"+
    "\24\13\33\0\3\13\1\0\1\13\1\0\5\13\3\0"+
    "\11\13\1\121\1\13\1\122\6\13\1\123\4\13\33\0"+
    "\3\13\1\0\1\13\1\0\5\13\3\0\3\13\1\124"+
    "\5\13\1\125\1\126\14\13\33\0\3\13\1\0\1\13"+
    "\1\0\5\13\3\0\7\13\1\127\5\13\1\130\7\13"+
    "\1\131\1\13\33\0\3\13\1\0\1\13\1\0\5\13"+
    "\3\0\1\13\1\132\6\13\1\133\13\13\1\134\2\13"+
    "\33\0\3\13\1\0\1\13\1\0\5\13\3\0\2\13"+
    "\1\135\24\13\33\0\3\13\1\0\1\13\1\0\5\13"+
    "\3\0\2\13\1\136\12\13\1\137\11\13\33\0\3\13"+
    "\1\0\1\13\1\0\5\13\3\0\13\13\1\140\4\13"+
    "\1\141\1\142\5\13\33\0\3\13\1\0\1\13\1\0"+
    "\5\13\3\0\2\13\1\143\7\13\1\144\14\13\33\0"+
    "\3\13\1\0\1\13\1\0\5\13\3\0\3\13\1\145"+
    "\6\13\1\146\1\13\1\147\1\150\11\13\33\0\3\13"+
    "\1\0\1\13\1\0\5\13\3\0\1\13\1\151\1\13"+
    "\1\152\11\13\1\153\11\13\33\0\3\13\1\0\1\13"+
    "\1\0\5\13\3\0\14\13\1\154\12\13\33\0\3\13"+
    "\1\0\1\13\1\0\5\13\3\0\10\13\1\155\3\13"+
    "\1\156\12\13\33\0\3\13\1\0\1\13\1\0\5\13"+
    "\3\0\3\13\1\157\6\13\1\160\14\13\110\0\1\161"+
    "\77\0\1\162\1\163\76\0\1\164\1\0\1\165\75\0"+
    "\1\166\77\0\1\167\6\0\1\170\70\0\1\171\7\0"+
    "\1\172\67\0\1\173\10\0\1\174\66\0\1\175\77\0"+
    "\1\176\13\0\1\65\2\0\20\65\2\0\53\65\2\0"+
    "\1\67\75\0\1\177\1\200\1\201\12\177\1\202\2\177"+
    "\1\202\21\177\1\203\4\177\1\204\30\177\1\72\2\0"+
    "\17\72\1\0\1\72\1\0\53\72\2\0\1\74\75\0"+
    "\1\75\2\0\2\75\1\0\16\75\1\0\53\75\2\0"+
    "\1\77\130\0\1\100\5\0\1\100\2\0\1\100\1\0"+
    "\1\100\31\0\1\177\2\0\75\177\1\102\1\205\1\206"+
    "\75\102\6\207\1\210\71\207\11\0\1\106\1\0\1\107"+
    "\1\0\1\106\2\0\2\106\5\0\1\107\61\0\1\211"+
    "\2\0\1\212\1\211\2\0\2\211\53\0\1\212\13\0"+
    "\1\112\1\106\1\107\1\0\1\112\2\0\2\112\5\0"+
    "\1\107\61\0\1\112\1\106\1\107\1\0\1\113\2\0"+
    "\1\115\1\116\5\0\1\107\61\0\1\213\1\0\1\213"+
    "\1\0\1\214\1\0\3\213\3\0\1\213\1\0\2\213"+
    "\1\0\1\213\10\0\1\213\1\0\1\213\43\0\1\112"+
    "\1\106\1\107\1\0\1\116\2\0\2\116\5\0\1\107"+
    "\61\0\1\112\1\106\1\107\1\0\1\215\2\0\2\215"+
    "\5\0\1\107\57\0\3\13\1\0\1\13\1\0\5\13"+
    "\3\0\2\13\1\216\24\13\33\0\3\13\1\0\1\13"+
    "\1\0\5\13\3\0\7\13\1\217\17\13\33\0\3\13"+
    "\1\0\1\13\1\0\5\13\3\0\6\13\1\220\20\13"+
    "\33\0\3\13\1\0\1\13\1\0\5\13\3\0\15\13"+
    "\1\221\11\13\33\0\3\13\1\0\1\13\1\0\5\13"+
    "\3\0\7\13\1\222\13\13\1\223\3\13\33\0\3\13"+
    "\1\0\1\13\1\0\5\13\3\0\6\13\1\224\1\225"+
    "\17\13\33\0\3\13\1\0\1\13\1\0\5\13\3\0"+
    "\3\13\1\226\23\13\33\0\3\13\1\0\1\13\1\0"+
    "\5\13\3\0\13\13\1\227\13\13\33\0\3\13\1\0"+
    "\1\13\1\0\5\13\3\0\3\13\1\230\23\13\33\0"+
    "\3\13\1\0\1\13\1\0\5\13\3\0\23\13\1\231"+
    "\3\13\33\0\3\13\1\0\1\13\1\0\5\13\3\0"+
    "\14\13\1\232\12\13\33\0\3\13\1\0\1\13\1\0"+
    "\5\13\3\0\15\13\1\233\6\13\1\234\2\13\33\0"+
    "\3\13\1\0\1\13\1\0\5\13\3\0\1\13\1\235"+
    "\12\13\1\236\12\13\33\0\3\13\1\0\1\13\1\0"+
    "\5\13\3\0\23\13\1\237\3\13\33\0\3\13\1\0"+
    "\1\13\1\0\5\13\3\0\7\13\1\240\17\13\33\0"+
    "\3\13\1\0\1\13\1\0\5\13\3\0\25\13\1\241"+
    "\1\13\33\0\3\13\1\0\1\13\1\0\5\13\3\0"+
    "\11\13\1\242\15\13\33\0\3\13\1\0\1\13\1\0"+
    "\5\13\3\0\6\13\1\243\1\244\17\13\33\0\3\13"+
    "\1\0\1\13\1\0\5\13\3\0\23\13\1\245\3\13"+
    "\33\0\3\13\1\0\1\13\1\0\5\13\3\0\1\246"+
    "\10\13\1\247\6\13\1\250\6\13\33\0\3\13\1\0"+
    "\1\13\1\0\5\13\3\0\11\13\1\251\15\13\33\0"+
    "\3\13\1\0\1\13\1\0\5\13\3\0\1\13\1\252"+
    "\25\13\33\0\3\13\1\0\1\13\1\0\5\13\3\0"+
    "\13\13\1\253\13\13\33\0\3\13\1\0\1\13\1\0"+
    "\5\13\3\0\13\13\1\254\13\13\33\0\3\13\1\0"+
    "\1\13\1\0\5\13\3\0\12\13\1\255\1\13\1\256"+
    "\12\13\33\0\3\13\1\0\1\13\1\0\5\13\3\0"+
    "\5\13\1\257\21\13\33\0\3\13\1\0\1\13\1\0"+
    "\5\13\3\0\1\260\26\13\33\0\3\13\1\0\1\13"+
    "\1\0\5\13\3\0\2\13\1\261\24\13\33\0\3\13"+
    "\1\0\1\13\1\0\5\13\3\0\14\13\1\262\12\13"+
    "\33\0\3\13\1\0\1\13\1\0\5\13\3\0\7\13"+
    "\1\263\17\13\33\0\3\13\1\0\1\13\1\0\5\13"+
    "\3\0\1\13\1\264\25\13\33\0\3\13\1\0\1\13"+
    "\1\0\5\13\3\0\14\13\1\265\12\13\110\0\1\266"+
    "\77\0\1\267\77\0\1\270\77\0\1\271\15\0\1\201"+
    "\112\0\1\272\2\0\2\272\67\0\1\273\1\0\1\273"+
    "\1\0\1\273\1\0\3\273\3\0\1\273\1\0\2\273"+
    "\1\0\1\273\10\0\1\273\1\0\1\273\43\0\1\274"+
    "\1\0\1\274\1\0\1\274\1\0\3\274\3\0\1\274"+
    "\1\0\2\274\1\0\1\274\10\0\1\274\1\0\1\274"+
    "\34\0\1\206\75\0\6\207\1\275\71\207\5\276\1\277"+
    "\1\210\71\276\11\0\1\211\3\0\1\211\2\0\2\211"+
    "\67\0\1\300\1\0\1\300\1\0\1\300\1\0\3\300"+
    "\3\0\1\300\1\0\2\300\1\0\1\300\10\0\1\300"+
    "\1\0\1\300\43\0\1\112\1\106\1\107\1\0\1\301"+
    "\2\0\2\301\5\0\1\107\57\0\3\13\1\0\1\13"+
    "\1\0\5\13\3\0\3\13\1\302\23\13\33\0\3\13"+
    "\1\0\1\13\1\0\5\13\3\0\15\13\1\303\11\13"+
    "\33\0\3\13\1\0\1\13\1\0\5\13\3\0\2\13"+
    "\1\304\24\13\33\0\3\13\1\0\1\13\1\0\5\13"+
    "\3\0\21\13\1\305\5\13\33\0\3\13\1\0\1\13"+
    "\1\0\5\13\3\0\2\13\1\306\24\13\33\0\3\13"+
    "\1\0\1\13\1\0\5\13\3\0\12\13\1\307\14\13"+
    "\33\0\3\13\1\0\1\13\1\0\5\13\3\0\2\13"+
    "\1\310\24\13\33\0\3\13\1\0\1\13\1\0\5\13"+
    "\3\0\5\13\1\311\21\13\33\0\3\13\1\0\1\13"+
    "\1\0\5\13\3\0\6\13\1\312\20\13\33\0\3\13"+
    "\1\0\1\13\1\0\5\13\3\0\6\13\1\313\1\314"+
    "\17\13\33\0\3\13\1\0\1\13\1\0\5\13\3\0"+
    "\7\13\1\315\17\13\33\0\3\13\1\0\1\13\1\0"+
    "\5\13\3\0\2\13\1\316\24\13\33\0\3\13\1\0"+
    "\1\13\1\0\5\13\3\0\7\13\1\317\17\13\33\0"+
    "\3\13\1\0\1\13\1\0\5\13\3\0\2\13\1\320"+
    "\24\13\33\0\3\13\1\0\1\13\1\0\5\13\3\0"+
    "\12\13\1\321\14\13\33\0\3\13\1\0\1\13\1\0"+
    "\5\13\3\0\6\13\1\322\20\13\33\0\3\13\1\0"+
    "\1\13\1\0\5\13\3\0\2\13\1\323\24\13\33\0"+
    "\3\13\1\0\1\13\1\0\5\13\3\0\11\13\1\324"+
    "\15\13\33\0\3\13\1\0\1\13\1\0\5\13\3\0"+
    "\7\13\1\325\17\13\33\0\3\13\1\0\1\13\1\0"+
    "\5\13\3\0\2\13\1\326\24\13\33\0\3\13\1\0"+
    "\1\13\1\0\5\13\3\0\11\13\1\327\1\330\14\13"+
    "\33\0\3\13\1\0\1\13\1\0\5\13\3\0\15\13"+
    "\1\331\11\13\33\0\3\13\1\0\1\13\1\0\5\13"+
    "\3\0\2\13\1\332\24\13\33\0\3\13\1\0\1\13"+
    "\1\0\5\13\3\0\3\13\1\333\23\13\33\0\3\13"+
    "\1\0\1\13\1\0\5\13\3\0\6\13\1\233\20\13"+
    "\33\0\3\13\1\0\1\13\1\0\5\13\3\0\3\13"+
    "\1\334\23\13\33\0\3\13\1\0\1\13\1\0\5\13"+
    "\3\0\5\13\1\335\21\13\33\0\3\13\1\0\1\13"+
    "\1\0\5\13\3\0\7\13\1\336\17\13\33\0\3\13"+
    "\1\0\1\13\1\0\5\13\3\0\26\13\1\337\33\0"+
    "\3\13\1\0\1\13\1\0\5\13\3\0\4\13\1\340"+
    "\22\13\33\0\3\13\1\0\1\13\1\0\5\13\3\0"+
    "\11\13\1\341\15\13\33\0\3\13\1\0\1\13\1\0"+
    "\5\13\3\0\11\13\1\342\15\13\33\0\3\13\1\0"+
    "\1\13\1\0\5\13\3\0\11\13\1\343\15\13\33\0"+
    "\3\13\1\0\1\13\1\0\5\13\3\0\10\13\1\344"+
    "\16\13\33\0\3\13\1\0\1\13\1\0\5\13\3\0"+
    "\16\13\1\345\10\13\41\0\1\177\2\0\2\177\67\0"+
    "\1\346\1\0\1\346\1\0\1\346\1\0\3\346\3\0"+
    "\1\346\1\0\2\346\1\0\1\346\10\0\1\346\1\0"+
    "\1\346\43\0\1\177\1\0\1\177\1\0\1\177\1\0"+
    "\3\177\3\0\1\177\1\0\2\177\1\0\1\177\10\0"+
    "\1\177\1\0\1\177\32\0\5\207\1\277\1\275\71\207"+
    "\6\276\1\347\71\276\11\0\1\350\1\0\1\350\1\0"+
    "\1\350\1\0\3\350\3\0\1\350\1\0\2\350\1\0"+
    "\1\350\10\0\1\350\1\0\1\350\43\0\1\112\1\106"+
    "\1\107\1\0\1\351\2\0\2\351\5\0\1\107\57\0"+
    "\3\13\1\0\1\13\1\0\5\13\3\0\4\13\1\352"+
    "\22\13\33\0\3\13\1\0\1\13\1\0\5\13\3\0"+
    "\1\13\1\353\25\13\33\0\3\13\1\0\1\13\1\0"+
    "\5\13\3\0\13\13\1\354\13\13\33\0\3\13\1\0"+
    "\1\13\1\0\5\13\3\0\1\13\1\355\25\13\33\0"+
    "\3\13\1\0\1\13\1\0\5\13\3\0\10\13\1\356"+
    "\16\13\33\0\3\13\1\0\1\13\1\0\5\13\3\0"+
    "\6\13\1\357\20\13\33\0\3\13\1\0\1\13\1\0"+
    "\5\13\3\0\7\13\1\360\17\13\33\0\3\13\1\0"+
    "\1\13\1\0\5\13\3\0\14\13\1\361\12\13\33\0"+
    "\3\13\1\0\1\13\1\0\5\13\3\0\14\13\1\362"+
    "\12\13\33\0\3\13\1\0\1\13\1\0\5\13\3\0"+
    "\1\13\1\363\25\13\33\0\3\13\1\0\1\13\1\0"+
    "\5\13\3\0\5\13\1\364\21\13\33\0\3\13\1\0"+
    "\1\13\1\0\5\13\3\0\25\13\1\365\1\13\33\0"+
    "\3\13\1\0\1\13\1\0\5\13\3\0\12\13\1\366"+
    "\14\13\33\0\3\13\1\0\1\13\1\0\5\13\3\0"+
    "\3\13\1\367\23\13\33\0\3\13\1\0\1\13\1\0"+
    "\5\13\3\0\1\13\1\370\25\13\33\0\3\13\1\0"+
    "\1\13\1\0\5\13\3\0\2\13\1\371\24\13\33\0"+
    "\3\13\1\0\1\13\1\0\5\13\3\0\1\13\1\372"+
    "\25\13\33\0\3\13\1\0\1\13\1\0\5\13\3\0"+
    "\17\13\1\373\7\13\33\0\3\13\1\0\1\13\1\0"+
    "\5\13\3\0\7\13\1\374\17\13\33\0\3\13\1\0"+
    "\1\13\1\0\5\13\3\0\15\13\1\375\11\13\33\0"+
    "\3\13\1\0\1\13\1\0\5\13\3\0\11\13\1\376"+
    "\15\13\33\0\3\13\1\0\1\13\1\0\5\13\3\0"+
    "\7\13\1\377\17\13\33\0\3\13\1\0\1\13\1\0"+
    "\5\13\3\0\2\13\1\u0100\24\13\33\0\3\13\1\0"+
    "\1\13\1\0\5\13\3\0\3\13\1\u0101\23\13\33\0"+
    "\3\13\1\0\1\13\1\0\5\13\3\0\3\13\1\u0102"+
    "\23\13\33\0\3\13\1\0\1\13\1\0\5\13\3\0"+
    "\14\13\1\u0103\12\13\33\0\3\13\1\0\1\13\1\0"+
    "\5\13\3\0\16\13\1\u0104\10\13\33\0\3\13\1\0"+
    "\1\13\1\0\5\13\3\0\2\13\1\u0105\24\13\24\0"+
    "\5\276\1\u0106\1\347\71\276\11\0\1\u0107\1\0\1\u0107"+
    "\1\0\1\u0107\1\0\3\u0107\3\0\1\u0107\1\0\2\u0107"+
    "\1\0\1\u0107\10\0\1\u0107\1\0\1\u0107\43\0\1\112"+
    "\1\106\1\107\1\0\1\u0108\2\0\2\u0108\5\0\1\107"+
    "\57\0\3\13\1\0\1\13\1\0\5\13\3\0\13\13"+
    "\1\u0109\13\13\33\0\3\13\1\0\1\13\1\0\5\13"+
    "\3\0\16\13\1\u010a\10\13\33\0\3\13\1\0\1\13"+
    "\1\0\5\13\3\0\7\13\1\u010b\17\13\33\0\3\13"+
    "\1\0\1\13\1\0\5\13\3\0\13\13\1\u010c\13\13"+
    "\33\0\3\13\1\0\1\13\1\0\5\13\3\0\5\13"+
    "\1\u010d\21\13\33\0\3\13\1\0\1\13\1\0\5\13"+
    "\3\0\10\13\1\u010e\16\13\33\0\3\13\1\0\1\13"+
    "\1\0\5\13\3\0\20\13\1\u010f\6\13\33\0\3\13"+
    "\1\0\1\13\1\0\5\13\3\0\13\13\1\u0110\13\13"+
    "\33\0\3\13\1\0\1\13\1\0\5\13\3\0\20\13"+
    "\1\u0111\6\13\33\0\3\13\1\0\1\13\1\0\5\13"+
    "\3\0\21\13\1\u0112\5\13\33\0\3\13\1\0\1\13"+
    "\1\0\5\13\3\0\7\13\1\u0113\17\13\33\0\3\13"+
    "\1\0\1\13\1\0\5\13\3\0\17\13\1\u0114\7\13"+
    "\33\0\3\13\1\0\1\13\1\0\5\13\3\0\2\13"+
    "\1\u0115\24\13\33\0\3\13\1\0\1\13\1\0\5\13"+
    "\3\0\11\13\1\u0116\15\13\33\0\3\13\1\0\1\13"+
    "\1\0\5\13\3\0\11\13\1\u0117\15\13\33\0\3\13"+
    "\1\0\1\13\1\0\5\13\3\0\14\13\1\u0118\12\13"+
    "\33\0\3\13\1\0\1\13\1\0\5\13\3\0\5\13"+
    "\1\u0119\21\13\33\0\3\13\1\0\1\13\1\0\5\13"+
    "\3\0\7\13\1\u011a\17\13\33\0\3\13\1\0\1\13"+
    "\1\0\5\13\3\0\17\13\1\u011b\7\13\33\0\3\13"+
    "\1\0\1\13\1\0\5\13\3\0\5\13\1\u011c\21\13"+
    "\35\0\1\u011d\1\0\1\u011d\1\0\1\u011d\1\0\3\u011d"+
    "\3\0\1\u011d\1\0\2\u011d\1\0\1\u011d\10\0\1\u011d"+
    "\1\0\1\u011d\43\0\1\112\1\106\1\107\1\0\1\u011e"+
    "\2\0\2\u011e\5\0\1\107\57\0\3\13\1\0\1\13"+
    "\1\0\5\13\3\0\6\13\1\u011f\20\13\33\0\3\13"+
    "\1\0\1\13\1\0\5\13\3\0\15\13\1\u0120\11\13"+
    "\33\0\3\13\1\0\1\13\1\0\5\13\3\0\5\13"+
    "\1\u0121\21\13\33\0\3\13\1\0\1\13\1\0\5\13"+
    "\3\0\3\13\1\u0122\23\13\33\0\3\13\1\0\1\13"+
    "\1\0\5\13\3\0\2\13\1\u0123\24\13\33\0\3\13"+
    "\1\0\1\13\1\0\5\13\3\0\2\13\1\u0124\24\13"+
    "\33\0\3\13\1\0\1\13\1\0\5\13\3\0\7\13"+
    "\1\u0125\17\13\33\0\3\13\1\0\1\13\1\0\5\13"+
    "\3\0\24\13\1\u0126\2\13\33\0\3\13\1\0\1\13"+
    "\1\0\5\13\3\0\12\13\1\u0127\14\13\33\0\3\13"+
    "\1\0\1\13\1\0\5\13\3\0\7\13\1\u0128\17\13"+
    "\33\0\3\13\1\0\1\13\1\0\5\13\3\0\2\13"+
    "\1\u0129\24\13\33\0\3\13\1\0\1\13\1\0\5\13"+
    "\3\0\2\13\1\u012a\24\13\35\0\1\u012b\1\0\1\u012b"+
    "\1\0\1\u012b\1\0\3\u012b\3\0\1\u012b\1\0\2\u012b"+
    "\1\0\1\u012b\10\0\1\u012b\1\0\1\u012b\43\0\1\112"+
    "\1\106\1\107\1\0\1\u012c\2\0\2\u012c\5\0\1\107"+
    "\57\0\3\13\1\0\1\13\1\0\5\13\3\0\2\13"+
    "\1\u012d\24\13\33\0\3\13\1\0\1\13\1\0\5\13"+
    "\3\0\2\13\1\u012e\24\13\33\0\3\13\1\0\1\13"+
    "\1\0\5\13\3\0\5\13\1\u012f\21\13\33\0\3\13"+
    "\1\0\1\13\1\0\5\13\3\0\13\13\1\u0130\13\13"+
    "\33\0\3\13\1\0\1\13\1\0\5\13\3\0\1\13"+
    "\1\u0131\25\13\33\0\3\13\1\0\1\13\1\0\5\13"+
    "\3\0\13\13\1\u0132\13\13\33\0\3\13\1\0\1\13"+
    "\1\0\5\13\3\0\2\13\1\u0133\24\13\35\0\1\u0134"+
    "\1\0\1\u0134\1\0\1\u0134\1\0\3\u0134\3\0\1\u0134"+
    "\1\0\2\u0134\1\0\1\u0134\10\0\1\u0134\1\0\1\u0134"+
    "\43\0\1\112\1\106\1\107\1\0\1\u0135\2\0\2\u0135"+
    "\5\0\1\107\57\0\3\13\1\0\1\13\1\0\5\13"+
    "\3\0\12\13\1\u0136\14\13\33\0\3\13\1\0\1\13"+
    "\1\0\5\13\3\0\2\13\1\u0137\24\13\33\0\3\13"+
    "\1\0\1\13\1\0\5\13\3\0\7\13\1\u0138\17\13"+
    "\33\0\3\13\1\0\1\13\1\0\5\13\3\0\16\13"+
    "\1\u0139\10\13\35\0\1\u013a\1\0\1\u013a\1\0\1\u013a"+
    "\1\0\3\u013a\3\0\1\u013a\1\0\2\u013a\1\0\1\u013a"+
    "\10\0\1\u013a\1\0\1\u013a\43\0\1\112\1\106\1\107"+
    "\1\0\1\u013b\2\0\2\u013b\5\0\1\107\57\0\3\13"+
    "\1\0\1\13\1\0\5\13\3\0\20\13\1\u013c\6\13"+
    "\33\0\3\13\1\0\1\13\1\0\5\13\3\0\6\13"+
    "\1\u013d\20\13\35\0\1\u013e\1\0\1\u013e\1\0\1\u013e"+
    "\1\0\3\u013e\3\0\1\u013e\1\0\2\u013e\1\0\1\u013e"+
    "\10\0\1\u013e\1\0\1\u013e\43\0\1\112\1\106\1\107"+
    "\1\0\1\u013f\2\0\2\u013f\5\0\1\107\61\0\1\u0140"+
    "\1\0\1\u0140\1\0\1\u0140\1\0\3\u0140\3\0\1\u0140"+
    "\1\0\2\u0140\1\0\1\u0140\10\0\1\u0140\1\0\1\u0140"+
    "\43\0\1\112\1\106\1\107\1\0\1\u0141\2\0\2\u0141"+
    "\5\0\1\107\61\0\1\u0142\1\0\1\u0142\1\0\1\u0142"+
    "\1\0\3\u0142\3\0\1\u0142\1\0\2\u0142\1\0\1\u0142"+
    "\10\0\1\u0142\1\0\1\u0142\43\0\1\112\1\106\1\107"+
    "\1\0\1\u0143\2\0\2\u0143\5\0\1\107\61\0\1\u0144"+
    "\1\0\1\u0144\1\0\1\u0144\1\0\3\u0144\3\0\1\u0144"+
    "\1\0\2\u0144\1\0\1\u0144\10\0\1\u0144\1\0\1\u0144"+
    "\43\0\1\112\1\106\1\107\1\0\1\u0145\2\0\2\u0145"+
    "\5\0\1\107\61\0\1\u0146\1\0\1\u0146\1\0\1\u0146"+
    "\1\0\3\u0146\3\0\1\u0146\1\0\2\u0146\1\0\1\u0146"+
    "\10\0\1\u0146\1\0\1\u0146\43\0\1\112\1\106\1\107"+
    "\1\0\1\u0147\2\0\2\u0147\5\0\1\107\61\0\1\u0148"+
    "\1\0\1\u0148\1\0\1\u0148\1\0\3\u0148\3\0\1\u0148"+
    "\1\0\2\u0148\1\0\1\u0148\10\0\1\u0148\1\0\1\u0148"+
    "\43\0\1\112\1\106\1\107\1\0\1\u0149\2\0\2\u0149"+
    "\5\0\1\107\61\0\1\u014a\1\0\1\u014a\1\0\1\u014a"+
    "\1\0\3\u014a\3\0\1\u014a\1\0\2\u014a\1\0\1\u014a"+
    "\10\0\1\u014a\1\0\1\u014a\43\0\1\112\1\106\1\107"+
    "\1\0\1\u014b\2\0\2\u014b\5\0\1\107\61\0\1\u014c"+
    "\1\0\1\u014c\1\0\1\u014c\1\0\3\u014c\3\0\1\u014c"+
    "\1\0\2\u014c\1\0\1\u014c\10\0\1\u014c\1\0\1\u014c"+
    "\43\0\1\112\1\106\1\107\1\0\1\u014d\2\0\2\u014d"+
    "\5\0\1\107\61\0\1\112\1\106\1\107\1\0\1\u014e"+
    "\2\0\2\u014e\5\0\1\107\61\0\1\112\1\106\1\107"+
    "\1\0\1\u014f\2\0\2\u014f\5\0\1\107\61\0\1\112"+
    "\1\106\1\107\1\0\1\u0150\2\0\2\u0150\5\0\1\107"+
    "\61\0\1\112\1\106\1\107\1\0\1\u0151\2\0\2\u0151"+
    "\5\0\1\107\50\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15808];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\2\11\7\1\2\11\17\1\10\11"+
    "\4\1\3\11\7\1\2\11\3\1\1\11\2\1\1\11"+
    "\3\1\1\0\2\11\1\1\1\0\2\11\2\1\1\0"+
    "\45\1\1\11\1\1\1\11\2\1\11\11\1\1\1\11"+
    "\4\1\1\11\2\0\1\1\1\0\53\1\4\11\5\0"+
    "\1\11\46\1\2\0\36\1\1\11\105\1\1\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[337];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  private StringBuilder string = new StringBuilder();
  
  private String originId;
  
  private ETokenType lastTokenType;
  
  
  /** Resets scanner. */    
  public void reset(java.io.Reader reader, String originId) {
    this.originId = originId;
    lastTokenType=null;
    yyreset(reader);
  }
  
  /**
   * {@inheritDoc}
   */
  public void close() throws java.io.IOException {
    yyclose();
  }
  
   /**
   * Wrapper to store last token.
   */
  public JavaScriptToken getNextToken() throws java.io.IOException {
  	JavaScriptToken token = yyGetNextToken();
  	lastTokenType=token.getType();
  	return token;
  }

  /** Factory method for tokens. */  
  private JavaScriptToken token (ETokenType type, int offset, int lineNumber, String text) {
	return new JavaScriptToken (type, offset, lineNumber, text, originId);
  }

  /** Factory method for tokens. */  
  private JavaScriptToken token (ETokenType type) {
	return token (type, yychar, yyline, yytext());
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  JavaScriptScanner(java.io.Reader in, String originId) {
  	this.originId = originId;
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  JavaScriptScanner(java.io.InputStream in, String originId) {
    this(new java.io.InputStreamReader(in), originId);
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2228) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public JavaScriptToken yyGetNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 18: 
          { return token(ETokenType.SEMICOLON);
          }
        case 109: break;
        case 17: 
          { return token(ETokenType.RBRACK);
          }
        case 110: break;
        case 104: 
          { return token(ETokenType.FUNCTION);
          }
        case 111: break;
        case 94: 
          { return token(ETokenType.IMPORT);
          }
        case 112: break;
        case 67: 
          { return token(ETokenType.EQEQEQ);
          }
        case 113: break;
        case 97: 
          { return token(ETokenType.EXTENDS);
          }
        case 114: break;
        case 30: 
          { return token(ETokenType.XOR);
          }
        case 115: break;
        case 66: 
          { return token(ETokenType.VAR);
          }
        case 116: break;
        case 5: 
          { return token(ETokenType.MULT);
          }
        case 117: break;
        case 42: 
          { return token(ETokenType.MINUSMINUS);
          }
        case 118: break;
        case 56: 
          { return token(ETokenType.OROR);
          }
        case 119: break;
        case 53: 
          { return token(ETokenType.ANDEQ);
          }
        case 120: break;
        case 60: 
          { return token(ETokenType.MODEQ);
          }
        case 121: break;
        case 106: 
          { return token(ETokenType.PROTECTED);
          }
        case 122: break;
        case 90: 
          { return token(ETokenType.EXPORT);
          }
        case 123: break;
        case 72: 
          { return token(ETokenType.ELSE);
          }
        case 124: break;
        case 35: 
          { yybegin(YYINITIAL);
                                   return token(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()+1, yyline, string.toString());
          }
        case 125: break;
        case 85: 
          { return token(ETokenType.THROW);
          }
        case 126: break;
        case 10: 
          { yybegin(DOUBLE_QUOTE_STRING); string.setLength(0); string.append(yytext());
          }
        case 127: break;
        case 57: 
          { return token(ETokenType.PLUSEQ);
          }
        case 128: break;
        case 3: 
          { yyline -= 1;
          }
        case 129: break;
        case 15: 
          { return token(ETokenType.RBRACE);
          }
        case 130: break;
        case 48: 
          { return token(ETokenType.GTEQ);
          }
        case 131: break;
        case 16: 
          { return token(ETokenType.LBRACK);
          }
        case 132: break;
        case 75: 
          { return token(ETokenType.BOOLEAN_LITERAL);
          }
        case 133: break;
        case 83: 
          { return token(ETokenType.CONST);
          }
        case 134: break;
        case 105: 
          { return token(ETokenType.INTERFACE);
          }
        case 135: break;
        case 100: 
          { return token(ETokenType.PRIVATE);
          }
        case 136: break;
        case 93: 
          { return token(ETokenType.TYPEOF);
          }
        case 137: break;
        case 82: 
          { return token(ETokenType.CLASS);
          }
        case 138: break;
        case 54: 
          { return token(ETokenType.ANDAND);
          }
        case 139: break;
        case 99: 
          { return token(ETokenType.FINALLY);
          }
        case 140: break;
        case 101: 
          { return token(ETokenType.PACKAGE);
          }
        case 141: break;
        case 58: 
          { return token(ETokenType.PLUSPLUS);
          }
        case 142: break;
        case 6: 
          { return token(ETokenType.IDENTIFIER);
          }
        case 143: break;
        case 89: 
          { return token(ETokenType.RETURN);
          }
        case 144: break;
        case 78: 
          { return token(ETokenType.WITH);
          }
        case 145: break;
        case 21: 
          { return token(ETokenType.GT);
          }
        case 146: break;
        case 1: 
          { return token(ETokenType.ILLEGAL_CHARACTER);
          }
        case 147: break;
        case 108: 
          { return token(ETokenType.IMPLEMENTS);
          }
        case 148: break;
        case 98: 
          { return token(ETokenType.DEFAULT);
          }
        case 149: break;
        case 102: 
          { return token(ETokenType.CONTINUE);
          }
        case 150: break;
        case 86: 
          { return token(ETokenType.YIELD);
          }
        case 151: break;
        case 20: 
          { return token(ETokenType.EQ);
          }
        case 152: break;
        case 14: 
          { return token(ETokenType.LBRACE);
          }
        case 153: break;
        case 65: 
          { return token(ETokenType.FOR);
          }
        case 154: break;
        case 76: 
          { return token(ETokenType.THIS);
          }
        case 155: break;
        case 46: 
          { return token(ETokenType.DO);
          }
        case 156: break;
        case 71: 
          { return token(ETokenType.TRADITIONAL_COMMENT);
          }
        case 157: break;
        case 91: 
          { return token(ETokenType.STATIC);
          }
        case 158: break;
        case 47: 
          { return token(ETokenType.EQEQ);
          }
        case 159: break;
        case 80: 
          { return token(ETokenType.BREAK);
          }
        case 160: break;
        case 43: 
          { return token(ETokenType.MINUSEQ);
          }
        case 161: break;
        case 70: 
          { return token(ETokenType.NOTEQEQ);
          }
        case 162: break;
        case 29: 
          { return token(ETokenType.PLUS);
          }
        case 163: break;
        case 22: 
          { return token(ETokenType.LT);
          }
        case 164: break;
        case 33: 
          { yybegin(YYINITIAL);
                                   return token(ETokenType.UNTERMINATED_CHARACTER_LITERAL, yychar-string.length()+1, yyline, string.toString());
          }
        case 165: break;
        case 64: 
          { return token(ETokenType.NEW);
          }
        case 166: break;
        case 7: 
          { return token(ETokenType.INTEGER_LITERAL);
          }
        case 167: break;
        case 96: 
          { return token(ETokenType.PUBLIC);
          }
        case 168: break;
        case 59: 
          { return token(ETokenType.XOREQ);
          }
        case 169: break;
        case 31: 
          { return token(ETokenType.MOD);
          }
        case 170: break;
        case 13: 
          { return token(ETokenType.RPAREN);
          }
        case 171: break;
        case 11: 
          { yybegin(SINGLE_QUOTE_STRING); string.setLength(0); string.append(yytext());
          }
        case 172: break;
        case 73: 
          { return token(ETokenType.ENUM);
          }
        case 173: break;
        case 40: 
          { return token(ETokenType.MULTEQ);
          }
        case 174: break;
        case 84: 
          { return token(ETokenType.SUPER);
          }
        case 175: break;
        case 44: 
          { return token(ETokenType.IN);
          }
        case 176: break;
        case 36: 
          { yybegin(YYINITIAL);
                                   return token(ETokenType.UNTERMINATED_REGEX_LITERAL, yychar-string.length()+1, yyline, string.toString());
          }
        case 177: break;
        case 9: 
          { return token(ETokenType.MINUS);
          }
        case 178: break;
        case 103: 
          { return token(ETokenType.DEBUGGER);
          }
        case 179: break;
        case 28: 
          { return token(ETokenType.OR);
          }
        case 180: break;
        case 107: 
          { return token(ETokenType.INSTANCEOF);
          }
        case 181: break;
        case 62: 
          { return token(ETokenType.TRY);
          }
        case 182: break;
        case 49: 
          { return token(ETokenType.RSHIFT);
          }
        case 183: break;
        case 34: 
          { yybegin(YYINITIAL); string.append(yytext());
                                   return token(ETokenType.STRING_LITERAL, yychar-string.length()+1, yyline, string.toString());
          }
        case 184: break;
        case 38: 
          { return token(ETokenType.END_OF_LINE_COMMENT);
          }
        case 185: break;
        case 26: 
          { return token(ETokenType.COLON);
          }
        case 186: break;
        case 8: 
          { return token(ETokenType.DOT);
          }
        case 187: break;
        case 39: 
          { if (   lastTokenType==ETokenType.IDENTIFIER 
  		    || lastTokenType==ETokenType.RPAREN
  		    || lastTokenType==ETokenType.RBRACK
  		    || lastTokenType==ETokenType.INTEGER_LITERAL
  		    || lastTokenType==ETokenType.FLOATING_POINT_LITERAL ) {
  				return token(ETokenType.DIVEQ); 
  		} else {
                yybegin(REGEX); string.setLength(0); string.append(yytext());
   		}
          }
        case 188: break;
        case 24: 
          { return token(ETokenType.COMP);
          }
        case 189: break;
        case 37: 
          { yybegin(YYINITIAL); string.append(yytext());
                                   return token(ETokenType.REGEX_LITERAL, yychar-string.length()+yytext().length(), yyline, string.toString());
          }
        case 190: break;
        case 12: 
          { return token(ETokenType.LPAREN);
          }
        case 191: break;
        case 27: 
          { return token(ETokenType.AND);
          }
        case 192: break;
        case 25: 
          { return token(ETokenType.QUESTION);
          }
        case 193: break;
        case 87: 
          { return token(ETokenType.WHILE);
          }
        case 194: break;
        case 69: 
          { return token(ETokenType.LSHIFTEQ);
          }
        case 195: break;
        case 55: 
          { return token(ETokenType.OREQ);
          }
        case 196: break;
        case 2: 
          { /* ignore */
          }
        case 197: break;
        case 45: 
          { return token(ETokenType.IF);
          }
        case 198: break;
        case 95: 
          { return token(ETokenType.DELETE);
          }
        case 199: break;
        case 23: 
          { return token(ETokenType.NOT);
          }
        case 200: break;
        case 81: 
          { return token(ETokenType.CATCH);
          }
        case 201: break;
        case 19: 
          { return token(ETokenType.COMMA);
          }
        case 202: break;
        case 92: 
          { return token(ETokenType.SWITCH);
          }
        case 203: break;
        case 4: 
          { if (   lastTokenType==ETokenType.IDENTIFIER 
  		    || lastTokenType==ETokenType.RPAREN
  		    || lastTokenType==ETokenType.RBRACK
  		    || lastTokenType==ETokenType.INTEGER_LITERAL
  		    || lastTokenType==ETokenType.FLOATING_POINT_LITERAL ) {
  			     return token(ETokenType.DIV);		
  		} else {
                 yybegin(REGEX); string.setLength(0); string.append(yytext());
   		}
          }
        case 204: break;
        case 32: 
          { string.append( yytext() );
          }
        case 205: break;
        case 79: 
          { return token(ETokenType.VOID);
          }
        case 206: break;
        case 74: 
          { return token(ETokenType.CASE);
          }
        case 207: break;
        case 51: 
          { return token(ETokenType.LSHIFT);
          }
        case 208: break;
        case 52: 
          { return token(ETokenType.NOTEQ);
          }
        case 209: break;
        case 77: 
          { return token(ETokenType.NULL_LITERAL);
          }
        case 210: break;
        case 61: 
          { /* ignore continuation */
          }
        case 211: break;
        case 68: 
          { return token(ETokenType.RSHIFTEQ);
          }
        case 212: break;
        case 41: 
          { return token(ETokenType.FLOATING_POINT_LITERAL);
          }
        case 213: break;
        case 88: 
          { return token(ETokenType.DOCUMENTATION_COMMENT);
          }
        case 214: break;
        case 63: 
          { return token(ETokenType.LET);
          }
        case 215: break;
        case 50: 
          { return token(ETokenType.LTEQ);
          }
        case 216: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case SINGLE_QUOTE_STRING: {
              yybegin(YYINITIAL);
                                   return token(ETokenType.UNTERMINATED_CHARACTER_LITERAL, yychar-string.length()+1, yyline, string.toString());
            }
            case 338: break;
            case REGEX: {
              yybegin(YYINITIAL);
                                   return token(ETokenType.UNTERMINATED_REGEX_LITERAL, yychar-string.length()+1, yyline, string.toString());
            }
            case 339: break;
            case DOUBLE_QUOTE_STRING: {
              yybegin(YYINITIAL);
                                   return token(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()+1, yyline, string.toString());
            }
            case 340: break;
            default:
              {
                return token(ETokenType.EOF);
              }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
