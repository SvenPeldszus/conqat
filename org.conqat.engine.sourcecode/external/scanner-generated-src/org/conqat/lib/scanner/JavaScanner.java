/* The following code was generated by JFlex 1.4.2 on {{TIMESTAMP}} */

package org.conqat.lib.scanner;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on {{TIMESTAMP}} from the specification file
 * <tt>/home/freakout/cqse/repositories/conqat/trunk/lib/org.conqat.lib.scanner/grammars/java.flex</tt>
 */
class JavaScanner implements ILenientScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\3\1\2\1\0\1\4\1\1\16\10\4\0\1\3\1\76"+
    "\1\27\1\0\1\7\1\106\1\102\1\30\1\63\1\64\1\6\1\104"+
    "\1\72\1\26\1\24\1\5\1\11\1\20\2\17\4\21\2\12\1\101"+
    "\1\71\1\75\1\73\1\74\1\100\1\56\1\16\1\22\1\16\1\23"+
    "\1\25\1\23\5\7\1\14\13\7\1\15\2\7\1\67\1\31\1\70"+
    "\1\105\1\13\1\0\1\32\1\33\1\37\1\51\1\40\1\54\1\57"+
    "\1\46\1\47\1\7\1\44\1\42\1\52\1\43\1\41\1\55\1\7"+
    "\1\36\1\34\1\35\1\50\1\60\1\61\1\53\1\45\1\62\1\65"+
    "\1\103\1\66\1\77\41\10\2\0\4\7\4\0\1\7\2\0\1\10"+
    "\7\0\1\7\4\0\1\7\5\0\27\7\1\0\37\7\1\0\u01ca\7"+
    "\4\0\14\7\16\0\5\7\7\0\1\7\1\0\1\7\21\0\160\10"+
    "\5\7\1\0\2\7\2\0\4\7\10\0\1\7\1\0\3\7\1\0"+
    "\1\7\1\0\24\7\1\0\123\7\1\0\213\7\1\0\5\10\2\0"+
    "\236\7\11\0\46\7\2\0\1\7\7\0\47\7\11\0\55\10\1\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\1\10\10\0\33\7\5\0"+
    "\3\7\15\0\4\10\7\0\1\7\4\0\13\10\5\0\53\7\37\10"+
    "\4\0\2\7\1\10\143\7\1\0\1\7\10\10\1\0\6\10\2\7"+
    "\2\10\1\0\4\10\2\7\12\10\3\7\2\0\1\7\17\0\1\10"+
    "\1\7\1\10\36\7\33\10\2\0\131\7\13\10\1\7\16\0\12\10"+
    "\41\7\11\10\2\7\4\0\1\7\5\0\26\7\4\10\1\7\11\10"+
    "\1\7\3\10\1\7\5\10\22\0\31\7\3\10\244\0\4\10\66\7"+
    "\3\10\1\7\22\10\1\7\7\10\12\7\2\10\2\0\12\10\1\0"+
    "\7\7\1\0\7\7\1\0\3\10\1\0\10\7\2\0\2\7\2\0"+
    "\26\7\1\0\7\7\1\0\1\7\3\0\4\7\2\0\1\10\1\7"+
    "\7\10\2\0\2\10\2\0\3\10\1\7\10\0\1\10\4\0\2\7"+
    "\1\0\3\7\2\10\2\0\12\10\4\7\7\0\1\7\5\0\3\10"+
    "\1\0\6\7\4\0\2\7\2\0\26\7\1\0\7\7\1\0\2\7"+
    "\1\0\2\7\1\0\2\7\2\0\1\10\1\0\5\10\4\0\2\10"+
    "\2\0\3\10\3\0\1\10\7\0\4\7\1\0\1\7\7\0\14\10"+
    "\3\7\1\10\13\0\3\10\1\0\11\7\1\0\3\7\1\0\26\7"+
    "\1\0\7\7\1\0\2\7\1\0\5\7\2\0\1\10\1\7\10\10"+
    "\1\0\3\10\1\0\3\10\2\0\1\7\17\0\2\7\2\10\2\0"+
    "\12\10\1\0\1\7\17\0\3\10\1\0\10\7\2\0\2\7\2\0"+
    "\26\7\1\0\7\7\1\0\2\7\1\0\5\7\2\0\1\10\1\7"+
    "\7\10\2\0\2\10\2\0\3\10\10\0\2\10\4\0\2\7\1\0"+
    "\3\7\2\10\2\0\12\10\1\0\1\7\20\0\1\10\1\7\1\0"+
    "\6\7\3\0\3\7\1\0\4\7\3\0\2\7\1\0\1\7\1\0"+
    "\2\7\3\0\2\7\3\0\3\7\3\0\14\7\4\0\5\10\3\0"+
    "\3\10\1\0\4\10\2\0\1\7\6\0\1\10\16\0\12\10\11\0"+
    "\1\7\7\0\3\10\1\0\10\7\1\0\3\7\1\0\27\7\1\0"+
    "\12\7\1\0\5\7\3\0\1\7\7\10\1\0\3\10\1\0\4\10"+
    "\7\0\2\10\1\0\2\7\6\0\2\7\2\10\2\0\12\10\22\0"+
    "\2\10\1\0\10\7\1\0\3\7\1\0\27\7\1\0\12\7\1\0"+
    "\5\7\2\0\1\10\1\7\7\10\1\0\3\10\1\0\4\10\7\0"+
    "\2\10\7\0\1\7\1\0\2\7\2\10\2\0\12\10\1\0\2\7"+
    "\17\0\2\10\1\0\10\7\1\0\3\7\1\0\51\7\2\0\1\7"+
    "\7\10\1\0\3\10\1\0\4\10\1\7\10\0\1\10\10\0\2\7"+
    "\2\10\2\0\12\10\12\0\6\7\2\0\2\10\1\0\22\7\3\0"+
    "\30\7\1\0\11\7\1\0\1\7\2\0\7\7\3\0\1\10\4\0"+
    "\6\10\1\0\1\10\1\0\10\10\22\0\2\10\15\0\60\7\1\10"+
    "\2\7\7\10\4\0\10\7\10\10\1\0\12\10\47\0\2\7\1\0"+
    "\1\7\2\0\2\7\1\0\1\7\2\0\1\7\6\0\4\7\1\0"+
    "\7\7\1\0\3\7\1\0\1\7\1\0\1\7\2\0\2\7\1\0"+
    "\4\7\1\10\2\7\6\10\1\0\2\10\1\7\2\0\5\7\1\0"+
    "\1\7\1\0\6\10\2\0\12\10\2\0\2\7\42\0\1\7\27\0"+
    "\2\10\6\0\12\10\13\0\1\10\1\0\1\10\1\0\1\10\4\0"+
    "\2\10\10\7\1\0\44\7\4\0\24\10\1\0\2\10\5\7\13\10"+
    "\1\0\44\10\11\0\1\10\71\0\53\7\24\10\1\7\12\10\6\0"+
    "\6\7\4\10\4\7\3\10\1\7\3\10\2\7\7\10\3\7\4\10"+
    "\15\7\14\10\1\7\17\10\2\0\46\7\12\0\53\7\1\0\1\7"+
    "\3\0\u0149\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7"+
    "\2\0\51\7\1\0\4\7\2\0\41\7\1\0\4\7\2\0\7\7"+
    "\1\0\1\7\1\0\4\7\2\0\17\7\1\0\71\7\1\0\4\7"+
    "\2\0\103\7\2\0\3\10\40\0\20\7\20\0\125\7\14\0\u026c\7"+
    "\2\0\21\7\1\0\32\7\5\0\113\7\3\0\3\7\17\0\15\7"+
    "\1\0\4\7\3\10\13\0\22\7\3\10\13\0\22\7\2\10\14\0"+
    "\15\7\1\0\3\7\1\0\2\10\14\0\64\7\40\10\3\0\1\7"+
    "\3\0\2\7\1\10\2\0\12\10\41\0\3\10\2\0\12\10\6\0"+
    "\130\7\10\0\51\7\1\10\1\7\5\0\106\7\12\0\35\7\3\0"+
    "\14\10\4\0\14\10\12\0\12\10\36\7\2\0\5\7\13\0\54\7"+
    "\4\0\21\10\7\7\2\10\6\0\12\10\46\0\27\7\5\10\4\0"+
    "\65\7\12\10\1\0\35\10\2\0\13\10\6\0\12\10\15\0\1\7"+
    "\130\0\5\10\57\7\21\10\7\7\4\0\12\10\21\0\11\10\14\0"+
    "\3\10\36\7\12\10\3\0\2\7\12\10\6\0\46\7\16\10\14\0"+
    "\44\7\24\10\10\0\12\10\3\0\3\7\12\10\44\7\122\0\3\10"+
    "\1\0\25\10\4\7\1\10\4\7\1\10\15\0\300\7\47\10\25\0"+
    "\4\10\u0116\7\2\0\6\7\2\0\46\7\2\0\6\7\2\0\10\7"+
    "\1\0\1\7\1\0\1\7\1\0\1\7\1\0\37\7\2\0\65\7"+
    "\1\0\7\7\1\0\1\7\3\0\3\7\1\0\7\7\3\0\4\7"+
    "\2\0\6\7\4\0\15\7\5\0\3\7\1\0\7\7\16\0\5\10"+
    "\32\0\5\10\20\0\2\7\23\0\1\7\13\0\5\10\5\0\6\10"+
    "\1\0\1\7\15\0\1\7\20\0\15\7\3\0\32\7\26\0\15\10"+
    "\4\0\1\10\3\0\14\10\21\0\1\7\4\0\1\7\2\0\12\7"+
    "\1\0\1\7\3\0\5\7\6\0\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\1\0\13\7\2\0\4\7\5\0\5\7\4\0\1\7"+
    "\21\0\51\7\u0a77\0\57\7\1\0\57\7\1\0\205\7\6\0\4\7"+
    "\3\10\16\0\46\7\12\0\66\7\11\0\1\7\17\0\1\10\27\7"+
    "\11\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7"+
    "\1\0\7\7\1\0\7\7\1\0\7\7\1\0\40\10\57\0\1\7"+
    "\u01d5\0\3\7\31\0\11\7\6\10\1\0\5\7\2\0\5\7\4\0"+
    "\126\7\2\0\2\10\2\0\3\7\1\0\132\7\1\0\4\7\5\0"+
    "\51\7\3\0\136\7\21\0\33\7\65\0\20\7\u0200\0\u19b6\7\112\0"+
    "\u51cc\7\64\0\u048d\7\103\0\56\7\2\0\u010d\7\3\0\20\7\12\10"+
    "\2\7\24\0\57\7\1\10\14\0\2\10\1\0\31\7\10\0\120\7"+
    "\2\10\45\0\11\7\2\0\147\7\2\0\4\7\1\0\2\7\16\0"+
    "\12\7\120\0\10\7\1\10\3\7\1\10\4\7\1\10\27\7\5\10"+
    "\20\0\1\7\7\0\64\7\14\0\2\10\62\7\21\10\13\0\12\10"+
    "\6\0\22\10\6\7\3\0\1\7\4\0\12\10\34\7\10\10\2\0"+
    "\27\7\15\10\14\0\35\7\3\0\4\10\57\7\16\10\16\0\1\7"+
    "\12\10\46\0\51\7\16\10\11\0\3\7\1\10\10\7\2\10\2\0"+
    "\12\10\6\0\27\7\3\0\1\7\1\10\4\0\60\7\1\10\1\7"+
    "\3\10\2\7\2\10\5\7\2\10\1\7\1\10\1\7\30\0\3\7"+
    "\43\0\6\7\2\0\6\7\2\0\6\7\11\0\7\7\1\0\7\7"+
    "\221\0\43\7\10\10\1\0\2\10\2\0\12\10\6\0\u2ba4\7\14\0"+
    "\27\7\4\0\61\7\u2104\0\u012e\7\2\0\76\7\2\0\152\7\46\0"+
    "\7\7\14\0\5\7\5\0\1\7\1\10\12\7\1\0\15\7\1\0"+
    "\5\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\154\7\41\0"+
    "\u016b\7\22\0\100\7\2\0\66\7\50\0\15\7\3\0\20\10\20\0"+
    "\7\10\14\0\2\7\30\0\3\7\31\0\1\7\6\0\5\7\1\0"+
    "\207\7\2\0\1\10\4\0\1\7\13\0\12\10\7\0\32\7\4\0"+
    "\1\7\1\0\32\7\13\0\131\7\3\0\6\7\2\0\6\7\2\0"+
    "\6\7\2\0\3\7\3\0\2\7\3\0\2\7\22\0\3\10\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\6\2\7"+
    "\1\10\1\11\1\12\1\13\15\6\1\14\3\6\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\2\42\1\43\1\1\1\41"+
    "\2\44\1\45\1\46\1\0\1\47\1\50\1\7\1\51"+
    "\2\7\1\0\2\7\1\0\2\51\1\0\1\51\1\0"+
    "\1\52\1\53\32\6\1\54\1\6\1\55\7\6\1\0"+
    "\3\6\1\56\1\57\1\0\1\60\1\0\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\2\41\1\73\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\2\46\2\0\6\7\1\51\1\0\1\103\14\6"+
    "\1\104\16\6\1\105\2\6\1\106\4\6\1\107\6\6"+
    "\1\0\4\6\1\110\1\0\1\111\1\41\2\0\1\112"+
    "\4\7\4\6\1\113\7\6\1\114\1\6\1\115\1\6"+
    "\1\116\4\6\1\117\1\120\1\121\1\6\1\122\1\6"+
    "\1\123\14\6\1\0\1\124\1\6\1\125\1\6\1\126"+
    "\1\0\4\7\2\6\1\127\4\6\1\130\1\131\2\6"+
    "\1\132\1\6\1\133\1\134\1\6\1\135\10\6\1\136"+
    "\1\137\4\6\1\0\1\6\1\140\1\141\4\7\1\6"+
    "\1\142\1\6\1\143\2\6\1\144\1\6\1\145\1\146"+
    "\2\6\1\147\2\6\1\150\2\6\1\151\4\6\1\152"+
    "\1\0\1\6\4\7\1\6\1\153\4\6\1\154\3\6"+
    "\1\155\1\156\1\157\1\6\1\160\1\0\1\6\4\7"+
    "\1\161\1\162\2\6\1\163\4\6\1\0\1\164\4\7"+
    "\1\6\1\165\1\6\1\166\1\6\1\167\1\0\4\7"+
    "\1\6\1\170\1\171\1\172\1\7\1\0\2\7\1\6"+
    "\1\7\1\0\2\7\1\173\1\7\1\0\3\7\1\0"+
    "\3\7\1\0\3\7\1\0\2\7\1\51\1\0\2\7"+
    "\1\51\1\0\1\7\1\51\1\7\1\51\1\7\1\51"+
    "\1\7\1\51\15\7\37\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[472];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\325\0\325\0\u0163"+
    "\0\u01aa\0\u01f1\0\u0238\0\u027f\0\u02c6\0\u030d\0\325\0\325"+
    "\0\u0354\0\u039b\0\u03e2\0\u0429\0\u0470\0\u04b7\0\u04fe\0\u0545"+
    "\0\u058c\0\u05d3\0\u061a\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d"+
    "\0\u07c4\0\325\0\325\0\325\0\325\0\325\0\325\0\325"+
    "\0\325\0\u080b\0\u0852\0\u0899\0\u08e0\0\325\0\325\0\325"+
    "\0\u0927\0\u096e\0\u09b5\0\u09fc\0\u0a43\0\u0a8a\0\u0ad1\0\325"+
    "\0\325\0\u0b18\0\u0b5f\0\u0ba6\0\325\0\325\0\u0bed\0\u0c34"+
    "\0\325\0\325\0\u0c7b\0\u0cc2\0\u0d09\0\325\0\u0d50\0\u0d97"+
    "\0\u0dde\0\u0e25\0\325\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41\0\325"+
    "\0\325\0\u0f88\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132"+
    "\0\u1179\0\u11c0\0\u1207\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a"+
    "\0\u13b1\0\u13f8\0\u143f\0\u1486\0\u14cd\0\u1514\0\u155b\0\u15a2"+
    "\0\u15e9\0\u1630\0\u1677\0\u01f1\0\u16be\0\u1705\0\u174c\0\u1793"+
    "\0\u17da\0\u1821\0\u1868\0\u18af\0\u18f6\0\u193d\0\u1984\0\u19cb"+
    "\0\u1a12\0\325\0\325\0\u1a59\0\325\0\u1aa0\0\325\0\325"+
    "\0\325\0\325\0\325\0\325\0\325\0\325\0\325\0\325"+
    "\0\u1ae7\0\u1b2e\0\325\0\325\0\325\0\325\0\325\0\325"+
    "\0\325\0\325\0\u1b75\0\325\0\u1bbc\0\u1c03\0\u1c4a\0\u1c91"+
    "\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad\0\u1df4\0\u1e3b\0\325\0\u1e82"+
    "\0\u1ec9\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5\0\u202c\0\u2073\0\u20ba"+
    "\0\u2101\0\u2148\0\u218f\0\u01f1\0\u21d6\0\u221d\0\u2264\0\u22ab"+
    "\0\u22f2\0\u2339\0\u2380\0\u23c7\0\u240e\0\u2455\0\u249c\0\u24e3"+
    "\0\u252a\0\u2571\0\u01f1\0\u25b8\0\u25ff\0\u2646\0\u268d\0\u26d4"+
    "\0\u271b\0\u2762\0\u01f1\0\u27a9\0\u27f0\0\u2837\0\u287e\0\u28c5"+
    "\0\u290c\0\u2953\0\u299a\0\u29e1\0\u2a28\0\u2a6f\0\325\0\u2ab6"+
    "\0\325\0\325\0\u2afd\0\u2b44\0\325\0\u2b8b\0\u2bd2\0\u2c19"+
    "\0\u2c60\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c\0\u01f1\0\u2dc3\0\u2e0a"+
    "\0\u2e51\0\u2e98\0\u2edf\0\u2f26\0\u2f6d\0\u01f1\0\u2fb4\0\u01f1"+
    "\0\u2ffb\0\u01f1\0\u3042\0\u3089\0\u30d0\0\u3117\0\u01f1\0\u01f1"+
    "\0\u01f1\0\u315e\0\u01f1\0\u31a5\0\u01f1\0\u31ec\0\u3233\0\u327a"+
    "\0\u32c1\0\u3308\0\u334f\0\u3396\0\u33dd\0\u3424\0\u346b\0\u34b2"+
    "\0\u34f9\0\u3540\0\u01f1\0\u3587\0\u01f1\0\u35ce\0\325\0\u3615"+
    "\0\u365c\0\u36a3\0\u36ea\0\u3731\0\u3778\0\u37bf\0\u01f1\0\u3806"+
    "\0\u384d\0\u3894\0\u38db\0\u01f1\0\u01f1\0\u3922\0\u3969\0\u39b0"+
    "\0\u39f7\0\u01f1\0\u01f1\0\u3a3e\0\u01f1\0\u3a85\0\u3acc\0\u3b13"+
    "\0\u3b5a\0\u3ba1\0\u3be8\0\u3c2f\0\u3c76\0\u01f1\0\u3cbd\0\u3d04"+
    "\0\u3d4b\0\u3d92\0\u3dd9\0\u3e20\0\u3e67\0\u01f1\0\325\0\u3eae"+
    "\0\u3ef5\0\u3f3c\0\u3f83\0\u3fca\0\u01f1\0\u4011\0\u01f1\0\u4058"+
    "\0\u409f\0\u01f1\0\u40e6\0\u01f1\0\u01f1\0\u412d\0\u4174\0\u01f1"+
    "\0\u41bb\0\u4202\0\u01f1\0\u4249\0\u4290\0\u01f1\0\u42d7\0\u431e"+
    "\0\u4365\0\u43ac\0\u01f1\0\u43f3\0\u443a\0\u4481\0\u44c8\0\u450f"+
    "\0\u4556\0\u459d\0\u01f1\0\u45e4\0\u462b\0\u4672\0\u46b9\0\u01f1"+
    "\0\u4700\0\u4747\0\u478e\0\u01f1\0\u01f1\0\u01f1\0\u47d5\0\u01f1"+
    "\0\u481c\0\u4863\0\u48aa\0\u48f1\0\u4938\0\u497f\0\u01f1\0\u01f1"+
    "\0\u49c6\0\u4a0d\0\u01f1\0\u4a54\0\u4a9b\0\u4ae2\0\u4b29\0\u4b70"+
    "\0\u01f1\0\u4bb7\0\u4bfe\0\u4c45\0\u4c8c\0\u4cd3\0\u01f1\0\u4d1a"+
    "\0\u01f1\0\u4d61\0\u01f1\0\u4da8\0\u4def\0\u4e36\0\u4e7d\0\u4ec4"+
    "\0\u4f0b\0\u01f1\0\u01f1\0\325\0\u4f52\0\u4f99\0\u4fe0\0\u5027"+
    "\0\u506e\0\u50b5\0\u50fc\0\u5143\0\u518a\0\u01f1\0\u51d1\0\u5218"+
    "\0\u525f\0\u52a6\0\u52ed\0\u5334\0\u537b\0\u53c2\0\u5409\0\u5450"+
    "\0\u5497\0\u54de\0\u5525\0\u556c\0\u55b3\0\u55fa\0\u5641\0\u5688"+
    "\0\u5641\0\u56cf\0\u5716\0\u575d\0\u57a4\0\u57eb\0\u5832\0\u5879"+
    "\0\u58c0\0\u5907\0\u594e\0\u5995\0\u59dc\0\u5a23\0\u5a6a\0\u5ab1"+
    "\0\u5af8\0\u5b3f\0\u5b86\0\u5bcd\0\u5c14\0\u5c5b\0\u5ca2\0\u5ce9"+
    "\0\u5d30\0\u5d77\0\u5dbe\0\u5e05\0\u5e4c\0\u5e93\0\u5eda\0\u5f21"+
    "\0\u5f68\0\u5faf\0\u5ff6\0\u603d\0\u6084\0\u60cb\0\u6112\0\u6159"+
    "\0\u61a0\0\u61e7\0\u622e\0\u6275\0\u62bc\0\u6303\0\u634a\0\u6391"+
    "\0\u63d8\0\u641f\0\u6466\0\u64ad\0\u64f4\0\u653b\0\u6582\0\u65c9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[472];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\12\1\4"+
    "\1\13\1\14\4\12\3\14\2\12\1\15\1\12\1\16"+
    "\1\17\1\20\1\4\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\12\1\30\1\31\3\12\1\32\1\12"+
    "\1\33\2\12\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\12\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\24\66\1\71\1\66\1\72\55\66\1\73\1\74\1\75"+
    "\25\73\1\76\1\72\55\73\111\0\1\6\111\0\1\77"+
    "\1\100\64\0\1\101\106\0\1\102\22\0\15\12\1\0"+
    "\1\12\4\0\24\12\1\0\4\12\35\0\1\103\1\104"+
    "\1\105\1\106\1\107\1\0\1\110\1\111\1\105\1\112"+
    "\1\113\1\114\1\115\5\0\1\112\4\0\1\115\1\0"+
    "\1\106\6\0\1\113\1\0\1\107\1\113\43\0\3\14"+
    "\1\106\2\0\3\14\1\0\1\113\1\114\1\115\12\0"+
    "\1\115\1\0\1\106\6\0\1\113\2\0\1\113\43\0"+
    "\2\116\4\0\3\116\2\0\1\117\110\0\1\120\44\0"+
    "\1\121\22\0\15\12\1\0\1\12\4\0\1\12\1\122"+
    "\1\123\21\12\1\0\4\12\33\0\15\12\1\0\1\12"+
    "\4\0\4\12\1\124\2\12\1\125\3\12\1\126\10\12"+
    "\1\0\4\12\33\0\15\12\1\0\1\12\4\0\3\12"+
    "\1\127\7\12\1\130\1\131\1\12\1\132\5\12\1\0"+
    "\2\12\1\133\1\12\33\0\15\12\1\0\1\12\4\0"+
    "\4\12\1\134\7\12\1\135\7\12\1\0\4\12\33\0"+
    "\15\12\1\0\1\12\4\0\6\12\1\136\15\12\1\0"+
    "\4\12\33\0\15\12\1\0\1\12\4\0\1\137\6\12"+
    "\1\140\1\141\3\12\1\142\7\12\1\0\4\12\33\0"+
    "\15\12\1\0\1\12\4\0\10\12\1\143\1\144\7\12"+
    "\1\145\2\12\1\0\4\12\33\0\15\12\1\0\1\12"+
    "\4\0\7\12\1\146\14\12\1\0\4\12\33\0\15\12"+
    "\1\0\1\12\4\0\1\147\5\12\1\150\7\12\1\151"+
    "\5\12\1\0\4\12\33\0\15\12\1\0\1\12\4\0"+
    "\11\12\1\152\6\12\1\153\1\12\1\154\1\12\1\0"+
    "\4\12\33\0\15\12\1\0\1\12\4\0\6\12\1\155"+
    "\1\156\14\12\1\0\4\12\33\0\15\12\1\0\1\12"+
    "\4\0\1\157\6\12\1\160\1\161\4\12\1\162\6\12"+
    "\1\0\4\12\33\0\15\12\1\0\1\12\4\0\1\163"+
    "\3\12\1\164\11\12\1\165\5\12\1\0\4\12\73\0"+
    "\1\166\46\0\15\12\1\0\1\12\4\0\7\12\1\167"+
    "\14\12\1\0\4\12\33\0\15\12\1\0\1\12\4\0"+
    "\7\12\1\170\14\12\1\0\4\12\33\0\15\12\1\0"+
    "\1\12\4\0\14\12\1\171\7\12\1\0\4\12\117\0"+
    "\1\172\106\0\1\173\1\174\105\0\1\175\1\0\1\176"+
    "\104\0\1\177\106\0\1\200\6\0\1\201\77\0\1\202"+
    "\7\0\1\203\76\0\1\204\10\0\1\205\75\0\1\206"+
    "\106\0\1\207\13\0\1\66\2\0\24\66\1\0\1\66"+
    "\1\0\55\66\2\0\1\70\104\0\2\210\1\0\6\210"+
    "\1\211\1\210\1\212\3\210\2\211\1\212\5\210\1\213"+
    "\1\214\1\215\1\210\1\216\1\210\1\217\1\220\4\210"+
    "\1\221\10\210\1\222\32\210\1\73\2\0\25\73\2\0"+
    "\55\73\2\0\1\75\104\0\1\77\1\223\1\224\104\77"+
    "\6\225\1\226\100\225\11\0\1\103\1\104\1\105\1\106"+
    "\2\0\1\110\1\111\1\105\1\0\1\113\1\114\1\115"+
    "\12\0\1\115\1\0\1\106\6\0\1\113\2\0\1\113"+
    "\43\0\3\104\3\0\3\104\1\0\1\113\1\114\1\115"+
    "\12\0\1\115\10\0\1\113\2\0\1\113\43\0\1\227"+
    "\1\104\1\227\1\106\2\0\3\227\1\0\1\113\1\114"+
    "\1\115\12\0\1\115\1\0\1\106\6\0\1\113\2\0"+
    "\1\113\43\0\1\230\2\231\2\0\6\231\1\0\1\231"+
    "\4\0\2\231\3\0\2\231\10\0\1\231\2\0\1\231"+
    "\43\0\1\232\1\104\1\232\1\106\2\0\3\232\1\0"+
    "\1\113\1\114\1\115\12\0\1\115\1\0\1\106\6\0"+
    "\1\113\2\0\1\113\43\0\1\105\1\104\1\105\1\106"+
    "\2\0\3\105\1\0\1\113\1\114\1\115\12\0\1\115"+
    "\1\0\1\106\6\0\1\113\2\0\1\113\43\0\1\233"+
    "\1\0\1\234\4\0\1\234\77\0\2\116\4\0\3\116"+
    "\1\0\1\113\1\0\1\115\12\0\1\115\10\0\1\113"+
    "\2\0\1\113\43\0\2\235\4\0\3\235\4\0\1\236"+
    "\55\0\1\236\13\0\3\116\3\0\3\116\1\0\1\113"+
    "\1\0\1\115\12\0\1\115\10\0\1\113\2\0\1\113"+
    "\56\0\1\237\71\0\15\12\1\0\1\12\4\0\2\12"+
    "\1\240\21\12\1\0\4\12\33\0\15\12\1\0\1\12"+
    "\4\0\2\12\1\241\21\12\1\0\4\12\33\0\15\12"+
    "\1\0\1\12\4\0\6\12\1\242\15\12\1\0\4\12"+
    "\33\0\15\12\1\0\1\12\4\0\7\12\1\243\14\12"+
    "\1\0\4\12\33\0\15\12\1\0\1\12\4\0\3\12"+
    "\1\244\20\12\1\0\4\12\33\0\15\12\1\0\1\12"+
    "\4\0\1\245\3\12\1\246\17\12\1\0\4\12\33\0"+
    "\15\12\1\0\1\12\4\0\11\12\1\247\12\12\1\0"+
    "\4\12\33\0\15\12\1\0\1\12\4\0\7\12\1\250"+
    "\14\12\1\0\4\12\33\0\15\12\1\0\1\12\4\0"+
    "\23\12\1\251\1\0\4\12\33\0\15\12\1\0\1\12"+
    "\4\0\15\12\1\252\6\12\1\0\4\12\33\0\15\12"+
    "\1\0\1\12\4\0\1\253\12\12\1\254\2\12\1\255"+
    "\5\12\1\0\4\12\33\0\15\12\1\0\1\12\4\0"+
    "\4\12\1\256\10\12\1\257\6\12\1\0\4\12\33\0"+
    "\15\12\1\0\1\12\4\0\3\12\1\260\20\12\1\0"+
    "\4\12\33\0\15\12\1\0\1\12\4\0\2\12\1\261"+
    "\1\262\20\12\1\0\4\12\33\0\15\12\1\0\1\12"+
    "\4\0\11\12\1\263\12\12\1\0\4\12\33\0\15\12"+
    "\1\0\1\12\4\0\1\264\23\12\1\0\4\12\33\0"+
    "\15\12\1\0\1\12\4\0\1\265\23\12\1\0\4\12"+
    "\33\0\15\12\1\0\1\12\4\0\2\12\1\266\21\12"+
    "\1\0\4\12\33\0\15\12\1\0\1\12\4\0\16\12"+
    "\1\267\5\12\1\0\4\12\33\0\15\12\1\0\1\12"+
    "\4\0\3\12\1\270\20\12\1\0\4\12\33\0\15\12"+
    "\1\0\1\12\4\0\11\12\1\271\12\12\1\0\4\12"+
    "\33\0\15\12\1\0\1\12\4\0\3\12\1\272\20\12"+
    "\1\0\4\12\33\0\15\12\1\0\1\12\4\0\24\12"+
    "\1\0\2\12\1\273\1\12\33\0\15\12\1\0\1\12"+
    "\4\0\10\12\1\274\13\12\1\0\4\12\33\0\15\12"+
    "\1\0\1\12\4\0\2\12\1\275\1\276\20\12\1\0"+
    "\4\12\33\0\15\12\1\0\1\12\4\0\23\12\1\277"+
    "\1\0\4\12\33\0\15\12\1\0\1\12\4\0\22\12"+
    "\1\300\1\12\1\0\4\12\33\0\15\12\1\0\1\12"+
    "\4\0\16\12\1\301\5\12\1\0\4\12\33\0\15\12"+
    "\1\0\1\12\4\0\10\12\1\302\13\12\1\0\4\12"+
    "\33\0\15\12\1\0\1\12\4\0\4\12\1\303\17\12"+
    "\1\0\4\12\33\0\15\12\1\0\1\12\4\0\7\12"+
    "\1\304\14\12\1\0\4\12\33\0\15\12\1\0\1\12"+
    "\4\0\11\12\1\305\12\12\1\0\4\12\33\0\15\12"+
    "\1\0\1\12\4\0\5\12\1\306\16\12\1\0\4\12"+
    "\33\0\15\12\1\0\1\12\4\0\7\12\1\307\5\12"+
    "\1\310\6\12\1\0\4\12\33\0\15\12\1\0\1\12"+
    "\4\0\1\12\1\311\22\12\1\0\4\12\67\0\1\312"+
    "\52\0\15\12\1\0\1\12\4\0\3\12\1\313\20\12"+
    "\1\0\4\12\33\0\15\12\1\0\1\12\4\0\10\12"+
    "\1\314\4\12\1\315\6\12\1\0\4\12\33\0\15\12"+
    "\1\0\1\12\4\0\15\12\1\316\6\12\1\0\4\12"+
    "\117\0\1\317\1\320\105\0\1\321\24\0\1\212\1\0"+
    "\1\212\3\0\3\212\76\0\1\322\1\0\1\322\3\0"+
    "\3\322\67\0\1\224\104\0\6\225\1\323\100\225\5\324"+
    "\1\325\1\226\100\324\11\0\1\326\1\104\1\326\1\106"+
    "\2\0\3\326\1\0\1\113\1\114\1\115\12\0\1\115"+
    "\1\0\1\106\6\0\1\113\2\0\1\113\43\0\1\230"+
    "\2\231\1\106\1\0\6\231\1\0\1\231\4\0\2\231"+
    "\3\0\2\231\1\0\1\106\6\0\1\231\2\0\1\231"+
    "\43\0\3\327\1\106\1\0\6\327\1\0\1\327\4\0"+
    "\2\327\3\0\2\327\1\0\1\106\6\0\1\327\2\0"+
    "\1\327\43\0\1\330\1\104\1\330\1\106\2\0\3\330"+
    "\1\0\1\113\1\114\1\115\12\0\1\115\1\0\1\106"+
    "\6\0\1\113\2\0\1\113\43\0\1\233\1\0\1\234"+
    "\1\106\3\0\1\234\21\0\1\106\55\0\1\331\1\0"+
    "\1\331\1\106\3\0\1\331\21\0\1\106\55\0\3\235"+
    "\3\0\3\235\1\0\1\113\25\0\1\113\2\0\1\113"+
    "\43\0\2\235\4\0\3\235\74\0\15\12\1\0\1\12"+
    "\4\0\3\12\1\332\20\12\1\0\4\12\33\0\15\12"+
    "\1\0\1\12\4\0\6\12\1\333\15\12\1\0\4\12"+
    "\33\0\15\12\1\0\1\12\4\0\1\334\23\12\1\0"+
    "\4\12\33\0\15\12\1\0\1\12\4\0\10\12\1\335"+
    "\13\12\1\0\4\12\33\0\15\12\1\0\1\12\4\0"+
    "\6\12\1\336\15\12\1\0\4\12\33\0\15\12\1\0"+
    "\1\12\4\0\3\12\1\337\20\12\1\0\4\12\33\0"+
    "\15\12\1\0\1\12\4\0\15\12\1\340\6\12\1\0"+
    "\4\12\33\0\15\12\1\0\1\12\4\0\5\12\1\341"+
    "\16\12\1\0\4\12\33\0\15\12\1\0\1\12\4\0"+
    "\4\12\1\342\17\12\1\0\4\12\33\0\15\12\1\0"+
    "\1\12\4\0\6\12\1\343\15\12\1\0\4\12\33\0"+
    "\15\12\1\0\1\12\4\0\3\12\1\344\20\12\1\0"+
    "\4\12\33\0\15\12\1\0\1\12\4\0\11\12\1\345"+
    "\12\12\1\0\4\12\33\0\15\12\1\0\1\12\4\0"+
    "\6\12\1\346\15\12\1\0\4\12\33\0\15\12\1\0"+
    "\1\12\4\0\7\12\1\347\14\12\1\0\4\12\33\0"+
    "\15\12\1\0\1\12\4\0\2\12\1\350\21\12\1\0"+
    "\4\12\33\0\15\12\1\0\1\12\4\0\16\12\1\351"+
    "\5\12\1\0\4\12\33\0\15\12\1\0\1\12\4\0"+
    "\6\12\1\352\15\12\1\0\4\12\33\0\15\12\1\0"+
    "\1\12\4\0\5\12\1\353\16\12\1\0\4\12\33\0"+
    "\15\12\1\0\1\12\4\0\2\12\1\354\1\355\20\12"+
    "\1\0\4\12\33\0\15\12\1\0\1\12\4\0\2\12"+
    "\1\356\21\12\1\0\4\12\33\0\15\12\1\0\1\12"+
    "\4\0\4\12\1\357\17\12\1\0\4\12\33\0\15\12"+
    "\1\0\1\12\4\0\6\12\1\360\15\12\1\0\4\12"+
    "\33\0\15\12\1\0\1\12\4\0\20\12\1\361\3\12"+
    "\1\0\4\12\33\0\15\12\1\0\1\12\4\0\6\12"+
    "\1\362\15\12\1\0\4\12\33\0\15\12\1\0\1\12"+
    "\4\0\24\12\1\0\1\363\3\12\33\0\15\12\1\0"+
    "\1\12\4\0\15\12\1\364\6\12\1\0\4\12\33\0"+
    "\15\12\1\0\1\12\4\0\10\12\1\365\13\12\1\0"+
    "\4\12\33\0\15\12\1\0\1\12\4\0\3\12\1\366"+
    "\20\12\1\0\4\12\33\0\15\12\1\0\1\12\4\0"+
    "\6\12\1\367\15\12\1\0\4\12\33\0\15\12\1\0"+
    "\1\12\4\0\7\12\1\370\1\371\13\12\1\0\4\12"+
    "\33\0\15\12\1\0\1\12\4\0\1\372\23\12\1\0"+
    "\4\12\33\0\15\12\1\0\1\12\4\0\1\12\1\373"+
    "\22\12\1\0\4\12\33\0\15\12\1\0\1\12\4\0"+
    "\2\12\1\255\21\12\1\0\4\12\33\0\15\12\1\0"+
    "\1\12\4\0\1\374\23\12\1\0\4\12\33\0\15\12"+
    "\1\0\1\12\4\0\1\375\23\12\1\0\4\12\33\0"+
    "\15\12\1\0\1\12\4\0\12\12\1\376\11\12\1\0"+
    "\4\12\33\0\15\12\1\0\1\12\4\0\3\12\1\377"+
    "\20\12\1\0\4\12\33\0\15\12\1\0\1\12\4\0"+
    "\24\12\1\0\1\12\1\u0100\2\12\33\0\15\12\1\0"+
    "\1\12\4\0\10\12\1\u0101\13\12\1\0\4\12\61\0"+
    "\1\u0102\60\0\15\12\1\0\1\12\4\0\7\12\1\u0103"+
    "\14\12\1\0\4\12\33\0\15\12\1\0\1\12\4\0"+
    "\1\u0104\23\12\1\0\4\12\33\0\15\12\1\0\1\12"+
    "\4\0\17\12\1\u0105\4\12\1\0\4\12\33\0\15\12"+
    "\1\0\1\12\4\0\10\12\1\u0106\13\12\1\0\4\12"+
    "\117\0\1\u0107\13\0\5\225\1\325\1\323\100\225\6\324"+
    "\1\u0108\100\324\11\0\1\u0109\1\104\1\u0109\1\106\2\0"+
    "\3\u0109\1\0\1\113\1\114\1\115\12\0\1\115\1\0"+
    "\1\106\6\0\1\113\2\0\1\113\43\0\3\u010a\1\106"+
    "\1\0\6\u010a\1\0\1\u010a\4\0\2\u010a\3\0\2\u010a"+
    "\1\0\1\106\6\0\1\u010a\2\0\1\u010a\43\0\1\u010b"+
    "\1\104\1\u010b\1\106\2\0\3\u010b\1\0\1\113\1\114"+
    "\1\115\12\0\1\115\1\0\1\106\6\0\1\113\2\0"+
    "\1\113\43\0\1\u010c\1\0\1\u010c\1\106\3\0\1\u010c"+
    "\21\0\1\106\53\0\15\12\1\0\1\12\4\0\4\12"+
    "\1\u010d\17\12\1\0\4\12\33\0\15\12\1\0\1\12"+
    "\4\0\4\12\1\u010e\17\12\1\0\4\12\33\0\15\12"+
    "\1\0\1\12\4\0\12\12\1\u010f\11\12\1\0\4\12"+
    "\33\0\15\12\1\0\1\12\4\0\6\12\1\u0110\15\12"+
    "\1\0\4\12\33\0\15\12\1\0\1\12\4\0\15\12"+
    "\1\u0111\6\12\1\0\4\12\33\0\15\12\1\0\1\12"+
    "\4\0\5\12\1\u0112\16\12\1\0\4\12\33\0\15\12"+
    "\1\0\1\12\4\0\14\12\1\u0113\7\12\1\0\4\12"+
    "\33\0\15\12\1\0\1\12\4\0\3\12\1\u0114\20\12"+
    "\1\0\4\12\33\0\15\12\1\0\1\12\4\0\4\12"+
    "\1\u0115\17\12\1\0\4\12\33\0\15\12\1\0\1\12"+
    "\4\0\5\12\1\u0116\16\12\1\0\4\12\33\0\15\12"+
    "\1\0\1\12\4\0\2\12\1\u0117\21\12\1\0\4\12"+
    "\33\0\15\12\1\0\1\12\4\0\24\12\1\0\2\12"+
    "\1\u0118\1\12\33\0\15\12\1\0\1\12\4\0\4\12"+
    "\1\u0119\17\12\1\0\4\12\33\0\15\12\1\0\1\12"+
    "\4\0\14\12\1\u011a\7\12\1\0\4\12\33\0\15\12"+
    "\1\0\1\12\4\0\3\12\1\u011b\20\12\1\0\4\12"+
    "\33\0\15\12\1\0\1\12\4\0\15\12\1\u011c\6\12"+
    "\1\0\4\12\33\0\15\12\1\0\1\12\4\0\2\12"+
    "\1\u011d\21\12\1\0\4\12\33\0\15\12\1\0\1\12"+
    "\4\0\11\12\1\u011e\12\12\1\0\4\12\33\0\15\12"+
    "\1\0\1\12\4\0\24\12\1\0\1\12\1\u011f\2\12"+
    "\33\0\15\12\1\0\1\12\4\0\1\u0120\23\12\1\0"+
    "\4\12\33\0\15\12\1\0\1\12\4\0\4\12\1\u0121"+
    "\17\12\1\0\4\12\33\0\15\12\1\0\1\12\4\0"+
    "\4\12\1\u0122\17\12\1\0\4\12\33\0\15\12\1\0"+
    "\1\12\4\0\6\12\1\u0123\15\12\1\0\4\12\33\0"+
    "\15\12\1\0\1\12\4\0\16\12\1\u0124\5\12\1\0"+
    "\4\12\33\0\15\12\1\0\1\12\4\0\10\12\1\u0125"+
    "\13\12\1\0\4\12\33\0\15\12\1\0\1\12\4\0"+
    "\3\12\1\u0126\20\12\1\0\4\12\33\0\15\12\1\0"+
    "\1\12\4\0\10\12\1\u0127\13\12\1\0\4\12\33\0"+
    "\15\12\1\0\1\12\4\0\1\u0128\23\12\1\0\4\12"+
    "\33\0\15\12\1\0\1\12\4\0\6\12\1\u0129\15\12"+
    "\1\0\4\12\33\0\15\12\1\0\1\12\4\0\1\u012a"+
    "\23\12\1\0\4\12\33\0\15\12\1\0\1\12\4\0"+
    "\15\12\1\u012b\6\12\1\0\4\12\64\0\1\u012c\55\0"+
    "\15\12\1\0\1\12\4\0\3\12\1\u012d\20\12\1\0"+
    "\4\12\33\0\15\12\1\0\1\12\4\0\6\12\1\u012e"+
    "\15\12\1\0\4\12\24\0\5\324\1\u012f\1\u0108\100\324"+
    "\11\0\1\u0130\1\104\1\u0130\1\106\2\0\3\u0130\1\0"+
    "\1\113\1\114\1\115\12\0\1\115\1\0\1\106\6\0"+
    "\1\113\2\0\1\113\43\0\3\u0131\1\106\1\0\6\u0131"+
    "\1\0\1\u0131\4\0\2\u0131\3\0\2\u0131\1\0\1\106"+
    "\6\0\1\u0131\2\0\1\u0131\43\0\1\u0132\1\104\1\u0132"+
    "\1\106\2\0\3\u0132\1\0\1\113\1\114\1\115\12\0"+
    "\1\115\1\0\1\106\6\0\1\113\2\0\1\113\43\0"+
    "\1\u0133\1\0\1\u0133\1\106\3\0\1\u0133\21\0\1\106"+
    "\53\0\15\12\1\0\1\12\4\0\1\u0134\23\12\1\0"+
    "\4\12\33\0\15\12\1\0\1\12\4\0\3\12\1\u0135"+
    "\20\12\1\0\4\12\33\0\15\12\1\0\1\12\4\0"+
    "\1\u0136\23\12\1\0\4\12\33\0\15\12\1\0\1\12"+
    "\4\0\5\12\1\u0137\16\12\1\0\4\12\33\0\15\12"+
    "\1\0\1\12\4\0\3\12\1\u0138\20\12\1\0\4\12"+
    "\33\0\15\12\1\0\1\12\4\0\4\12\1\u0139\17\12"+
    "\1\0\4\12\33\0\15\12\1\0\1\12\4\0\14\12"+
    "\1\u013a\7\12\1\0\4\12\33\0\15\12\1\0\1\12"+
    "\4\0\15\12\1\u013b\6\12\1\0\4\12\33\0\15\12"+
    "\1\0\1\12\4\0\2\12\1\u013c\21\12\1\0\4\12"+
    "\33\0\15\12\1\0\1\12\4\0\11\12\1\u013d\12\12"+
    "\1\0\4\12\33\0\15\12\1\0\1\12\4\0\11\12"+
    "\1\u013e\12\12\1\0\4\12\33\0\15\12\1\0\1\12"+
    "\4\0\17\12\1\u013f\4\12\1\0\4\12\33\0\15\12"+
    "\1\0\1\12\4\0\6\12\1\u0140\15\12\1\0\4\12"+
    "\33\0\15\12\1\0\1\12\4\0\11\12\1\u0141\12\12"+
    "\1\0\4\12\33\0\15\12\1\0\1\12\4\0\22\12"+
    "\1\u0142\1\12\1\0\4\12\33\0\15\12\1\0\1\12"+
    "\4\0\3\12\1\u0143\20\12\1\0\4\12\33\0\15\12"+
    "\1\0\1\12\4\0\20\12\1\u0144\3\12\1\0\4\12"+
    "\33\0\15\12\1\0\1\12\4\0\10\12\1\u0145\13\12"+
    "\1\0\4\12\33\0\15\12\1\0\1\12\4\0\6\12"+
    "\1\u0146\15\12\1\0\4\12\33\0\15\12\1\0\1\12"+
    "\4\0\10\12\1\u0147\13\12\1\0\4\12\33\0\15\12"+
    "\1\0\1\12\4\0\24\12\1\0\1\u0148\3\12\33\0"+
    "\15\12\1\0\1\12\4\0\5\12\1\u0149\16\12\1\0"+
    "\4\12\33\0\15\12\1\0\1\12\4\0\3\12\1\u014a"+
    "\20\12\1\0\4\12\33\0\15\12\1\0\1\12\4\0"+
    "\5\12\1\u014b\16\12\1\0\4\12\62\0\1\u014c\57\0"+
    "\15\12\1\0\1\12\4\0\15\12\1\u014d\6\12\1\0"+
    "\4\12\35\0\1\u014e\1\104\1\u014e\1\106\2\0\3\u014e"+
    "\1\0\1\113\1\114\1\115\12\0\1\115\1\0\1\106"+
    "\6\0\1\113\2\0\1\113\43\0\3\u014f\1\106\1\0"+
    "\6\u014f\1\0\1\u014f\4\0\2\u014f\3\0\2\u014f\1\0"+
    "\1\106\6\0\1\u014f\2\0\1\u014f\43\0\1\u0150\1\104"+
    "\1\u0150\1\106\2\0\3\u0150\1\0\1\113\1\114\1\115"+
    "\12\0\1\115\1\0\1\106\6\0\1\113\2\0\1\113"+
    "\43\0\1\u0151\1\0\1\u0151\1\106\3\0\1\u0151\21\0"+
    "\1\106\53\0\15\12\1\0\1\12\4\0\5\12\1\u0152"+
    "\16\12\1\0\4\12\33\0\15\12\1\0\1\12\4\0"+
    "\11\12\1\u0153\12\12\1\0\4\12\33\0\15\12\1\0"+
    "\1\12\4\0\22\12\1\u0154\1\12\1\0\4\12\33\0"+
    "\15\12\1\0\1\12\4\0\7\12\1\u0155\14\12\1\0"+
    "\4\12\33\0\15\12\1\0\1\12\4\0\6\12\1\u0156"+
    "\15\12\1\0\4\12\33\0\15\12\1\0\1\12\4\0"+
    "\16\12\1\u0157\5\12\1\0\4\12\33\0\15\12\1\0"+
    "\1\12\4\0\2\12\1\u0158\21\12\1\0\4\12\33\0"+
    "\15\12\1\0\1\12\4\0\5\12\1\u0159\16\12\1\0"+
    "\4\12\33\0\15\12\1\0\1\12\4\0\1\u015a\23\12"+
    "\1\0\4\12\33\0\15\12\1\0\1\12\4\0\6\12"+
    "\1\u015b\15\12\1\0\4\12\33\0\15\12\1\0\1\12"+
    "\4\0\3\12\1\u015c\20\12\1\0\4\12\33\0\15\12"+
    "\1\0\1\12\4\0\13\12\1\u015d\10\12\1\0\4\12"+
    "\33\0\15\12\1\0\1\12\4\0\6\12\1\u015e\15\12"+
    "\1\0\4\12\33\0\15\12\1\0\1\12\4\0\3\12"+
    "\1\u015f\20\12\1\0\4\12\33\0\15\12\1\0\1\12"+
    "\4\0\6\12\1\u0160\15\12\1\0\4\12\100\0\1\u0161"+
    "\41\0\15\12\1\0\1\12\4\0\10\12\1\u0162\13\12"+
    "\1\0\4\12\35\0\1\u0163\1\104\1\u0163\1\106\2\0"+
    "\3\u0163\1\0\1\113\1\114\1\115\12\0\1\115\1\0"+
    "\1\106\6\0\1\113\2\0\1\113\43\0\3\u0164\1\106"+
    "\1\0\6\u0164\1\0\1\u0164\4\0\2\u0164\3\0\2\u0164"+
    "\1\0\1\106\6\0\1\u0164\2\0\1\u0164\43\0\1\u0165"+
    "\1\104\1\u0165\1\106\2\0\3\u0165\1\0\1\113\1\114"+
    "\1\115\12\0\1\115\1\0\1\106\6\0\1\113\2\0"+
    "\1\113\43\0\1\u0166\1\0\1\u0166\1\106\3\0\1\u0166"+
    "\21\0\1\106\53\0\15\12\1\0\1\12\4\0\3\12"+
    "\1\u0167\20\12\1\0\4\12\33\0\15\12\1\0\1\12"+
    "\4\0\23\12\1\u0168\1\0\4\12\33\0\15\12\1\0"+
    "\1\12\4\0\11\12\1\u0169\12\12\1\0\4\12\33\0"+
    "\15\12\1\0\1\12\4\0\11\12\1\u016a\12\12\1\0"+
    "\4\12\33\0\15\12\1\0\1\12\4\0\6\12\1\u016b"+
    "\15\12\1\0\4\12\33\0\15\12\1\0\1\12\4\0"+
    "\6\12\1\u016c\15\12\1\0\4\12\33\0\15\12\1\0"+
    "\1\12\4\0\5\12\1\u016d\16\12\1\0\4\12\33\0"+
    "\15\12\1\0\1\12\4\0\11\12\1\u016e\12\12\1\0"+
    "\4\12\33\0\15\12\1\0\1\12\4\0\6\12\1\u016f"+
    "\15\12\1\0\4\12\56\0\1\u0170\63\0\15\12\1\0"+
    "\1\12\4\0\6\12\1\u0171\15\12\1\0\4\12\35\0"+
    "\1\u0172\1\104\1\u0172\1\106\2\0\3\u0172\1\0\1\113"+
    "\1\114\1\115\12\0\1\115\1\0\1\106\6\0\1\113"+
    "\2\0\1\113\43\0\3\u0173\1\106\1\0\6\u0173\1\0"+
    "\1\u0173\4\0\2\u0173\3\0\2\u0173\1\0\1\106\6\0"+
    "\1\u0173\2\0\1\u0173\43\0\1\u0174\1\104\1\u0174\1\106"+
    "\2\0\3\u0174\1\0\1\113\1\114\1\115\12\0\1\115"+
    "\1\0\1\106\6\0\1\113\2\0\1\113\43\0\1\u0175"+
    "\1\0\1\u0175\1\106\3\0\1\u0175\21\0\1\106\53\0"+
    "\15\12\1\0\1\12\4\0\15\12\1\u0176\6\12\1\0"+
    "\4\12\33\0\15\12\1\0\1\12\4\0\3\12\1\u0177"+
    "\20\12\1\0\4\12\33\0\15\12\1\0\1\12\4\0"+
    "\7\12\1\u0178\14\12\1\0\4\12\33\0\15\12\1\0"+
    "\1\12\4\0\6\12\1\u0179\15\12\1\0\4\12\33\0"+
    "\15\12\1\0\1\12\4\0\3\12\1\u017a\20\12\1\0"+
    "\4\12\33\0\15\12\1\0\1\12\4\0\17\12\1\u017b"+
    "\4\12\1\0\4\12\63\0\1\u017c\60\0\1\u017d\1\104"+
    "\1\u017d\1\106\2\0\3\u017d\1\0\1\113\1\114\1\115"+
    "\12\0\1\115\1\0\1\106\6\0\1\113\2\0\1\113"+
    "\43\0\3\u017e\1\106\1\0\6\u017e\1\0\1\u017e\4\0"+
    "\2\u017e\3\0\2\u017e\1\0\1\106\6\0\1\u017e\2\0"+
    "\1\u017e\43\0\1\u017f\1\104\1\u017f\1\106\2\0\3\u017f"+
    "\1\0\1\113\1\114\1\115\12\0\1\115\1\0\1\106"+
    "\6\0\1\113\2\0\1\113\43\0\1\u0180\1\0\1\u0180"+
    "\1\106\3\0\1\u0180\21\0\1\106\53\0\15\12\1\0"+
    "\1\12\4\0\24\12\1\0\3\12\1\u0181\33\0\15\12"+
    "\1\0\1\12\4\0\22\12\1\u0182\1\12\1\0\4\12"+
    "\33\0\15\12\1\0\1\12\4\0\2\12\1\u0183\21\12"+
    "\1\0\4\12\64\0\1\u0184\57\0\1\u0185\1\104\1\u0185"+
    "\1\106\2\0\3\u0185\1\0\1\113\1\114\1\115\12\0"+
    "\1\115\1\0\1\106\6\0\1\113\2\0\1\113\43\0"+
    "\3\u0186\1\106\1\0\6\u0186\1\0\1\u0186\4\0\2\u0186"+
    "\3\0\2\u0186\1\0\1\106\6\0\1\u0186\2\0\1\u0186"+
    "\43\0\1\u0187\1\104\1\u0187\1\106\2\0\3\u0187\1\0"+
    "\1\113\1\114\1\115\12\0\1\115\1\0\1\106\6\0"+
    "\1\113\2\0\1\113\43\0\1\u0188\1\0\1\u0188\1\106"+
    "\3\0\1\u0188\21\0\1\106\53\0\15\12\1\0\1\12"+
    "\4\0\6\12\1\u0189\15\12\1\0\4\12\35\0\1\u018a"+
    "\1\104\1\u018a\1\106\2\0\3\u018a\1\0\1\113\1\114"+
    "\1\115\12\0\1\115\1\0\1\106\6\0\1\113\2\0"+
    "\1\113\43\0\3\u018b\1\106\1\0\6\u018b\1\0\1\u018b"+
    "\4\0\2\u018b\3\0\2\u018b\1\0\1\106\6\0\1\u018b"+
    "\2\0\1\u018b\43\0\1\u018c\1\104\1\u018c\1\106\2\0"+
    "\3\u018c\1\0\1\113\1\114\1\115\12\0\1\115\1\0"+
    "\1\106\6\0\1\113\2\0\1\113\43\0\1\u018d\1\0"+
    "\1\u018d\1\106\3\0\1\u018d\21\0\1\106\53\0\15\12"+
    "\1\0\1\12\4\0\17\12\1\u018e\4\12\1\0\4\12"+
    "\35\0\1\u018f\1\104\1\u018f\1\106\2\0\3\u018f\1\0"+
    "\1\113\1\114\1\115\12\0\1\115\1\0\1\106\6\0"+
    "\1\113\2\0\1\113\43\0\3\u0190\1\106\1\0\6\u0190"+
    "\1\0\1\u0190\4\0\2\u0190\3\0\2\u0190\1\0\1\106"+
    "\6\0\1\u0190\2\0\1\u0190\43\0\1\u0191\1\104\1\u0191"+
    "\1\106\2\0\3\u0191\1\0\1\113\1\114\1\115\12\0"+
    "\1\115\1\0\1\106\6\0\1\113\2\0\1\113\43\0"+
    "\1\u0192\1\0\1\u0192\1\106\3\0\1\u0192\21\0\1\106"+
    "\55\0\1\u0193\1\104\1\u0193\1\106\2\0\3\u0193\1\0"+
    "\1\113\1\114\1\115\12\0\1\115\1\0\1\106\6\0"+
    "\1\113\2\0\1\113\43\0\3\u0194\1\106\1\0\6\u0194"+
    "\1\0\1\u0194\4\0\2\u0194\3\0\2\u0194\1\0\1\106"+
    "\6\0\1\u0194\2\0\1\u0194\43\0\1\u0195\1\104\1\u0195"+
    "\1\106\2\0\3\u0195\1\0\1\113\1\114\1\115\12\0"+
    "\1\115\1\0\1\106\6\0\1\113\2\0\1\113\43\0"+
    "\1\u0196\1\0\1\u0196\1\106\3\0\1\u0196\21\0\1\106"+
    "\55\0\1\u0197\1\104\1\u0197\1\106\2\0\3\u0197\1\0"+
    "\1\113\1\114\1\115\12\0\1\115\1\0\1\106\6\0"+
    "\1\113\2\0\1\113\43\0\3\u0198\1\106\1\0\6\u0198"+
    "\1\0\1\u0198\4\0\2\u0198\3\0\2\u0198\1\0\1\106"+
    "\6\0\1\u0198\2\0\1\u0198\43\0\1\u0199\1\104\1\u0199"+
    "\1\106\2\0\3\u0199\1\0\1\113\1\114\1\115\12\0"+
    "\1\115\1\0\1\106\6\0\1\113\2\0\1\113\43\0"+
    "\1\u019a\1\0\1\u019a\1\106\3\0\1\u019a\21\0\1\106"+
    "\55\0\1\u019b\1\104\1\u019b\1\106\2\0\3\u019b\1\0"+
    "\1\113\1\114\1\115\12\0\1\115\1\0\1\106\6\0"+
    "\1\113\2\0\1\113\43\0\3\u019c\1\106\1\0\6\u019c"+
    "\1\0\1\u019c\4\0\2\u019c\3\0\2\u019c\1\0\1\106"+
    "\6\0\1\u019c\2\0\1\u019c\43\0\1\u019d\1\104\1\u019d"+
    "\1\106\2\0\3\u019d\1\0\1\113\1\114\1\115\12\0"+
    "\1\115\1\0\1\106\6\0\1\113\2\0\1\113\43\0"+
    "\1\u019e\1\0\1\u019e\1\106\3\0\1\u019e\21\0\1\106"+
    "\55\0\1\u019f\1\104\1\u019f\1\106\2\0\3\u019f\1\0"+
    "\1\113\1\114\1\115\12\0\1\115\1\0\1\106\6\0"+
    "\1\113\2\0\1\113\43\0\3\u01a0\1\106\1\0\6\u01a0"+
    "\1\0\1\u01a0\4\0\2\u01a0\3\0\2\u01a0\1\0\1\106"+
    "\6\0\1\u01a0\2\0\1\u01a0\43\0\1\u01a1\1\104\1\u01a1"+
    "\1\106\2\0\3\u01a1\1\0\1\113\1\114\1\115\12\0"+
    "\1\115\1\0\1\106\6\0\1\113\2\0\1\113\43\0"+
    "\1\u01a2\1\0\1\u01a2\1\106\3\0\1\u01a2\21\0\1\106"+
    "\55\0\1\u01a3\1\104\1\u01a3\1\106\2\0\3\u01a3\1\0"+
    "\1\113\1\114\1\115\12\0\1\115\1\0\1\106\6\0"+
    "\1\113\2\0\1\113\43\0\3\u01a4\1\106\1\0\6\u01a4"+
    "\1\0\1\u01a4\4\0\2\u01a4\3\0\2\u01a4\1\0\1\106"+
    "\6\0\1\u01a4\2\0\1\u01a4\43\0\1\u01a5\1\0\1\u01a5"+
    "\1\106\3\0\1\u01a5\21\0\1\106\55\0\1\u01a6\1\104"+
    "\1\u01a6\1\106\2\0\3\u01a6\1\0\1\113\1\114\1\115"+
    "\12\0\1\115\1\0\1\106\6\0\1\113\2\0\1\113"+
    "\46\0\1\106\25\0\1\106\55\0\1\u01a7\1\0\1\u01a7"+
    "\1\106\3\0\1\u01a7\21\0\1\106\55\0\1\u01a8\1\104"+
    "\1\u01a8\1\106\2\0\3\u01a8\1\0\1\113\1\114\1\115"+
    "\12\0\1\115\1\0\1\106\6\0\1\113\2\0\1\113"+
    "\43\0\1\u01a9\1\0\1\u01a9\1\106\3\0\1\u01a9\21\0"+
    "\1\106\55\0\1\u01aa\1\104\1\u01aa\1\106\2\0\3\u01aa"+
    "\1\0\1\113\1\114\1\115\12\0\1\115\1\0\1\106"+
    "\6\0\1\113\2\0\1\113\43\0\1\u01ab\1\0\1\u01ab"+
    "\1\106\3\0\1\u01ab\21\0\1\106\55\0\1\u01ac\1\104"+
    "\1\u01ac\1\106\2\0\3\u01ac\1\0\1\113\1\114\1\115"+
    "\12\0\1\115\1\0\1\106\6\0\1\113\2\0\1\113"+
    "\43\0\1\u01ad\1\0\1\u01ad\1\106\3\0\1\u01ad\21\0"+
    "\1\106\55\0\3\104\1\106\2\0\3\104\1\0\1\113"+
    "\1\114\1\115\12\0\1\115\1\0\1\106\6\0\1\113"+
    "\2\0\1\113\43\0\1\u01ae\1\0\1\u01ae\1\106\3\0"+
    "\1\u01ae\21\0\1\106\55\0\1\u01af\1\0\1\u01af\1\106"+
    "\3\0\1\u01af\21\0\1\106\55\0\1\u01b0\1\0\1\u01b0"+
    "\1\106\3\0\1\u01b0\21\0\1\106\55\0\1\u01b1\1\0"+
    "\1\u01b1\1\106\3\0\1\u01b1\21\0\1\106\55\0\1\u01b2"+
    "\1\0\1\u01b2\1\106\3\0\1\u01b2\21\0\1\106\55\0"+
    "\1\u01b3\1\0\1\u01b3\1\106\3\0\1\u01b3\21\0\1\106"+
    "\55\0\1\u01b4\1\0\1\u01b4\1\106\3\0\1\u01b4\21\0"+
    "\1\106\55\0\1\u01b5\1\0\1\u01b5\1\106\3\0\1\u01b5"+
    "\21\0\1\106\55\0\1\u01b6\1\0\1\u01b6\1\106\3\0"+
    "\1\u01b6\21\0\1\106\55\0\1\u01b7\1\0\1\u01b7\1\106"+
    "\3\0\1\u01b7\21\0\1\106\55\0\1\u01b8\1\0\1\u01b8"+
    "\1\106\3\0\1\u01b8\21\0\1\106\55\0\1\u01b9\1\0"+
    "\1\u01b9\1\106\3\0\1\u01b9\21\0\1\106\55\0\1\u01ba"+
    "\1\0\1\u01ba\1\106\3\0\1\u01ba\21\0\1\106\55\0"+
    "\1\u01bb\1\0\1\u01bb\1\106\3\0\1\u01bb\21\0\1\106"+
    "\55\0\1\u01bc\1\0\1\u01bc\1\106\3\0\1\u01bc\21\0"+
    "\1\106\55\0\1\u01bd\1\0\1\u01bd\1\106\3\0\1\u01bd"+
    "\21\0\1\106\55\0\1\u01be\1\0\1\u01be\1\106\3\0"+
    "\1\u01be\21\0\1\106\55\0\1\u01bf\1\0\1\u01bf\1\106"+
    "\3\0\1\u01bf\21\0\1\106\55\0\1\u01c0\1\0\1\u01c0"+
    "\1\106\3\0\1\u01c0\21\0\1\106\55\0\1\u01c1\1\0"+
    "\1\u01c1\1\106\3\0\1\u01c1\21\0\1\106\55\0\1\u01c2"+
    "\1\0\1\u01c2\1\106\3\0\1\u01c2\21\0\1\106\55\0"+
    "\1\u01c3\1\0\1\u01c3\1\106\3\0\1\u01c3\21\0\1\106"+
    "\55\0\1\u01c4\1\0\1\u01c4\1\106\3\0\1\u01c4\21\0"+
    "\1\106\55\0\1\u01c5\1\0\1\u01c5\1\106\3\0\1\u01c5"+
    "\21\0\1\106\55\0\1\u01c6\1\0\1\u01c6\1\106\3\0"+
    "\1\u01c6\21\0\1\106\55\0\1\u01c7\1\0\1\u01c7\1\106"+
    "\3\0\1\u01c7\21\0\1\106\55\0\1\u01c8\1\0\1\u01c8"+
    "\1\106\3\0\1\u01c8\21\0\1\106\55\0\1\u01c9\1\0"+
    "\1\u01c9\1\106\3\0\1\u01c9\21\0\1\106\55\0\1\u01ca"+
    "\1\0\1\u01ca\1\106\3\0\1\u01ca\21\0\1\106\55\0"+
    "\1\u01cb\1\0\1\u01cb\1\106\3\0\1\u01cb\21\0\1\106"+
    "\55\0\1\u01cc\1\0\1\u01cc\1\106\3\0\1\u01cc\21\0"+
    "\1\106\55\0\1\u01cd\1\0\1\u01cd\1\106\3\0\1\u01cd"+
    "\21\0\1\106\55\0\1\u01ce\1\0\1\u01ce\1\106\3\0"+
    "\1\u01ce\21\0\1\106\55\0\1\u01cf\1\0\1\u01cf\1\106"+
    "\3\0\1\u01cf\21\0\1\106\55\0\1\u01d0\1\0\1\u01d0"+
    "\1\106\3\0\1\u01d0\21\0\1\106\55\0\1\u01d1\1\0"+
    "\1\u01d1\1\106\3\0\1\u01d1\21\0\1\106\55\0\1\u01d2"+
    "\1\0\1\u01d2\1\106\3\0\1\u01d2\21\0\1\106\55\0"+
    "\1\u01d3\1\0\1\u01d3\1\106\3\0\1\u01d3\21\0\1\106"+
    "\55\0\1\u01d4\1\0\1\u01d4\1\106\3\0\1\u01d4\21\0"+
    "\1\106\55\0\1\u01d5\1\0\1\u01d5\1\106\3\0\1\u01d5"+
    "\21\0\1\106\55\0\1\u01d6\1\0\1\u01d6\1\106\3\0"+
    "\1\u01d6\21\0\1\106\55\0\1\u01d7\1\0\1\u01d7\1\106"+
    "\3\0\1\u01d7\21\0\1\106\55\0\1\u01d8\1\0\1\u01d8"+
    "\1\106\3\0\1\u01d8\21\0\1\106\55\0\1\u01a4\1\0"+
    "\1\u01a4\1\106\3\0\1\u01a4\21\0\1\106\44\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26128];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\2\11\7\1\2\11\21\1\10\11"+
    "\4\1\3\11\7\1\2\11\3\1\2\11\1\1\1\0"+
    "\2\11\3\1\1\11\1\0\2\1\1\0\1\11\1\1"+
    "\1\0\1\1\1\0\2\11\44\1\1\0\3\1\2\11"+
    "\1\0\1\11\1\0\12\11\2\1\10\11\1\1\1\11"+
    "\2\0\7\1\1\0\1\11\52\1\1\0\4\1\1\11"+
    "\1\0\2\11\2\0\1\11\54\1\1\0\4\1\1\11"+
    "\1\0\43\1\1\0\2\1\1\11\34\1\1\0\24\1"+
    "\1\0\16\1\1\0\13\1\1\0\7\1\1\11\1\1"+
    "\1\0\4\1\1\0\4\1\1\0\3\1\1\0\3\1"+
    "\1\0\3\1\1\0\3\1\1\0\3\1\1\0\25\1"+
    "\37\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[472];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  private StringBuffer string = new StringBuffer();
  
  private String originId;
  
  private ETokenType lastTokenType;
  
  private UnicodeEscapes unicodeEscapes;
  
  /** 
   * Sets up scanner. The provided reader is wrapped in scanner
   * that resolves unicode escape sequences.
   * 
   * @see UnicodeEscapes
   */  
  public JavaScanner(java.io.Reader reader, String originId) {
    unicodeEscapes = new UnicodeEscapes(reader);
    this.zzReader = unicodeEscapes;
    this.originId = originId;
  }
  
  /** 
   * Resets scanner and underlying unicode escaper.
   * 
   * @see UnicodeEscapes
   */    
  public void reset(java.io.Reader reader, String originId) {
    this.originId = originId;
    lastTokenType=null;
    unicodeEscapes.resetOffsets ();
    unicodeEscapes.yyreset(reader);
    yyreset(unicodeEscapes);
  }
  
  /**
   * {@inheritDoc}
   */
  public void close() throws java.io.IOException {
    yyclose();
  }
  
   /**
   * Wrapper to store last token.
   */
  public JavaToken getNextToken() throws java.io.IOException {
  	JavaToken token = yyGetNextToken();
  	lastTokenType=token.getType();
  	return token;
  }

  /** Factory method for tokens. */  
  private JavaToken token (ETokenType type, int offset, int lineNumber, String text) {
  // line numbers are correct, but we have to correct the offset due to unicode escapes
	return new JavaToken (type, unicodeEscapes.correctOffset(offset), lineNumber, text, originId);
  }

  /** Factory method for tokens. */  
  private JavaToken token (ETokenType type) {
	return token (type, yychar, yyline, yytext());
  }
  
  /** This indicates that a constructor shouldn't be used. */
  public class DeprecatedConstructorException extends Exception {}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  JavaScanner(java.io.Reader in) throws DeprecatedConstructorException
 {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  JavaScanner(java.io.InputStream in) throws DeprecatedConstructorException
 {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2240) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public JavaToken yyGetNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10: 
          { yybegin(STRING); string.setLength(0); string.append(yytext());
          }
        case 124: break;
        case 19: 
          { return token(ETokenType.SEMICOLON);
          }
        case 125: break;
        case 18: 
          { return token(ETokenType.RBRACK);
          }
        case 126: break;
        case 122: 
          { return token(ETokenType.ANNOTATION_INTERFACE);
          }
        case 127: break;
        case 104: 
          { return token(ETokenType.IMPORT);
          }
        case 128: break;
        case 108: 
          { return token(ETokenType.EXTENDS);
          }
        case 129: break;
        case 31: 
          { return token(ETokenType.XOR);
          }
        case 130: break;
        case 5: 
          { return token(ETokenType.MULT);
          }
        case 131: break;
        case 42: 
          { return token(ETokenType.MINUSMINUS);
          }
        case 132: break;
        case 53: 
          { return token(ETokenType.OROR);
          }
        case 133: break;
        case 50: 
          { return token(ETokenType.ANDEQ);
          }
        case 134: break;
        case 57: 
          { return token(ETokenType.MODEQ);
          }
        case 135: break;
        case 107: 
          { return token(ETokenType.BOOLEAN);
          }
        case 136: break;
        case 63: 
          { string.append( "\\t" );
          }
        case 137: break;
        case 119: 
          { return token(ETokenType.PROTECTED);
          }
        case 138: break;
        case 88: 
          { return token(ETokenType.SHORT);
          }
        case 139: break;
        case 80: 
          { return token(ETokenType.ELSE);
          }
        case 140: break;
        case 34: 
          { yybegin(YYINITIAL);
                                   return token(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()+1, yyline, string.toString());
          }
        case 141: break;
        case 90: 
          { return token(ETokenType.THROW);
          }
        case 142: break;
        case 54: 
          { return token(ETokenType.PLUSEQ);
          }
        case 143: break;
        case 3: 
          { yyline -= 1;
          }
        case 144: break;
        case 16: 
          { return token(ETokenType.RBRACE);
          }
        case 145: break;
        case 47: 
          { return token(ETokenType.GTEQ);
          }
        case 146: break;
        case 114: 
          { return token(ETokenType.STRICTFP);
          }
        case 147: break;
        case 17: 
          { return token(ETokenType.LBRACK);
          }
        case 148: break;
        case 65: 
          { string.append( "\\n" );
          }
        case 149: break;
        case 76: 
          { return token(ETokenType.BOOLEAN_LITERAL);
          }
        case 150: break;
        case 92: 
          { return token(ETokenType.CONST);
          }
        case 151: break;
        case 118: 
          { return token(ETokenType.INTERFACE);
          }
        case 152: break;
        case 112: 
          { return token(ETokenType.PRIVATE);
          }
        case 153: break;
        case 75: 
          { return token(ETokenType.BYTE);
          }
        case 154: break;
        case 51: 
          { return token(ETokenType.ANDAND);
          }
        case 155: break;
        case 117: 
          { return token(ETokenType.TRANSIENT);
          }
        case 156: break;
        case 59: 
          { string.append( "\\\"" );
          }
        case 157: break;
        case 110: 
          { return token(ETokenType.FINALLY);
          }
        case 158: break;
        case 111: 
          { return token(ETokenType.PACKAGE);
          }
        case 159: break;
        case 55: 
          { return token(ETokenType.PLUSPLUS);
          }
        case 160: break;
        case 116: 
          { return token(ETokenType.VOLATILE);
          }
        case 161: break;
        case 93: 
          { if (lastTokenType==ETokenType.DOT) {
  			return token(ETokenType.CLASS_LITERAL);		
  		} else {
  			return token(ETokenType.CLASS);
   		}
          }
        case 162: break;
        case 6: 
          { return token(ETokenType.IDENTIFIER);
          }
        case 163: break;
        case 61: 
          { string.append( "\\\\" );
          }
        case 164: break;
        case 102: 
          { return token(ETokenType.RETURN);
          }
        case 165: break;
        case 22: 
          { return token(ETokenType.GT);
          }
        case 166: break;
        case 1: 
          { return token(ETokenType.ILLEGAL_CHARACTER);
          }
        case 167: break;
        case 121: 
          { return token(ETokenType.IMPLEMENTS);
          }
        case 168: break;
        case 109: 
          { return token(ETokenType.DEFAULT);
          }
        case 169: break;
        case 12: 
          { return token(ETokenType.AT_OPERATOR);
          }
        case 170: break;
        case 36: 
          { yybegin(YYINITIAL);
                                   return token(ETokenType.UNTERMINATED_CHARACTER_LITERAL, yychar-string.length()+1, yyline, string.toString());
          }
        case 171: break;
        case 39: 
          { return token(ETokenType.DIVEQ);
          }
        case 172: break;
        case 115: 
          { return token(ETokenType.CONTINUE);
          }
        case 173: break;
        case 21: 
          { return token(ETokenType.EQ);
          }
        case 174: break;
        case 15: 
          { return token(ETokenType.LBRACE);
          }
        case 175: break;
        case 71: 
          { return token(ETokenType.FOR);
          }
        case 176: break;
        case 77: 
          { return token(ETokenType.THIS);
          }
        case 177: break;
        case 74: 
          { return token(ETokenType.TRADITIONAL_COMMENT);
          }
        case 178: break;
        case 45: 
          { return token(ETokenType.DO);
          }
        case 179: break;
        case 35: 
          { yybegin(YYINITIAL); string.append(yytext());
                                   return token(ETokenType.STRING_LITERAL, yychar-string.length()+1, yyline, string.toString());
          }
        case 180: break;
        case 99: 
          { return token(ETokenType.STATIC);
          }
        case 181: break;
        case 11: 
          { yybegin(CHARLITERAL); string.setLength(0); string.append(yytext());
          }
        case 182: break;
        case 46: 
          { return token(ETokenType.EQEQ);
          }
        case 183: break;
        case 87: 
          { return token(ETokenType.BREAK);
          }
        case 184: break;
        case 43: 
          { return token(ETokenType.MINUSEQ);
          }
        case 185: break;
        case 64: 
          { string.append( "\\r" );
          }
        case 186: break;
        case 82: 
          { return token(ETokenType.LONG);
          }
        case 187: break;
        case 30: 
          { return token(ETokenType.PLUS);
          }
        case 188: break;
        case 23: 
          { return token(ETokenType.LT);
          }
        case 189: break;
        case 62: 
          { string.append( "\\b" );
          }
        case 190: break;
        case 67: 
          { return token(ETokenType.ELLIPSIS);
          }
        case 191: break;
        case 69: 
          { return token(ETokenType.NEW);
          }
        case 192: break;
        case 101: 
          { return token(ETokenType.THROWS);
          }
        case 193: break;
        case 7: 
          { return token(ETokenType.INTEGER_LITERAL);
          }
        case 194: break;
        case 60: 
          { string.append( "\\'");
          }
        case 195: break;
        case 113: 
          { return token(ETokenType.ABSTRACT);
          }
        case 196: break;
        case 106: 
          { return token(ETokenType.PUBLIC);
          }
        case 197: break;
        case 4: 
          { return token(ETokenType.DIV);
          }
        case 198: break;
        case 56: 
          { return token(ETokenType.XOREQ);
          }
        case 199: break;
        case 32: 
          { return token(ETokenType.MOD);
          }
        case 200: break;
        case 14: 
          { return token(ETokenType.RPAREN);
          }
        case 201: break;
        case 95: 
          { return token(ETokenType.FINAL);
          }
        case 202: break;
        case 81: 
          { return token(ETokenType.ENUM);
          }
        case 203: break;
        case 98: 
          { return token(ETokenType.ASSERT);
          }
        case 204: break;
        case 40: 
          { return token(ETokenType.MULTEQ);
          }
        case 205: break;
        case 94: 
          { return token(ETokenType.FLOAT);
          }
        case 206: break;
        case 89: 
          { return token(ETokenType.SUPER);
          }
        case 207: break;
        case 84: 
          { return token(ETokenType.GOTO);
          }
        case 208: break;
        case 9: 
          { return token(ETokenType.MINUS);
          }
        case 209: break;
        case 29: 
          { return token(ETokenType.OR);
          }
        case 210: break;
        case 86: 
          { return token(ETokenType.URSHIFTEQ);
          }
        case 211: break;
        case 120: 
          { return token(ETokenType.INSTANCEOF);
          }
        case 212: break;
        case 58: 
          { return token(ETokenType.ILLEGAL_ESCAPE_SEQUENCE);
          }
        case 213: break;
        case 68: 
          { return token(ETokenType.TRY);
          }
        case 214: break;
        case 123: 
          { return token(ETokenType.SYNCHRONIZED);
          }
        case 215: break;
        case 38: 
          { return token(ETokenType.END_OF_LINE_COMMENT);
          }
        case 216: break;
        case 27: 
          { return token(ETokenType.COLON);
          }
        case 217: break;
        case 79: 
          { return token(ETokenType.CHAR);
          }
        case 218: break;
        case 37: 
          { yybegin(YYINITIAL); string.append(yytext());
                                   return token(ETokenType.CHARACTER_LITERAL, yychar-string.length()+1, yyline, string.toString());
          }
        case 219: break;
        case 66: 
          { string.append( "\\f" );
          }
        case 220: break;
        case 8: 
          { return token(ETokenType.DOT);
          }
        case 221: break;
        case 25: 
          { return token(ETokenType.COMP);
          }
        case 222: break;
        case 70: 
          { return token(ETokenType.INT);
          }
        case 223: break;
        case 13: 
          { return token(ETokenType.LPAREN);
          }
        case 224: break;
        case 28: 
          { return token(ETokenType.AND);
          }
        case 225: break;
        case 26: 
          { return token(ETokenType.QUESTION);
          }
        case 226: break;
        case 96: 
          { return token(ETokenType.WHILE);
          }
        case 227: break;
        case 73: 
          { return token(ETokenType.LSHIFTEQ);
          }
        case 228: break;
        case 52: 
          { return token(ETokenType.OREQ);
          }
        case 229: break;
        case 103: 
          { return token(ETokenType.NATIVE);
          }
        case 230: break;
        case 2: 
          { /* ignore */
          }
        case 231: break;
        case 44: 
          { return token(ETokenType.IF);
          }
        case 232: break;
        case 105: 
          { return token(ETokenType.DOUBLE);
          }
        case 233: break;
        case 24: 
          { return token(ETokenType.NOT);
          }
        case 234: break;
        case 91: 
          { return token(ETokenType.CATCH);
          }
        case 235: break;
        case 20: 
          { return token(ETokenType.COMMA);
          }
        case 236: break;
        case 100: 
          { return token(ETokenType.SWITCH);
          }
        case 237: break;
        case 33: 
          { string.append( yytext() );
          }
        case 238: break;
        case 85: 
          { return token(ETokenType.VOID);
          }
        case 239: break;
        case 78: 
          { return token(ETokenType.CASE);
          }
        case 240: break;
        case 49: 
          { return token(ETokenType.NOTEQ);
          }
        case 241: break;
        case 83: 
          { return token(ETokenType.NULL_LITERAL);
          }
        case 242: break;
        case 72: 
          { return token(ETokenType.RSHIFTEQ);
          }
        case 243: break;
        case 41: 
          { return token(ETokenType.FLOATING_POINT_LITERAL);
          }
        case 244: break;
        case 97: 
          { return token(ETokenType.DOCUMENTATION_COMMENT);
          }
        case 245: break;
        case 48: 
          { return token(ETokenType.LTEQ);
          }
        case 246: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case STRING: {
              yybegin(YYINITIAL);
                                   return token(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()+1, yyline, string.toString());
            }
            case 473: break;
            case CHARLITERAL: {
              yybegin(YYINITIAL);
                                   return token(ETokenType.UNTERMINATED_CHARACTER_LITERAL, yychar-string.length()+1, yyline, string.toString());
            }
            case 474: break;
            default:
              {
                return token(ETokenType.EOF);
              }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
