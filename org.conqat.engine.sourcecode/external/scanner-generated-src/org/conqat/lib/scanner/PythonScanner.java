/* The following code was generated by JFlex 1.4.2 on {{TIMESTAMP}} */

/* 
   This grammar is based on 
   http://docs.python.org/3.1/reference/lexical_analysis.html */

package org.conqat.lib.scanner;

import org.conqat.lib.commons.string.StringUtils;
import java.util.Stack;
import static org.conqat.lib.scanner.ETokenType.*;
import java.util.EnumMap;
import org.conqat.lib.commons.assertion.CCSMAssert;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on {{TIMESTAMP}} from the specification file
 * <tt>/home/freakout/cqse/repositories/conqat/trunk/lib/org.conqat.lib.scanner/grammars/python.flex</tt>
 */
class PythonScanner extends QueuedScannerBase<PythonToken> {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IMPLICIT_LINE_JOIN = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\2\1\0\1\12\1\1\22\0\1\11\1\62\1\20"+
    "\1\3\1\0\1\53\1\54\1\17\1\35\1\36\1\51\1\50\1\45"+
    "\1\33\1\30\1\52\1\4\1\10\6\6\2\5\1\46\1\44\1\57"+
    "\1\43\1\60\1\0\1\47\1\14\1\27\2\14\1\32\1\76\3\13"+
    "\1\34\3\13\1\102\1\23\2\13\1\16\1\13\1\103\3\13\1\25"+
    "\2\13\1\41\1\21\1\42\1\56\1\13\1\0\1\63\1\26\1\71"+
    "\1\65\1\31\1\7\1\101\1\105\1\73\1\34\1\70\1\72\1\100"+
    "\1\64\1\22\1\75\1\13\1\15\1\66\1\67\1\74\1\13\1\104"+
    "\1\24\1\77\1\13\1\37\1\55\1\40\1\61\53\0\1\13\12\0"+
    "\1\13\4\0\1\13\5\0\27\13\1\0\7\13\30\13\1\0\10\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\2\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\2\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\2\13\1\13"+
    "\1\13\1\13\1\13\3\13\2\13\1\13\1\13\1\13\2\13\1\13"+
    "\3\13\2\13\4\13\1\13\2\13\1\13\3\13\3\13\2\13\1\13"+
    "\2\13\1\13\1\13\1\13\1\13\1\13\2\13\1\13\1\13\2\13"+
    "\1\13\1\13\2\13\1\13\3\13\1\13\1\13\1\13\2\13\2\13"+
    "\1\0\1\13\3\13\4\0\1\13\1\0\1\13\1\13\1\0\1\13"+
    "\1\13\1\0\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\2\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\2\13\1\13\1\0\1\13"+
    "\1\13\1\13\3\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\7\13\2\13\1\13\2\13\2\13\1\13\1\13\4\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\105\13\1\0\44\13"+
    "\7\0\2\13\36\0\5\13\140\0\1\13\52\0\1\13\1\13\1\13"+
    "\1\13\2\0\1\13\1\13\2\0\4\13\10\0\1\13\1\0\3\13"+
    "\1\0\1\13\1\0\2\13\1\13\21\13\1\0\11\13\43\13\1\13"+
    "\2\13\3\13\3\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\5\13\1\13\1\13\1\0"+
    "\1\13\1\13\2\13\2\13\63\13\60\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\10\0\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\2\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\2\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\11\0\46\13\12\0"+
    "\47\13\u0b18\0\46\13\u0c3a\0\300\13\100\0\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\11\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\11\13\10\13\6\13\2\0\6\13\2\0\10\13"+
    "\10\13\10\13\10\13\6\13\2\0\6\13\2\0\10\13\1\0\1\13"+
    "\1\0\1\13\1\0\1\13\1\0\1\13\10\13\10\13\16\13\2\0"+
    "\10\13\10\0\10\13\10\0\10\13\10\0\5\13\1\0\2\13\4\13"+
    "\2\0\1\13\3\0\3\13\1\0\2\13\4\13\4\0\4\13\2\0"+
    "\2\13\4\13\4\0\10\13\5\13\5\0\3\13\1\0\2\13\4\13"+
    "\224\0\5\13\155\0\1\13\4\0\1\13\2\0\1\13\3\13\2\13"+
    "\3\13\1\13\1\0\1\13\3\0\5\13\6\0\1\13\1\0\1\13"+
    "\1\0\1\13\1\0\4\13\1\0\1\13\4\13\1\13\4\0\1\13"+
    "\2\0\2\13\2\13\5\0\1\13\4\13\4\0\1\13\21\0\20\13"+
    "\20\13\3\0\1\13\1\13\u0331\0\32\13\32\13\u0716\0\57\13\1\0"+
    "\57\13\1\0\1\13\1\13\3\13\2\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\4\13\1\13\1\13\2\13\1\13\10\13\3\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\2\13\6\0\1\13"+
    "\1\13\1\13\1\13\21\0\46\13\u791a\0\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\22\0\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\212\0\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\3\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\12\13\1\13\1\13\1\13\1\13\2\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\1\13\3\0\1\13"+
    "\1\13\1\13\1\13\1\0\1\13\1\13\16\0\1\13\1\13\1\13"+
    "\1\13\1\13\1\13\1\13\1\13\1\13\1\13\120\0\1\13\u5305\0"+
    "\7\13\14\0\5\13\u0409\0\32\13\6\0\32\13\245\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\2\4\1\5\1\6\1\7"+
    "\3\5\3\1\2\5\1\10\1\5\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\1\16\5\1\6\2\37\1\6"+
    "\1\40\1\0\2\41\1\4\4\0\1\42\1\0\1\43"+
    "\3\5\2\0\2\5\1\0\1\44\2\0\1\44\1\0"+
    "\2\37\1\0\1\32\3\5\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\5\1\65\6\5\1\66"+
    "\1\67\1\70\11\5\1\71\1\0\1\72\3\4\1\42"+
    "\1\0\1\5\1\73\3\5\1\44\6\0\4\5\1\74"+
    "\1\75\1\76\1\77\1\31\2\5\1\100\1\101\1\102"+
    "\1\103\14\5\1\104\3\5\2\0\1\44\3\0\1\44"+
    "\1\0\2\5\1\105\1\106\6\5\1\107\3\5\1\110"+
    "\1\111\1\112\3\5\1\113\1\44\7\0\1\44\7\0"+
    "\1\114\4\5\1\115\2\5\1\116\1\117\1\5\1\120"+
    "\1\5\1\121\2\0\1\44\2\0\1\44\1\0\1\44"+
    "\3\0\1\44\2\0\2\44\1\122\1\123\2\5\1\124"+
    "\1\125\1\126\1\127\3\44\3\0\3\44\3\0\2\44"+
    "\2\5\3\0\1\44\3\0\1\44\3\0\1\44\4\0"+
    "\1\44\6\0\1\44\1\130\1\131\1\0\2\44\1\0"+
    "\2\44\12\0\2\44\1\0\1\44\3\0\1\44\1\0"+
    "\2\44\1\0\2\44\3\0\1\44\5\0\1\44\3\0"+
    "\4\44\3\0\3\44\3\0\1\44\5\0\2\44\1\0"+
    "\2\44\1\0\14\44\1\0\5\44\15\0\1\44\1\0"+
    "\1\44\1\0\10\44\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\322\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4"+
    "\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\322\0\322"+
    "\0\322\0\322\0\322\0\322\0\u05be\0\322\0\322\0\322"+
    "\0\322\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8"+
    "\0\u07ee\0\u0834\0\322\0\u087a\0\u08c0\0\u0906\0\u094c\0\u0992"+
    "\0\u09d8\0\u0a1e\0\u0a64\0\u0aaa\0\u0af0\0\u0b36\0\u0b7c\0\u0bc2"+
    "\0\u0c08\0\u0c4e\0\u0c94\0\u0cda\0\322\0\322\0\322\0\u0276"+
    "\0\u0d20\0\322\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4"+
    "\0\u0f0a\0\322\0\u0f50\0\u0f96\0\u0fdc\0\u038e\0\u03d4\0\u1022"+
    "\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252"+
    "\0\u1298\0\u041a\0\u02bc\0\u12de\0\u1324\0\u136a\0\322\0\322"+
    "\0\322\0\322\0\u13b0\0\322\0\u13f6\0\322\0\322\0\322"+
    "\0\322\0\322\0\u143c\0\322\0\u1482\0\322\0\u14c8\0\u150e"+
    "\0\u1554\0\u159a\0\u15e0\0\u1626\0\u166c\0\u16b2\0\u02bc\0\u02bc"+
    "\0\u02bc\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856\0\u189c"+
    "\0\u18e2\0\u1928\0\322\0\u0c94\0\322\0\u0df2\0\u0e38\0\u0e7e"+
    "\0\u196e\0\u19b4\0\u19fa\0\u02bc\0\u1a40\0\u1a86\0\u1acc\0\u1b12"+
    "\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc"+
    "\0\u1d42\0\u1d88\0\322\0\322\0\322\0\322\0\u02bc\0\u1dce"+
    "\0\u1e14\0\u02bc\0\u02bc\0\u02bc\0\u02bc\0\u1e5a\0\u1ea0\0\u1ee6"+
    "\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\u208a\0\u20d0\0\u2116"+
    "\0\u215c\0\u02bc\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u22ba\0\u2300"+
    "\0\u2346\0\u238c\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u24ea\0\u02bc"+
    "\0\u02bc\0\u2530\0\u2576\0\u25bc\0\u2602\0\u2648\0\u268e\0\u02bc"+
    "\0\u26d4\0\u271a\0\u2760\0\u02bc\0\u02bc\0\u02bc\0\u27a6\0\u27ec"+
    "\0\u2832\0\u02bc\0\u2878\0\u28be\0\u2300\0\u2904\0\u294a\0\u2990"+
    "\0\u29d6\0\u2a1c\0\u2a62\0\u2aa8\0\u2418\0\u2aee\0\u2b34\0\u2b7a"+
    "\0\u2bc0\0\u2c06\0\u02bc\0\u2c4c\0\u2c92\0\u2cd8\0\u2d1e\0\u02bc"+
    "\0\u2d64\0\u2daa\0\u02bc\0\u02bc\0\u2df0\0\u02bc\0\u2e36\0\u02bc"+
    "\0\u2e7c\0\u2ec2\0\u2f08\0\u2f4e\0\u2f94\0\u2fda\0\u3020\0\u3066"+
    "\0\u30ac\0\u30f2\0\u3138\0\u317e\0\u31c4\0\u320a\0\u3250\0\u3296"+
    "\0\u02bc\0\u02bc\0\u32dc\0\u3322\0\u02bc\0\u02bc\0\u02bc\0\u02bc"+
    "\0\u3368\0\u33ae\0\u33f4\0\u343a\0\u3480\0\u34c6\0\u350c\0\u3552"+
    "\0\u3598\0\u35de\0\u3624\0\u366a\0\u36b0\0\u36f6\0\u373c\0\u3782"+
    "\0\u33f4\0\u37c8\0\u380e\0\u3854\0\u389a\0\u38e0\0\u3926\0\u396c"+
    "\0\u39b2\0\u39f8\0\u3a3e\0\u3a84\0\u3aca\0\u3b10\0\u3b56\0\u3b9c"+
    "\0\u3be2\0\u36b0\0\u3c28\0\u3c6e\0\u3cb4\0\u3cfa\0\u3d40\0\u3d86"+
    "\0\u02bc\0\u02bc\0\u3dcc\0\u3e12\0\u3e58\0\u3e9e\0\u3ee4\0\u3f2a"+
    "\0\u3f70\0\u3fb6\0\u3ffc\0\u396c\0\u4042\0\u4088\0\u40ce\0\u4114"+
    "\0\u415a\0\u41a0\0\u3cb4\0\u41e6\0\u422c\0\u4272\0\u42b8\0\u42fe"+
    "\0\u4344\0\u438a\0\u43d0\0\u4416\0\u445c\0\u44a2\0\u44e8\0\u39f8"+
    "\0\u452e\0\u4574\0\u45ba\0\u4600\0\u4646\0\u468c\0\u46d2\0\u4718"+
    "\0\u475e\0\u47a4\0\u47ea\0\u4830\0\u4876\0\u48bc\0\u4902\0\u4948"+
    "\0\u498e\0\u49d4\0\u4a1a\0\u4a60\0\u4aa6\0\u4aec\0\u4b32\0\u4b78"+
    "\0\u4bbe\0\u4c04\0\u4c4a\0\u4c90\0\u4cd6\0\u4d1c\0\u4d62\0\u4da8"+
    "\0\u4dee\0\u4e34\0\u4e7a\0\u4ec0\0\u4f06\0\u4f4c\0\u4f92\0\u4fd8"+
    "\0\u501e\0\u5064\0\u50aa\0\u50f0\0\u5136\0\u4bbe\0\u517c\0\u51c2"+
    "\0\u5208\0\u524e\0\u5294\0\u52da\0\u5320\0\u5366\0\u452e\0\u53ac"+
    "\0\u5136\0\u53f2\0\u5438\0\u4f06\0\u547e\0\u54c4\0\u550a\0\u5550"+
    "\0\u5596\0\u4fd8\0\u55dc\0\u5208\0\u5622\0\u5668\0\u56ae\0\u56f4"+
    "\0\u573a\0\u5780\0\u57c6\0\u580c\0\u5852\0\u5898\0\u58de\0\u5924"+
    "\0\u596a\0\u58de\0\u59b0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\2\10\1\11\1\10\1\12"+
    "\1\13\2\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\3\14\1\23\1\14\1\24\1\25\1\14\1\26\1\14"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\14\1\60\1\14\1\61\1\62\1\63\1\14"+
    "\1\64\1\65\1\66\1\14\1\67\1\70\1\71\1\72"+
    "\1\14\1\4\2\5\1\6\1\7\2\10\1\11\1\10"+
    "\1\73\1\13\2\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\3\14\1\23\1\14\1\24\1\25\1\14\1\26"+
    "\1\14\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\14\1\60\1\14\1\61\1\62\1\63"+
    "\1\14\1\64\1\65\1\66\1\14\1\67\1\70\1\71"+
    "\1\72\1\14\1\4\1\74\1\75\1\6\1\7\2\10"+
    "\1\11\1\10\1\76\1\13\2\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\3\14\1\23\1\14\1\24\1\25"+
    "\1\14\1\26\1\14\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\14\1\60\1\14\1\61"+
    "\1\62\1\63\1\14\1\64\1\65\1\66\1\14\1\67"+
    "\1\70\1\71\1\72\1\14\106\0\1\77\2\5\1\0"+
    "\5\77\1\100\74\77\1\6\1\101\1\102\103\6\4\0"+
    "\1\103\2\104\1\0\1\104\11\0\2\105\2\106\2\107"+
    "\1\110\2\111\1\0\1\112\55\0\3\10\1\0\1\10"+
    "\17\0\1\110\2\111\1\0\1\112\55\0\5\14\2\0"+
    "\2\14\1\113\1\14\3\0\1\114\5\14\1\0\2\14"+
    "\1\0\1\14\26\0\10\14\1\115\12\14\1\0\2\5"+
    "\6\0\1\100\100\0\5\14\2\0\4\14\3\0\6\14"+
    "\1\0\2\14\1\0\1\14\26\0\23\14\4\0\5\14"+
    "\2\0\4\14\1\116\1\117\1\0\6\14\1\0\1\120"+
    "\1\14\1\0\1\14\26\0\1\121\22\14\4\0\5\14"+
    "\2\0\4\14\1\116\1\117\1\0\6\14\1\0\2\14"+
    "\1\0\1\14\26\0\23\14\1\122\2\0\14\122\1\123"+
    "\1\122\1\124\64\122\1\125\2\0\15\125\1\126\1\127"+
    "\64\125\1\0\1\130\1\131\6\0\1\132\100\0\5\14"+
    "\2\0\2\14\1\133\1\14\3\0\6\14\1\0\2\14"+
    "\1\0\1\14\26\0\23\14\4\0\5\14\2\0\2\14"+
    "\1\134\1\14\3\0\6\14\1\0\2\14\1\0\1\14"+
    "\26\0\23\14\4\0\3\110\1\0\1\110\101\0\5\14"+
    "\2\0\4\14\3\0\2\14\1\135\3\14\1\0\2\14"+
    "\1\0\1\14\26\0\7\14\1\136\13\14\43\0\1\137"+
    "\105\0\1\140\105\0\1\141\105\0\1\142\5\0\1\143"+
    "\77\0\1\144\6\0\1\145\76\0\1\146\105\0\1\147"+
    "\105\0\1\150\105\0\1\151\105\0\1\152\13\0\1\153"+
    "\71\0\1\154\14\0\1\155\70\0\1\156\46\0\5\14"+
    "\2\0\4\14\3\0\6\14\1\0\2\14\1\0\1\14"+
    "\26\0\1\14\1\157\1\14\1\160\17\14\4\0\5\14"+
    "\2\0\4\14\3\0\1\161\5\14\1\0\2\14\1\0"+
    "\1\14\26\0\23\14\4\0\5\14\2\0\4\14\3\0"+
    "\6\14\1\0\1\162\1\14\1\0\1\14\26\0\23\14"+
    "\4\0\5\14\2\0\2\14\1\163\1\14\3\0\6\14"+
    "\1\0\2\14\1\0\1\14\26\0\23\14\4\0\5\14"+
    "\2\0\4\14\3\0\1\164\5\14\1\0\2\14\1\0"+
    "\1\14\26\0\7\14\1\165\13\14\4\0\5\14\2\0"+
    "\4\14\3\0\6\14\1\0\2\14\1\0\1\14\26\0"+
    "\1\166\22\14\4\0\3\14\1\167\1\14\2\0\4\14"+
    "\3\0\6\14\1\0\2\14\1\0\1\14\26\0\1\14"+
    "\1\170\1\14\1\171\11\14\1\172\5\14\4\0\5\14"+
    "\2\0\4\14\3\0\6\14\1\0\2\14\1\0\1\14"+
    "\26\0\1\173\22\14\4\0\5\14\2\0\4\14\3\0"+
    "\6\14\1\0\2\14\1\0\1\14\26\0\1\174\22\14"+
    "\4\0\5\14\2\0\4\14\3\0\6\14\1\0\2\14"+
    "\1\0\1\14\26\0\10\14\1\175\12\14\4\0\5\14"+
    "\2\0\4\14\3\0\6\14\1\0\2\14\1\0\1\14"+
    "\26\0\7\14\1\176\13\14\4\0\5\14\2\0\4\14"+
    "\3\0\1\177\5\14\1\0\2\14\1\0\1\14\26\0"+
    "\23\14\4\0\5\14\2\0\2\14\1\200\1\14\3\0"+
    "\6\14\1\0\2\14\1\0\1\14\26\0\23\14\4\0"+
    "\5\14\2\0\4\14\3\0\6\14\1\0\2\14\1\0"+
    "\1\14\26\0\10\14\1\201\11\14\1\202\1\203\2\5"+
    "\1\0\5\203\1\204\74\203\2\0\1\75\105\0\1\205"+
    "\107\0\1\103\2\104\1\0\1\104\17\0\1\110\2\111"+
    "\1\0\1\112\55\0\3\104\1\0\1\104\17\0\1\110"+
    "\2\111\1\0\1\112\55\0\1\206\1\0\1\206\1\0"+
    "\1\206\101\0\5\207\3\0\1\207\11\0\2\207\1\0"+
    "\2\207\30\0\1\207\1\0\1\207\3\0\1\207\4\0"+
    "\1\207\13\0\1\210\3\0\1\210\101\0\3\110\1\0"+
    "\1\110\20\0\2\111\1\0\1\112\55\0\3\211\1\0"+
    "\1\211\22\0\1\212\14\0\1\212\41\0\5\14\2\0"+
    "\4\14\3\0\1\213\5\14\1\0\2\14\1\0\1\14"+
    "\26\0\23\14\4\0\5\14\2\0\2\14\1\214\1\14"+
    "\3\0\6\14\1\0\2\14\1\0\1\14\26\0\23\14"+
    "\4\0\5\14\2\0\4\14\3\0\6\14\1\0\2\14"+
    "\1\0\1\14\26\0\1\14\1\215\21\14\4\0\5\14"+
    "\2\0\4\14\3\0\6\14\1\0\2\14\1\0\1\14"+
    "\26\0\4\14\1\216\16\14\4\0\5\14\2\0\4\14"+
    "\3\0\6\14\1\0\2\14\1\0\1\14\26\0\10\14"+
    "\1\217\12\14\1\122\2\0\14\122\1\220\1\122\1\124"+
    "\64\122\1\0\2\221\6\0\1\221\3\0\2\222\1\223"+
    "\1\117\65\0\1\122\1\224\104\122\1\125\2\0\15\125"+
    "\1\220\1\127\64\125\1\0\2\221\6\0\1\221\3\0"+
    "\2\222\1\116\1\225\65\0\1\125\1\226\104\125\2\0"+
    "\1\131\6\0\1\131\105\0\1\131\100\0\5\14\2\0"+
    "\4\14\3\0\6\14\1\0\1\227\1\14\1\0\1\14"+
    "\26\0\23\14\4\0\5\14\2\0\4\14\3\0\6\14"+
    "\1\0\2\14\1\0\1\14\26\0\6\14\1\230\14\14"+
    "\4\0\5\14\2\0\4\14\3\0\6\14\1\0\2\14"+
    "\1\0\1\14\26\0\3\14\1\231\4\14\1\232\12\14"+
    "\43\0\1\233\105\0\1\234\105\0\1\235\105\0\1\236"+
    "\46\0\5\14\2\0\4\14\3\0\6\14\1\0\2\14"+
    "\1\0\1\14\26\0\2\14\1\237\20\14\4\0\5\14"+
    "\2\0\4\14\3\0\6\14\1\0\2\14\1\0\1\14"+
    "\26\0\3\14\1\240\17\14\4\0\5\14\2\0\4\14"+
    "\3\0\6\14\1\0\2\14\1\0\1\14\26\0\1\14"+
    "\1\241\2\14\1\242\16\14\4\0\3\14\1\243\1\14"+
    "\2\0\4\14\3\0\6\14\1\0\2\14\1\0\1\14"+
    "\26\0\7\14\1\244\13\14\4\0\5\14\2\0\4\14"+
    "\3\0\6\14\1\0\2\14\1\0\1\14\26\0\14\14"+
    "\1\245\6\14\4\0\5\14\2\0\4\14\3\0\6\14"+
    "\1\0\2\14\1\0\1\14\26\0\1\14\1\246\21\14"+
    "\4\0\5\14\2\0\4\14\3\0\6\14\1\0\2\14"+
    "\1\0\1\14\26\0\1\247\22\14\4\0\5\14\2\0"+
    "\4\14\3\0\6\14\1\0\2\14\1\0\1\14\26\0"+
    "\15\14\1\250\5\14\4\0\5\14\2\0\4\14\3\0"+
    "\6\14\1\0\2\14\1\0\1\14\26\0\12\14\1\251"+
    "\10\14\4\0\5\14\2\0\4\14\3\0\6\14\1\0"+
    "\2\14\1\0\1\14\26\0\3\14\1\252\17\14\4\0"+
    "\5\14\2\0\4\14\3\0\6\14\1\0\2\14\1\0"+
    "\1\14\26\0\7\14\1\253\13\14\4\0\5\14\2\0"+
    "\4\14\3\0\6\14\1\0\1\254\1\14\1\0\1\14"+
    "\26\0\23\14\4\0\5\14\2\0\4\14\3\0\1\255"+
    "\5\14\1\0\2\14\1\0\1\14\26\0\23\14\4\0"+
    "\5\14\2\0\4\14\3\0\6\14\1\0\2\14\1\0"+
    "\1\14\26\0\1\14\1\256\21\14\4\0\5\14\2\0"+
    "\4\14\3\0\6\14\1\0\2\14\1\0\1\14\26\0"+
    "\11\14\1\257\11\14\4\0\5\14\2\0\4\14\3\0"+
    "\6\14\1\0\2\14\1\0\1\14\26\0\4\14\1\260"+
    "\16\14\4\0\5\14\2\0\4\14\3\0\6\14\1\0"+
    "\2\14\1\0\1\14\26\0\10\14\1\261\12\14\4\0"+
    "\3\211\1\0\1\211\23\0\1\112\55\0\3\211\1\0"+
    "\1\211\101\0\5\14\2\0\4\14\3\0\6\14\1\0"+
    "\2\14\1\0\1\14\26\0\15\14\1\262\5\14\4\0"+
    "\5\14\2\0\4\14\3\0\6\14\1\0\2\14\1\0"+
    "\1\14\26\0\1\263\22\14\4\0\5\14\2\0\4\14"+
    "\3\0\6\14\1\0\2\14\1\0\1\14\26\0\11\14"+
    "\1\264\11\14\4\0\5\14\2\0\4\14\3\0\6\14"+
    "\1\0\2\14\1\0\1\14\26\0\3\14\1\265\17\14"+
    "\1\0\2\221\6\0\1\221\3\0\2\222\1\116\1\117"+
    "\104\0\1\116\1\117\65\0\1\266\2\267\14\266\1\270"+
    "\1\266\1\271\64\266\1\122\1\0\15\122\1\220\1\122"+
    "\1\124\64\122\1\272\2\273\15\272\1\274\1\275\64\272"+
    "\1\125\1\0\16\125\1\220\1\127\64\125\4\0\5\14"+
    "\2\0\4\14\3\0\6\14\1\0\2\14\1\0\1\14"+
    "\26\0\1\276\22\14\4\0\5\14\2\0\4\14\3\0"+
    "\6\14\1\0\1\277\1\14\1\0\1\14\26\0\23\14"+
    "\4\0\5\14\2\0\4\14\3\0\6\14\1\0\1\300"+
    "\1\14\1\0\1\14\26\0\23\14\4\0\3\14\1\301"+
    "\1\14\2\0\4\14\3\0\6\14\1\0\2\14\1\0"+
    "\1\14\26\0\23\14\4\0\5\14\2\0\4\14\3\0"+
    "\6\14\1\0\1\302\1\14\1\0\1\14\26\0\23\14"+
    "\4\0\5\14\2\0\4\14\3\0\6\14\1\0\2\14"+
    "\1\0\1\14\26\0\7\14\1\303\13\14\4\0\5\14"+
    "\2\0\4\14\3\0\6\14\1\0\2\14\1\0\1\14"+
    "\26\0\4\14\1\304\16\14\4\0\5\14\2\0\4\14"+
    "\3\0\6\14\1\0\2\14\1\0\1\14\26\0\3\14"+
    "\1\305\17\14\4\0\5\14\2\0\4\14\3\0\4\14"+
    "\1\306\1\14\1\0\2\14\1\0\1\14\26\0\23\14"+
    "\4\0\5\14\2\0\4\14\3\0\1\307\5\14\1\0"+
    "\2\14\1\0\1\14\26\0\23\14\4\0\5\14\2\0"+
    "\4\14\3\0\6\14\1\0\2\14\1\0\1\14\26\0"+
    "\3\14\1\310\17\14\4\0\5\14\2\0\4\14\3\0"+
    "\6\14\1\0\2\14\1\0\1\14\26\0\3\14\1\311"+
    "\17\14\4\0\5\14\2\0\4\14\3\0\6\14\1\0"+
    "\2\14\1\0\1\14\26\0\7\14\1\312\13\14\4\0"+
    "\5\14\2\0\4\14\3\0\4\14\1\313\1\14\1\0"+
    "\2\14\1\0\1\14\26\0\23\14\4\0\5\14\2\0"+
    "\4\14\3\0\6\14\1\0\1\314\1\14\1\0\1\14"+
    "\26\0\23\14\4\0\5\14\2\0\4\14\3\0\6\14"+
    "\1\0\1\315\1\14\1\0\1\14\26\0\23\14\4\0"+
    "\5\14\2\0\4\14\3\0\6\14\1\0\2\14\1\0"+
    "\1\14\26\0\22\14\1\316\4\0\5\14\2\0\4\14"+
    "\3\0\6\14\1\0\2\14\1\0\1\14\26\0\7\14"+
    "\1\317\13\14\4\0\5\14\2\0\4\14\3\0\6\14"+
    "\1\0\2\14\1\0\1\14\26\0\7\14\1\320\13\14"+
    "\4\0\5\14\2\0\2\14\1\321\1\14\3\0\6\14"+
    "\1\0\2\14\1\0\1\14\26\0\23\14\4\0\5\14"+
    "\2\0\4\14\3\0\6\14\1\0\1\322\1\14\1\0"+
    "\1\14\26\0\23\14\1\266\2\267\14\266\1\323\1\266"+
    "\1\271\64\266\17\267\1\324\67\267\2\325\6\267\1\325"+
    "\3\267\2\326\1\327\1\330\65\267\1\266\1\331\15\266"+
    "\1\332\66\266\1\272\2\273\15\272\1\333\1\275\64\272"+
    "\20\273\1\334\66\273\2\335\6\273\1\335\3\273\2\336"+
    "\1\337\1\340\65\273\1\272\1\341\16\272\1\342\65\272"+
    "\4\0\5\14\2\0\4\14\3\0\6\14\1\0\2\14"+
    "\1\0\1\14\26\0\5\14\1\343\15\14\4\0\5\14"+
    "\2\0\4\14\3\0\6\14\1\0\2\14\1\0\1\14"+
    "\26\0\12\14\1\344\10\14\4\0\5\14\2\0\2\14"+
    "\1\345\1\14\3\0\6\14\1\0\2\14\1\0\1\14"+
    "\26\0\23\14\4\0\5\14\2\0\4\14\3\0\1\346"+
    "\5\14\1\0\2\14\1\0\1\14\26\0\23\14\4\0"+
    "\5\14\2\0\4\14\3\0\6\14\1\0\2\14\1\0"+
    "\1\14\26\0\10\14\1\347\12\14\4\0\5\14\2\0"+
    "\4\14\3\0\6\14\1\0\2\14\1\0\1\14\26\0"+
    "\3\14\1\350\17\14\4\0\5\14\2\0\4\14\3\0"+
    "\6\14\1\0\2\14\1\0\1\14\26\0\2\14\1\351"+
    "\20\14\4\0\5\14\2\0\2\14\1\352\1\14\3\0"+
    "\6\14\1\0\2\14\1\0\1\14\26\0\23\14\4\0"+
    "\5\14\2\0\4\14\3\0\6\14\1\0\1\353\1\14"+
    "\1\0\1\14\26\0\23\14\4\0\5\14\2\0\4\14"+
    "\3\0\6\14\1\0\2\14\1\0\1\14\26\0\2\14"+
    "\1\354\20\14\4\0\5\14\2\0\4\14\3\0\6\14"+
    "\1\0\2\14\1\0\1\14\26\0\1\355\22\14\4\0"+
    "\5\14\2\0\4\14\3\0\6\14\1\0\1\356\1\14"+
    "\1\0\1\14\26\0\23\14\4\0\5\14\2\0\4\14"+
    "\3\0\6\14\1\0\2\14\1\0\1\14\26\0\7\14"+
    "\1\357\13\14\4\0\5\14\2\0\4\14\3\0\6\14"+
    "\1\0\2\14\1\0\1\14\26\0\1\14\1\360\21\14"+
    "\1\267\2\325\6\267\1\325\3\267\2\326\1\361\1\330"+
    "\104\267\1\362\105\267\1\327\1\330\65\267\1\266\2\267"+
    "\14\266\1\363\1\266\1\271\64\266\1\364\2\267\14\364"+
    "\1\365\1\366\1\367\64\364\1\266\1\267\15\266\1\323"+
    "\1\266\1\271\65\266\2\267\14\266\1\370\1\266\1\271"+
    "\64\266\1\273\2\335\6\273\1\335\3\273\2\336\1\337"+
    "\1\371\105\273\1\372\104\273\1\337\1\340\65\273\1\373"+
    "\2\273\14\373\1\374\1\375\1\376\64\373\1\272\2\273"+
    "\15\272\1\377\1\275\65\272\1\273\16\272\1\333\1\275"+
    "\65\272\2\273\15\272\1\u0100\1\275\64\272\4\0\5\14"+
    "\2\0\4\14\3\0\6\14\1\0\2\14\1\0\1\14"+
    "\26\0\4\14\1\u0101\16\14\4\0\5\14\2\0\4\14"+
    "\3\0\6\14\1\0\2\14\1\0\1\14\26\0\4\14"+
    "\1\u0102\16\14\4\0\5\14\2\0\4\14\3\0\6\14"+
    "\1\0\2\14\1\0\1\14\26\0\6\14\1\u0103\14\14"+
    "\4\0\5\14\2\0\4\14\3\0\6\14\1\0\2\14"+
    "\1\0\1\14\26\0\1\14\1\u0104\21\14\4\0\5\14"+
    "\2\0\4\14\3\0\6\14\1\0\2\14\1\0\1\14"+
    "\26\0\1\u0105\22\14\4\0\5\14\2\0\4\14\3\0"+
    "\6\14\1\0\2\14\1\0\1\14\26\0\4\14\1\u0106"+
    "\16\14\4\0\5\14\2\0\4\14\3\0\6\14\1\0"+
    "\2\14\1\0\1\14\26\0\7\14\1\u0107\13\14\4\0"+
    "\5\14\2\0\4\14\3\0\6\14\1\0\2\14\1\0"+
    "\1\14\26\0\14\14\1\u0108\6\14\1\266\2\267\14\266"+
    "\1\u0109\1\266\1\271\64\266\17\267\1\u010a\67\267\2\325"+
    "\6\267\1\325\3\267\2\326\1\u010b\1\330\65\267\1\364"+
    "\2\267\14\364\1\365\1\270\1\367\65\364\2\267\14\364"+
    "\1\u010c\1\270\1\367\64\364\1\267\2\325\6\267\1\325"+
    "\3\267\2\326\1\327\1\u010d\65\267\1\364\1\u010e\15\364"+
    "\1\365\66\364\1\267\2\325\6\267\1\325\3\267\2\326"+
    "\1\u010f\1\330\65\267\1\272\2\273\15\272\1\u0110\1\275"+
    "\64\272\20\273\1\u0111\65\273\1\373\2\273\14\373\1\274"+
    "\1\375\1\376\64\373\1\273\2\335\6\273\1\335\3\273"+
    "\2\336\1\u0112\1\340\65\273\1\373\2\273\14\373\1\274"+
    "\1\u0113\1\376\65\373\1\u0114\16\373\1\375\65\373\1\273"+
    "\2\335\6\273\1\335\3\273\2\336\1\337\1\u0115\66\273"+
    "\2\335\6\273\1\335\3\273\2\336\1\337\1\u0116\65\273"+
    "\4\0\5\14\2\0\4\14\3\0\6\14\1\0\2\14"+
    "\1\0\1\14\26\0\1\u0117\22\14\4\0\5\14\2\0"+
    "\4\14\3\0\6\14\1\0\2\14\1\0\1\14\26\0"+
    "\11\14\1\u0118\11\14\1\0\2\221\6\0\1\221\3\0"+
    "\2\222\1\u010b\1\117\66\0\2\221\6\0\1\221\3\0"+
    "\2\222\1\u010f\1\117\65\0\1\266\2\325\6\266\1\u0119"+
    "\3\266\2\u011a\1\u010b\1\u011b\1\271\64\266\1\364\2\267"+
    "\14\364\1\u011c\1\270\1\367\64\364\1\u011d\2\u011e\14\u011d"+
    "\1\u011f\1\u0120\1\u0121\64\u011d\1\364\1\267\15\364\1\365"+
    "\1\270\1\367\64\364\1\122\2\221\6\122\1\u0122\3\122"+
    "\2\u0123\1\u0124\1\u0125\1\124\64\122\1\0\2\221\6\0"+
    "\1\221\3\0\2\222\1\116\1\u0115\66\0\2\221\6\0"+
    "\1\221\3\0\2\222\1\116\1\u0116\65\0\1\u0126\2\u011e"+
    "\14\u0126\1\u0120\1\u0127\1\u0128\64\u0126\1\373\2\273\14\373"+
    "\1\274\1\u0129\1\376\65\373\1\273\15\373\1\274\1\375"+
    "\1\376\64\373\1\272\2\335\6\272\1\u012a\3\272\2\u012b"+
    "\1\u012c\1\u0115\1\275\64\272\1\125\2\221\6\125\1\u012d"+
    "\3\125\2\u012e\1\u012f\1\u0130\1\127\64\125\4\0\5\14"+
    "\2\0\4\14\3\0\6\14\1\0\2\14\1\0\1\14"+
    "\26\0\7\14\1\u0131\13\14\4\0\5\14\2\0\4\14"+
    "\3\0\6\14\1\0\1\u0132\1\14\1\0\1\14\26\0"+
    "\23\14\1\266\2\267\14\266\1\u010b\1\u011b\1\271\64\266"+
    "\1\u0133\2\267\14\u0133\1\u0134\1\u0135\1\u0136\64\u0133\1\125"+
    "\2\221\6\125\1\u012d\3\125\2\u012e\1\u0137\1\u0116\1\127"+
    "\64\125\1\u011d\2\u011e\14\u011d\1\u011f\1\u0138\1\u0121\64\u011d"+
    "\17\u011e\1\u0139\1\u013a\65\u011e\1\u011d\2\u011e\14\u011d\1\u013b"+
    "\1\u0138\1\u0121\64\u011d\1\u011e\2\u013c\6\u011e\1\u013c\3\u011e"+
    "\2\u013d\1\u013e\1\u013f\65\u011e\1\u011d\1\u0140\15\u011d\1\u011f"+
    "\1\u0141\65\u011d\1\122\2\221\6\122\1\u0122\3\122\2\u0123"+
    "\1\u010f\1\u0125\1\124\65\122\2\0\14\122\1\u010f\1\u0125"+
    "\1\124\65\122\2\221\6\122\1\u0122\3\122\2\u0123\1\u010b"+
    "\1\u0125\1\124\64\122\1\u0142\2\0\14\u0142\1\u0143\1\u0144"+
    "\1\u0145\64\u0142\1\u0126\2\u011e\14\u0126\1\u0146\1\u0127\1\u0128"+
    "\65\u0126\2\u011e\14\u0126\1\u0146\1\u0147\1\u0128\65\u0126\1\u0148"+
    "\15\u0126\1\u0149\1\u0127\65\u0126\1\122\2\221\6\122\1\u0122"+
    "\3\122\2\u0123\1\u010f\1\u014a\1\124\64\122\1\272\2\273"+
    "\14\272\1\u012c\1\u0115\1\275\64\272\1\u014b\2\273\14\u014b"+
    "\1\u014c\1\u014d\1\u014e\64\u014b\1\125\2\221\6\125\1\u012d"+
    "\3\125\2\u012e\1\u012f\1\u0116\1\127\65\125\2\0\14\125"+
    "\1\u012f\1\u0116\1\127\64\125\1\u0142\2\0\14\u0142\1\u014f"+
    "\1\u0150\1\u0145\64\u0142\1\125\2\221\6\125\1\u012d\3\125"+
    "\2\u012e\1\u012f\1\u0115\1\127\64\125\1\u0133\2\267\14\u0133"+
    "\1\u0134\1\u010b\1\u0136\64\u0133\1\364\2\325\6\364\1\u0151"+
    "\3\364\2\u0152\1\u0153\1\u0154\1\367\64\364\1\266\2\325"+
    "\6\266\1\u0119\3\266\2\u011a\1\u010b\1\u0155\1\271\64\266"+
    "\1\u0133\1\u0156\15\u0133\1\u0157\66\u0133\1\u0142\2\221\6\u0142"+
    "\1\u0158\3\u0142\2\u0159\1\u015a\1\u014a\1\u0145\64\u0142\1\u011e"+
    "\2\u013c\6\u011e\1\u013c\3\u011e\2\u013d\1\u013e\1\u015b\104\u011e"+
    "\1\u015c\1\u013a\104\u011e\1\u0139\1\u015d\65\u011e\1\u011d\2\u011e"+
    "\14\u011d\1\u015e\1\u0138\1\u0121\64\u011d\17\u011e\1\u013e\1\u013f"+
    "\65\u011e\1\u0126\2\u011e\14\u0126\1\u015f\1\u0127\1\u0128\64\u0126"+
    "\1\u011d\2\u011e\14\u011d\1\u011f\1\u0160\1\u0121\65\u011d\1\u011e"+
    "\15\u011d\1\u011f\1\u0138\1\u0121\65\u011d\2\u011e\14\u011d\1\u011f"+
    "\1\u0161\1\u0121\64\u011d\1\u0142\2\0\14\u0142\1\u0143\1\u0150"+
    "\1\u0145\64\u0142\1\122\2\221\6\122\1\u0122\3\122\2\u0123"+
    "\1\u010f\1\u0162\1\124\64\122\1\u0142\1\u0163\104\u0142\1\u011e"+
    "\2\u013c\6\u011e\1\u013c\3\u011e\2\u013d\1\u0164\1\u013f\65\u011e"+
    "\1\u0126\2\u011e\14\u0126\1\u0146\1\u0165\1\u0128\65\u0126\1\u011e"+
    "\15\u0126\1\u0146\1\u0127\1\u0128\65\u0126\2\u011e\14\u0126\1\u0166"+
    "\1\u0127\1\u0128\64\u0126\1\u0142\2\221\6\u0142\1\u0158\3\u0142"+
    "\2\u0159\1\u0137\1\u0167\1\u0145\64\u0142\1\u014b\2\273\14\u014b"+
    "\1\u0115\1\u014d\1\u014e\64\u014b\1\272\2\335\6\272\1\u012a"+
    "\3\272\2\u012b\1\u0168\1\u0115\1\275\64\272\1\373\2\335"+
    "\6\373\1\u0169\3\373\2\u016a\1\u016b\1\u016c\1\376\64\373"+
    "\1\u014b\1\u016d\16\u014b\1\u016e\65\u014b\1\125\2\221\6\125"+
    "\1\u012d\3\125\2\u012e\1\u016f\1\u0116\1\127\64\125\1\364"+
    "\2\325\6\364\1\u0151\3\364\2\u0152\1\u0170\1\u0154\1\367"+
    "\65\364\2\267\14\364\1\u0170\1\u0154\1\367\64\364\1\u0133"+
    "\2\267\14\u0133\1\u0171\1\u010b\1\u0136\64\u0133\1\364\2\325"+
    "\6\364\1\u0151\3\364\2\u0152\1\u0170\1\u0172\1\367\64\364"+
    "\1\u0173\2\u011e\14\u0173\1\u0174\1\u0175\1\u0176\64\u0173\1\u0133"+
    "\1\267\15\u0133\1\u0134\1\u010b\1\u0136\65\u0133\2\267\14\u0133"+
    "\1\u0177\1\u010b\1\u0136\64\u0133\1\u0142\2\221\6\u0142\1\u0158"+
    "\3\u0142\2\u0159\1\u0137\1\u014a\1\u0145\65\u0142\2\0\14\u0142"+
    "\1\u0137\1\u014a\1\u0145\65\u0142\2\221\6\u0142\1\u0158\3\u0142"+
    "\2\u0159\1\u0178\1\u014a\1\u0145\64\u0142\1\u011d\2\u011e\14\u011d"+
    "\1\u011f\1\u0179\1\u0121\64\u011d\17\u011e\1\u017a\1\u013a\104\u011e"+
    "\1\u0139\1\u017b\65\u011e\1\272\2\335\6\272\1\u012a\3\272"+
    "\2\u012b\1\u017c\1\u0115\1\275\64\272\1\u011e\2\u013c\6\u011e"+
    "\1\u013c\3\u011e\2\u013d\1\u0175\1\u013f\66\u011e\2\u013c\6\u011e"+
    "\1\u013c\3\u011e\2\u013d\1\u013e\1\u017d\66\u011e\2\u013c\6\u011e"+
    "\1\u013c\3\u011e\2\u013d\1\u013e\1\u0154\65\u011e\1\u014b\2\273"+
    "\14\u014b\1\u0115\1\u017e\1\u014e\64\u014b\1\u0142\1\0\15\u0142"+
    "\1\u0143\1\u0150\1\u0145\64\u0142\1\u0126\2\u011e\14\u0126\1\u017f"+
    "\1\u0127\1\u0128\64\u0126\1\266\2\325\6\266\1\u0119\3\266"+
    "\2\u011a\1\u010b\1\u0180\1\271\64\266\1\u011e\2\u013c\6\u011e"+
    "\1\u013c\3\u011e\2\u013d\1\u016b\1\u013f\65\u011e\1\u0142\2\221"+
    "\6\u0142\1\u0158\3\u0142\2\u0159\1\u0137\1\u0181\1\u0145\64\u0142"+
    "\1\u0173\2\u011e\14\u0173\1\u017d\1\u0182\1\u0176\64\u0173\1\373"+
    "\2\335\6\373\1\u0169\3\373\2\u016a\1\u016b\1\u0183\1\376"+
    "\65\373\2\273\14\373\1\u016b\1\u0183\1\376\65\373\2\335"+
    "\6\373\1\u0169\3\373\2\u016a\1\u0184\1\u0183\1\376\64\373"+
    "\1\u014b\2\273\14\u014b\1\u0115\1\u0185\1\u014e\65\u014b\1\273"+
    "\15\u014b\1\u0115\1\u014d\1\u014e\65\u014b\2\273\14\u014b\1\u0115"+
    "\1\u0186\1\u014e\64\u014b\1\u0133\2\267\14\u0133\1\u0187\1\u010b"+
    "\1\u0136\65\u0133\2\267\14\u0133\1\u0188\1\u010b\1\u0136\64\u0133"+
    "\1\125\2\221\6\125\1\u012d\3\125\2\u012e\1\u0178\1\u0116"+
    "\1\127\64\125\1\364\2\325\6\364\1\u0151\3\364\2\u0152"+
    "\1\u0170\1\u017d\1\367\64\364\1\u0173\2\u011e\14\u0173\1\u0174"+
    "\1\u0182\1\u0176\64\u0173\1\u011d\2\u013c\6\u011d\1\u0189\3\u011d"+
    "\2\u018a\1\u018b\1\u017d\1\u0121\64\u011d\1\u0126\2\u013c\6\u0126"+
    "\1\u018c\3\u0126\2\u018d\1\u0175\1\u018e\1\u0128\64\u0126\1\u0173"+
    "\1\u018f\15\u0173\1\u0190\1\u0191\65\u0173\1\364\2\325\6\364"+
    "\1\u0151\3\364\2\u0152\1\u0137\1\u0154\1\367\64\364\1\u0133"+
    "\2\325\6\u0133\1\u0192\3\u0133\2\u0193\1\u0178\1\u0180\1\u0136"+
    "\64\u0133\1\267\2\325\6\267\1\325\3\267\2\326\1\327"+
    "\1\u017d\65\267\1\273\2\335\6\273\1\335\3\273\2\336"+
    "\1\u016b\1\340\65\273\1\267\2\325\6\267\1\325\3\267"+
    "\2\326\1\327\1\u0154\65\267\1\u014b\2\335\6\u014b\1\u0194"+
    "\3\u014b\2\u0195\1\u0196\1\u0181\1\u014e\64\u014b\1\u011d\2\u013c"+
    "\6\u011d\1\u0189\3\u011d\2\u018a\1\u0197\1\u017d\1\u0121\64\u011d"+
    "\1\273\2\335\6\273\1\335\3\273\2\336\1\u0175\1\340"+
    "\65\273\1\u0133\2\325\6\u0133\1\u0192\3\u0133\2\u0193\1\u0178"+
    "\1\u0198\1\u0136\64\u0133\1\u014b\2\335\6\u014b\1\u0194\3\u014b"+
    "\2\u0195\1\u017c\1\u0181\1\u014e\64\u014b\1\u0126\2\u013c\6\u0126"+
    "\1\u018c\3\u0126\2\u018d\1\u0175\1\u0199\1\u0128\64\u0126\1\u014b"+
    "\2\273\14\u014b\1\u0115\1\u019a\1\u014e\64\u014b\1\373\2\335"+
    "\6\373\1\u0169\3\373\2\u016a\1\u0175\1\u0183\1\376\64\373"+
    "\1\122\2\221\6\122\1\u0122\3\122\2\u0123\1\u010f\1\u0181"+
    "\1\124\64\122\1\373\2\335\6\373\1\u0169\3\373\2\u016a"+
    "\1\u016b\1\u014a\1\376\64\373\1\364\2\325\6\364\1\u0151"+
    "\3\364\2\u0152\1\u0178\1\u0154\1\367\64\364\1\u011d\2\u011e"+
    "\14\u011d\1\u0197\1\u017d\1\u0121\64\u011d\1\u0173\2\u011e\14\u0173"+
    "\1\u019b\1\u0182\1\u0176\64\u0173\1\u0126\2\u011e\14\u0126\1\u0175"+
    "\1\u018e\1\u0128\64\u0126\1\u0173\2\u011e\14\u0173\1\u0174\1\u019c"+
    "\1\u0176\65\u0173\1\u011e\15\u0173\1\u0174\1\u0182\1\u0176\65\u0173"+
    "\2\u011e\14\u0173\1\u019d\1\u0182\1\u0176\65\u0173\2\u011e\14\u0173"+
    "\1\u0174\1\u019e\1\u0176\64\u0173\1\u0133\2\267\14\u0133\1\u0178"+
    "\1\u0180\1\u0136\64\u0133\1\u014b\2\273\14\u014b\1\u017c\1\u0181"+
    "\1\u014e\65\u014b\2\335\6\u014b\1\u0194\3\u014b\2\u0195\1\u019f"+
    "\1\u0181\1\u014e\64\u014b\1\u0173\2\u011e\14\u0173\1\u01a0\1\u0182"+
    "\1\u0176\64\u0173\1\u0133\2\325\6\u0133\1\u0192\3\u0133\2\u0193"+
    "\1\u0178\1\u019f\1\u0136\64\u0133\1\u0173\2\u011e\14\u0173\1\u0174"+
    "\1\u01a1\1\u0176\64\u0173\1\373\2\335\6\373\1\u0169\3\373"+
    "\2\u016a\1\u016b\1\u0181\1\376\64\373\1\272\2\335\6\272"+
    "\1\u012a\3\272\2\u012b\1\u019f\1\u0115\1\275\64\272\1\u0126"+
    "\2\u013c\6\u0126\1\u018c\3\u0126\2\u018d\1\u0175\1\u019f\1\u0128"+
    "\64\u0126\1\u011d\2\u013c\6\u011d\1\u0189\3\u011d\2\u018a\1\u017c"+
    "\1\u017d\1\u0121\64\u011d\1\u0126\2\u013c\6\u0126\1\u018c\3\u0126"+
    "\2\u018d\1\u0175\1\u0180\1\u0128\64\u0126\1\u0173\2\u013c\6\u0173"+
    "\1\u01a2\3\u0173\2\u01a3\2\u019f\1\u0176\64\u0173\1\u011d\2\u013c"+
    "\6\u011d\1\u0189\3\u011d\2\u018a\1\u019f\1\u017d\1\u0121\64\u011d"+
    "\1\266\2\325\6\266\1\u0119\3\266\2\u011a\1\u010b\1\u019f"+
    "\1\271\64\266\1\u0173\2\u011e\14\u0173\2\u019f\1\u0176\64\u0173";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23030];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\6\1\1\11\13\1\6\11\1\1\4\11"+
    "\11\1\1\11\21\1\3\11\1\0\1\1\1\11\1\1"+
    "\4\0\1\1\1\0\1\11\3\1\2\0\2\1\1\0"+
    "\1\1\2\0\1\1\1\0\2\1\1\0\4\1\4\11"+
    "\1\1\1\11\1\1\5\11\1\1\1\11\1\1\1\11"+
    "\24\1\1\11\1\0\1\11\4\1\1\0\6\1\6\0"+
    "\4\1\4\11\27\1\2\0\1\1\3\0\1\1\1\0"+
    "\26\1\7\0\1\1\7\0\16\1\2\0\1\1\2\0"+
    "\1\1\1\0\1\1\3\0\1\1\2\0\15\1\3\0"+
    "\3\1\3\0\4\1\3\0\1\1\3\0\1\1\3\0"+
    "\1\1\4\0\1\1\6\0\3\1\1\0\2\1\1\0"+
    "\2\1\12\0\2\1\1\0\1\1\3\0\1\1\1\0"+
    "\2\1\1\0\2\1\3\0\1\1\5\0\1\1\3\0"+
    "\4\1\3\0\3\1\3\0\1\1\5\0\2\1\1\0"+
    "\2\1\1\0\14\1\1\0\5\1\15\0\1\1\1\0"+
    "\1\1\1\0\10\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  private StringBuilder string = new StringBuilder();

  private String originId;
  
  private Stack<Integer> indent = new Stack<Integer>();
  private Stack<ETokenType> brackets = new Stack<ETokenType>();
  
  private static final int TAB_LENGTH = 8;
  
  PythonToken lastToken = null;
  
   /** this is used for the strange quoted-syntax for strings. */
  char stringTerminator;
  
  private static final EnumMap<ETokenType,ETokenType> bracketMap = new EnumMap<ETokenType,ETokenType>(ETokenType.class);
  
  static {
  	bracketMap.put(LBRACE,RBRACE);
  	bracketMap.put(LPAREN,RPAREN);
  	bracketMap.put(LBRACK,RBRACK);
  }
  
  /** Resets scanner */    
  public void reset(java.io.Reader reader, String originId) {
    this.originId=originId;
    yyreset(reader);
  }
  
  /** {@inheritDoc} */
  @Override
  public void close() throws java.io.IOException {
    yyclose();
  }
  
  private PythonToken token(ETokenType type) {
  	return token(type, yyline, yychar);
  }
  
  private PythonToken token(ETokenType type, int line, int offset) {
	lastToken = new PythonToken(type, offset, line, yytext(), originId);
  	return lastToken;
  }
  
  private PythonToken emptyToken(ETokenType type) {
	  lastToken = new PythonToken(type, yychar, yyline, StringUtils.EMPTY_STRING, originId);
	  return lastToken;
  }
  
  private ETokenType openBracket(ETokenType type){
  	 brackets.push(type);
  	 yybegin(IMPLICIT_LINE_JOIN); 
  	 return type;
  } 
  
  private ETokenType closeBracket(ETokenType type) {
    if (brackets.isEmpty()){
    	return BRACKET_MISMATCH;
    }
    //must check against specific bracket
    ETokenType bracket = brackets.pop();
    
    CCSMAssert.isTrue(bracketMap.containsKey(bracket),
				"The stack really shouldn't contain anything "
						+ "that is not in the map.");
            
    if (bracketMap.get(bracket) != type){
    	return BRACKET_MISMATCH;
    }
  	if (brackets.isEmpty()){
  		yybegin(YYINITIAL); 
  	}
  	return type;
  }

  /** Calculate the indentation level */
  private int calculateIndent(String text) {
	  int spaces = 0;
	  for(int i = 0; i < text.length(); i++) {
	      if(text.charAt(i) == '\t') {
	    	  spaces = spaces + TAB_LENGTH;
	          spaces = spaces - (spaces % TAB_LENGTH);
	      } else if (text.charAt(i) == ' ') {
	    	  spaces++;
	      }
	  }
	  return spaces;
  }
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PythonScanner(java.io.Reader in, String originId) {
  	this.originId = originId;
	indent.push(0);
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  PythonScanner(java.io.InputStream in, String originId) {
    this(new java.io.InputStreamReader(in), originId);
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2656) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public PythonToken internalScan() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 67: 
          { return token(TRY);
          }
        case 90: break;
        case 6: 
          { /* ignore single indent */
          }
        case 91: break;
        case 75: 
          { return token(RAISE);
          }
        case 92: break;
        case 17: 
          { return token(SEMICOLON);
          }
        case 93: break;
        case 66: 
          { return token(DEL);
          }
        case 94: break;
        case 52: 
          { return token(NOTEQ);
          }
        case 95: break;
        case 12: 
          { return token(openBracket(LBRACE));
          }
        case 96: break;
        case 8: 
          { return token(DOT);
          }
        case 97: break;
        case 80: 
          { return token(WHILE);
          }
        case 98: break;
        case 29: 
          { return token(GT);
          }
        case 99: break;
        case 39: 
          { return token(PLUSEQ);
          }
        case 100: break;
        case 41: 
          { return token(POWER);
          }
        case 101: break;
        case 10: 
          { return token(openBracket(LPAREN));
          }
        case 102: break;
        case 25: 
          { return token(AND);
          }
        case 103: break;
        case 18: 
          { return token(COMMA);
          }
        case 104: break;
        case 16: 
          { return token(EQ);
          }
        case 105: break;
        case 4: 
          { return token(INTEGER_LITERAL);
          }
        case 106: break;
        case 89: 
          { return token(CONTINUE);
          }
        case 107: break;
        case 2: 
          { return token(EOL);
          }
        case 108: break;
        case 81: 
          { return token(RETURN);
          }
        case 109: break;
        case 34: 
          { return token(FLOATING_POINT_LITERAL);
          }
        case 110: break;
        case 56: 
          { return token(IS);
          }
        case 111: break;
        case 86: 
          { return token(GLOBAL);
          }
        case 112: break;
        case 7: 
          { yyline -= 1;
          }
        case 113: break;
        case 64: 
          { return token(NOT);
          }
        case 114: break;
        case 68: 
          { return token(FROM);
          }
        case 115: break;
        case 28: 
          { return token(LT);
          }
        case 116: break;
        case 46: 
          { return token(OREQ);
          }
        case 117: break;
        case 14: 
          { return token(openBracket(LBRACK));
          }
        case 118: break;
        case 70: 
          { return token(ELIF);
          }
        case 119: break;
        case 72: 
          { return token(NONE);
          }
        case 120: break;
        case 65: 
          { return token(DEF);
          }
        case 121: break;
        case 43: 
          { return token(FLOOR_DIV);
          }
        case 122: break;
        case 35: 
          { return token(IMAGINARY_LITERAL);
          }
        case 123: break;
        case 87: 
          { return token(FINALLY);
          }
        case 124: break;
        case 45: 
          { return token(ANDEQ);
          }
        case 125: break;
        case 55: 
          { return token(IN);
          }
        case 126: break;
        case 44: 
          { return token(MODEQ);
          }
        case 127: break;
        case 26: 
          { return token(OR);
          }
        case 128: break;
        case 33: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { return token(END_OF_LINE_COMMENT);
          }
        case 129: break;
        case 3: 
          { return token(END_OF_LINE_COMMENT);
          }
        case 130: break;
        case 58: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { return token(END_OF_LINE_COMMENT);
          }
        case 131: break;
        case 27: 
          { return token(XOR);
          }
        case 132: break;
        case 83: 
          { return token(ASSERT);
          }
        case 133: break;
        case 48: 
          { return token(LTEQ);
          }
        case 134: break;
        case 37: 
          { return token(MINUSEQ);
          }
        case 135: break;
        case 13: 
          { return token(closeBracket(RBRACE));
          }
        case 136: break;
        case 22: 
          { return token(MULT);
          }
        case 137: break;
        case 57: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { int indentDepth = calculateIndent(yytext());
         int maxIndentDepth = indent.peek();
         
         if (indentDepth > maxIndentDepth) {
         	indent.push(indentDepth); 	
         	return emptyToken(INDENT);
         }
         
         if (indentDepth < maxIndentDepth) {
         	int index = indent.search(indentDepth);
         	if (index < 0){
         		return emptyToken(INVALID_DEDENT);
         	}
         	//start from 1 as Stack.search returns a one-based index
         	for (int i = 1; i < index; i++) {
         		indent.pop();
         		//we need to push one less as this method already returns one
         		if (i < index - 1) {
         			pushToken(emptyToken(DEDENT));
         		}
         	}
         	return emptyToken(DEDENT);
        }
          }
        case 138: break;
        case 32: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { while(indent.size() > 1) {
      		indent.pop();      		
      		pushToken(emptyToken(DEDENT));
         }
         return token(EOL);
          }
        case 139: break;
        case 77: 
          { return token(CLASS);
          }
        case 140: break;
        case 40: 
          { return token(MULTEQ);
          }
        case 141: break;
        case 42: 
          { return token(DIVEQ);
          }
        case 142: break;
        case 1: 
          { return token(ILLEGAL_CHARACTER);
          }
        case 143: break;
        case 69: 
          { return token(ELSE);
          }
        case 144: break;
        case 11: 
          { return token(closeBracket(RPAREN));
          }
        case 145: break;
        case 61: 
          { return token(FLOOR_DIVEQ);
          }
        case 146: break;
        case 5: 
          { return token(IDENTIFIER);
          }
        case 147: break;
        case 62: 
          { return token(LSHIFTEQ);
          }
        case 148: break;
        case 54: 
          { return token(IF);
          }
        case 149: break;
        case 15: 
          { return token(closeBracket(RBRACK));
          }
        case 150: break;
        case 50: 
          { return token(GTEQ);
          }
        case 151: break;
        case 76: 
          { return token(BREAK);
          }
        case 152: break;
        case 88: 
          { return token(NONLOCAL);
          }
        case 153: break;
        case 51: 
          { return token(RSHIFT);
          }
        case 154: break;
        case 78: 
          { return token(FALSE);
          }
        case 155: break;
        case 84: 
          { return token(LAMBDA);
          }
        case 156: break;
        case 79: 
          { return token(YIELD);
          }
        case 157: break;
        case 60: 
          { return token(POWEREQ);
          }
        case 158: break;
        case 47: 
          { return token(XOREQ);
          }
        case 159: break;
        case 63: 
          { return token(RSHIFTEQ);
          }
        case 160: break;
        case 59: 
          { return token(FOR);
          }
        case 161: break;
        case 73: 
          { return token(TRUE);
          }
        case 162: break;
        case 30: 
          { return token(BIT_NOT);
          }
        case 163: break;
        case 82: 
          { return token(EXCEPT);
          }
        case 164: break;
        case 49: 
          { return token(LSHIFT);
          }
        case 165: break;
        case 31: 
          { /* ignore */
          }
        case 166: break;
        case 85: 
          { return token(IMPORT);
          }
        case 167: break;
        case 38: 
          { return token(EQEQ);
          }
        case 168: break;
        case 74: 
          { return token(WITH);
          }
        case 169: break;
        case 23: 
          { return token(DIV);
          }
        case 170: break;
        case 9: 
          { return token(MINUS);
          }
        case 171: break;
        case 21: 
          { return token(PLUS);
          }
        case 172: break;
        case 24: 
          { return token(MOD);
          }
        case 173: break;
        case 71: 
          { return token(PASS);
          }
        case 174: break;
        case 20: 
          { return token(AT);
          }
        case 175: break;
        case 36: 
          { return token(STRING_LITERAL);
          }
        case 176: break;
        case 19: 
          { return token(COLON);
          }
        case 177: break;
        case 53: 
          { return token(AS);
          }
        case 178: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                if(lastToken != null && !lastToken.getType().equals(EOL) && !lastToken.getType().equals(DEDENT)) {
			return token(EOL, lastToken.getLineNumber(), lastToken.getEndOffset()+1);
		}
		// clear stack 
		if (indent.size() > 1){
			indent.pop();
			return emptyToken(DEDENT);
		}
		return token(EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
