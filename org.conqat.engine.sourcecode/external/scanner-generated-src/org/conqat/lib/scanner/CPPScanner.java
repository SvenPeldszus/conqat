/* The following code was generated by JFlex 1.4.2 on {{TIMESTAMP}} */


/* This scanner grammar is based on the Java scanner grammar.
   It is a quick hack and far from correct. */

package org.conqat.lib.scanner;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on {{TIMESTAMP}} from the specification file
 * <tt>/home/freakout/cqse/repositories/conqat/trunk/lib/org.conqat.lib.scanner/grammars/cpp.flex</tt>
 */
class CPPScanner extends QueuedScannerBase<CPPToken> {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PREPROCESSOR_IGNORE_IF_NULL = 8;
  public static final int STRING = 2;
  public static final int CHAR_IN_PREPROCESSOR = 14;
  public static final int BACKTICK_STRING = 6;
  public static final int YYINITIAL = 0;
  public static final int PREPROCESSOR_DIRECTIVE = 10;
  public static final int STRING_IN_PREPROCESSOR = 12;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\30\1\5\1\2\1\0\1\6\1\1\16\30\4\0\1\4\1\12"+
    "\1\26\1\7\1\27\1\106\1\103\1\44\1\66\1\67\1\11\1\43"+
    "\1\75\1\76\1\41\1\10\1\15\1\36\2\35\4\37\2\31\1\102"+
    "\1\74\1\24\1\77\1\25\1\101\1\45\3\34\1\40\1\42\1\40"+
    "\5\27\1\32\10\27\1\32\2\27\1\33\2\27\1\72\1\3\1\73"+
    "\1\105\1\27\1\107\1\46\1\52\1\17\1\22\1\23\1\14\1\60"+
    "\1\55\1\13\1\27\1\53\1\20\1\56\1\16\1\51\1\62\1\27"+
    "\1\47\1\54\1\50\1\21\1\63\1\61\1\57\1\65\1\64\1\70"+
    "\1\104\1\71\1\100\41\30\2\0\4\27\4\0\1\27\2\0\1\30"+
    "\7\0\1\27\4\0\1\27\5\0\27\27\1\0\37\27\1\0\u01ca\27"+
    "\4\0\14\27\16\0\5\27\7\0\1\27\1\0\1\27\21\0\160\30"+
    "\5\27\1\0\2\27\2\0\4\27\10\0\1\27\1\0\3\27\1\0"+
    "\1\27\1\0\24\27\1\0\123\27\1\0\213\27\1\0\5\30\2\0"+
    "\236\27\11\0\46\27\2\0\1\27\7\0\47\27\11\0\55\30\1\0"+
    "\1\30\1\0\2\30\1\0\2\30\1\0\1\30\10\0\33\27\5\0"+
    "\3\27\15\0\4\30\7\0\1\27\4\0\13\30\5\0\53\27\37\30"+
    "\4\0\2\27\1\30\143\27\1\0\1\27\10\30\1\0\6\30\2\27"+
    "\2\30\1\0\4\30\2\27\12\30\3\27\2\0\1\27\17\0\1\30"+
    "\1\27\1\30\36\27\33\30\2\0\131\27\13\30\1\27\16\0\12\30"+
    "\41\27\11\30\2\27\4\0\1\27\5\0\26\27\4\30\1\27\11\30"+
    "\1\27\3\30\1\27\5\30\22\0\31\27\3\30\244\0\4\30\66\27"+
    "\3\30\1\27\22\30\1\27\7\30\12\27\2\30\2\0\12\30\1\0"+
    "\7\27\1\0\7\27\1\0\3\30\1\0\10\27\2\0\2\27\2\0"+
    "\26\27\1\0\7\27\1\0\1\27\3\0\4\27\2\0\1\30\1\27"+
    "\7\30\2\0\2\30\2\0\3\30\1\27\10\0\1\30\4\0\2\27"+
    "\1\0\3\27\2\30\2\0\12\30\4\27\7\0\1\27\5\0\3\30"+
    "\1\0\6\27\4\0\2\27\2\0\26\27\1\0\7\27\1\0\2\27"+
    "\1\0\2\27\1\0\2\27\2\0\1\30\1\0\5\30\4\0\2\30"+
    "\2\0\3\30\3\0\1\30\7\0\4\27\1\0\1\27\7\0\14\30"+
    "\3\27\1\30\13\0\3\30\1\0\11\27\1\0\3\27\1\0\26\27"+
    "\1\0\7\27\1\0\2\27\1\0\5\27\2\0\1\30\1\27\10\30"+
    "\1\0\3\30\1\0\3\30\2\0\1\27\17\0\2\27\2\30\2\0"+
    "\12\30\1\0\1\27\17\0\3\30\1\0\10\27\2\0\2\27\2\0"+
    "\26\27\1\0\7\27\1\0\2\27\1\0\5\27\2\0\1\30\1\27"+
    "\7\30\2\0\2\30\2\0\3\30\10\0\2\30\4\0\2\27\1\0"+
    "\3\27\2\30\2\0\12\30\1\0\1\27\20\0\1\30\1\27\1\0"+
    "\6\27\3\0\3\27\1\0\4\27\3\0\2\27\1\0\1\27\1\0"+
    "\2\27\3\0\2\27\3\0\3\27\3\0\14\27\4\0\5\30\3\0"+
    "\3\30\1\0\4\30\2\0\1\27\6\0\1\30\16\0\12\30\11\0"+
    "\1\27\7\0\3\30\1\0\10\27\1\0\3\27\1\0\27\27\1\0"+
    "\12\27\1\0\5\27\3\0\1\27\7\30\1\0\3\30\1\0\4\30"+
    "\7\0\2\30\1\0\2\27\6\0\2\27\2\30\2\0\12\30\22\0"+
    "\2\30\1\0\10\27\1\0\3\27\1\0\27\27\1\0\12\27\1\0"+
    "\5\27\2\0\1\30\1\27\7\30\1\0\3\30\1\0\4\30\7\0"+
    "\2\30\7\0\1\27\1\0\2\27\2\30\2\0\12\30\1\0\2\27"+
    "\17\0\2\30\1\0\10\27\1\0\3\27\1\0\51\27\2\0\1\27"+
    "\7\30\1\0\3\30\1\0\4\30\1\27\10\0\1\30\10\0\2\27"+
    "\2\30\2\0\12\30\12\0\6\27\2\0\2\30\1\0\22\27\3\0"+
    "\30\27\1\0\11\27\1\0\1\27\2\0\7\27\3\0\1\30\4\0"+
    "\6\30\1\0\1\30\1\0\10\30\22\0\2\30\15\0\60\27\1\30"+
    "\2\27\7\30\4\0\10\27\10\30\1\0\12\30\47\0\2\27\1\0"+
    "\1\27\2\0\2\27\1\0\1\27\2\0\1\27\6\0\4\27\1\0"+
    "\7\27\1\0\3\27\1\0\1\27\1\0\1\27\2\0\2\27\1\0"+
    "\4\27\1\30\2\27\6\30\1\0\2\30\1\27\2\0\5\27\1\0"+
    "\1\27\1\0\6\30\2\0\12\30\2\0\2\27\42\0\1\27\27\0"+
    "\2\30\6\0\12\30\13\0\1\30\1\0\1\30\1\0\1\30\4\0"+
    "\2\30\10\27\1\0\44\27\4\0\24\30\1\0\2\30\5\27\13\30"+
    "\1\0\44\30\11\0\1\30\71\0\53\27\24\30\1\27\12\30\6\0"+
    "\6\27\4\30\4\27\3\30\1\27\3\30\2\27\7\30\3\27\4\30"+
    "\15\27\14\30\1\27\17\30\2\0\46\27\12\0\53\27\1\0\1\27"+
    "\3\0\u0149\27\1\0\4\27\2\0\7\27\1\0\1\27\1\0\4\27"+
    "\2\0\51\27\1\0\4\27\2\0\41\27\1\0\4\27\2\0\7\27"+
    "\1\0\1\27\1\0\4\27\2\0\17\27\1\0\71\27\1\0\4\27"+
    "\2\0\103\27\2\0\3\30\40\0\20\27\20\0\125\27\14\0\u026c\27"+
    "\2\0\21\27\1\0\32\27\5\0\113\27\3\0\3\27\17\0\15\27"+
    "\1\0\4\27\3\30\13\0\22\27\3\30\13\0\22\27\2\30\14\0"+
    "\15\27\1\0\3\27\1\0\2\30\14\0\64\27\40\30\3\0\1\27"+
    "\3\0\2\27\1\30\2\0\12\30\41\0\3\30\2\0\12\30\6\0"+
    "\130\27\10\0\51\27\1\30\1\27\5\0\106\27\12\0\35\27\3\0"+
    "\14\30\4\0\14\30\12\0\12\30\36\27\2\0\5\27\13\0\54\27"+
    "\4\0\21\30\7\27\2\30\6\0\12\30\46\0\27\27\5\30\4\0"+
    "\65\27\12\30\1\0\35\30\2\0\13\30\6\0\12\30\15\0\1\27"+
    "\130\0\5\30\57\27\21\30\7\27\4\0\12\30\21\0\11\30\14\0"+
    "\3\30\36\27\12\30\3\0\2\27\12\30\6\0\46\27\16\30\14\0"+
    "\44\27\24\30\10\0\12\30\3\0\3\27\12\30\44\27\122\0\3\30"+
    "\1\0\25\30\4\27\1\30\4\27\1\30\15\0\300\27\47\30\25\0"+
    "\4\30\u0116\27\2\0\6\27\2\0\46\27\2\0\6\27\2\0\10\27"+
    "\1\0\1\27\1\0\1\27\1\0\1\27\1\0\37\27\2\0\65\27"+
    "\1\0\7\27\1\0\1\27\3\0\3\27\1\0\7\27\3\0\4\27"+
    "\2\0\6\27\4\0\15\27\5\0\3\27\1\0\7\27\16\0\5\30"+
    "\32\0\5\30\20\0\2\27\23\0\1\27\13\0\5\30\5\0\6\30"+
    "\1\0\1\27\15\0\1\27\20\0\15\27\3\0\32\27\26\0\15\30"+
    "\4\0\1\30\3\0\14\30\21\0\1\27\4\0\1\27\2\0\12\27"+
    "\1\0\1\27\3\0\5\27\6\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\1\0\13\27\2\0\4\27\5\0\5\27\4\0\1\27"+
    "\21\0\51\27\u0a77\0\57\27\1\0\57\27\1\0\205\27\6\0\4\27"+
    "\3\30\16\0\46\27\12\0\66\27\11\0\1\27\17\0\1\30\27\27"+
    "\11\0\7\27\1\0\7\27\1\0\7\27\1\0\7\27\1\0\7\27"+
    "\1\0\7\27\1\0\7\27\1\0\7\27\1\0\40\30\57\0\1\27"+
    "\u01d5\0\3\27\31\0\11\27\6\30\1\0\5\27\2\0\5\27\4\0"+
    "\126\27\2\0\2\30\2\0\3\27\1\0\132\27\1\0\4\27\5\0"+
    "\51\27\3\0\136\27\21\0\33\27\65\0\20\27\u0200\0\u19b6\27\112\0"+
    "\u51cc\27\64\0\u048d\27\103\0\56\27\2\0\u010d\27\3\0\20\27\12\30"+
    "\2\27\24\0\57\27\1\30\14\0\2\30\1\0\31\27\10\0\120\27"+
    "\2\30\45\0\11\27\2\0\147\27\2\0\4\27\1\0\2\27\16\0"+
    "\12\27\120\0\10\27\1\30\3\27\1\30\4\27\1\30\27\27\5\30"+
    "\20\0\1\27\7\0\64\27\14\0\2\30\62\27\21\30\13\0\12\30"+
    "\6\0\22\30\6\27\3\0\1\27\4\0\12\30\34\27\10\30\2\0"+
    "\27\27\15\30\14\0\35\27\3\0\4\30\57\27\16\30\16\0\1\27"+
    "\12\30\46\0\51\27\16\30\11\0\3\27\1\30\10\27\2\30\2\0"+
    "\12\30\6\0\27\27\3\0\1\27\1\30\4\0\60\27\1\30\1\27"+
    "\3\30\2\27\2\30\5\27\2\30\1\27\1\30\1\27\30\0\3\27"+
    "\43\0\6\27\2\0\6\27\2\0\6\27\11\0\7\27\1\0\7\27"+
    "\221\0\43\27\10\30\1\0\2\30\2\0\12\30\6\0\u2ba4\27\14\0"+
    "\27\27\4\0\61\27\u2104\0\u012e\27\2\0\76\27\2\0\152\27\46\0"+
    "\7\27\14\0\5\27\5\0\1\27\1\30\12\27\1\0\15\27\1\0"+
    "\5\27\1\0\1\27\1\0\2\27\1\0\2\27\1\0\154\27\41\0"+
    "\u016b\27\22\0\100\27\2\0\66\27\50\0\15\27\3\0\20\30\20\0"+
    "\7\30\14\0\2\27\30\0\3\27\31\0\1\27\6\0\5\27\1\0"+
    "\207\27\2\0\1\30\4\0\1\27\13\0\12\30\7\0\32\27\4\0"+
    "\1\27\1\0\32\27\13\0\131\27\3\0\6\27\2\0\6\27\2\0"+
    "\6\27\2\0\3\27\3\0\2\27\3\0\2\27\22\0\3\30\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\2\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\6\2\7\1\10\6\7\1\11\1\12\1\13\1\7"+
    "\1\10\1\14\1\15\1\16\1\17\12\7\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\2\43\1\1\1\44\1\42\2\45\1\1\1\46"+
    "\1\42\2\47\1\50\3\51\2\52\3\51\1\53\1\54"+
    "\1\51\1\55\2\56\4\0\2\2\2\0\1\57\1\0"+
    "\2\60\1\61\1\0\1\62\1\63\1\64\1\65\5\7"+
    "\1\66\2\10\1\0\1\66\1\0\3\10\1\66\12\7"+
    "\1\67\3\7\1\70\1\71\1\72\1\73\1\74\1\0"+
    "\1\75\1\76\2\0\22\7\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\106\1\107\1\110\1\111\5\42"+
    "\4\0\1\51\1\0\1\51\3\0\1\112\1\0\1\2"+
    "\2\0\2\60\2\61\2\0\1\7\1\113\3\7\1\114"+
    "\1\10\1\66\1\0\4\10\1\115\20\7\1\116\1\117"+
    "\1\120\1\121\2\0\6\7\1\122\23\7\1\123\1\42"+
    "\4\0\2\112\4\0\1\124\1\60\2\0\1\125\3\7"+
    "\3\10\3\7\1\126\2\7\1\127\1\130\6\7\1\131"+
    "\1\132\1\7\1\133\1\134\1\0\1\135\4\7\1\136"+
    "\1\137\12\7\1\140\5\7\1\141\1\7\3\0\1\142"+
    "\1\124\1\60\1\0\1\7\1\143\1\7\3\10\1\7"+
    "\1\144\1\145\1\7\1\146\1\147\1\7\1\150\4\7"+
    "\1\151\4\7\1\152\3\7\1\153\4\7\1\154\1\7"+
    "\1\155\5\7\2\0\1\60\1\156\1\157\1\160\3\10"+
    "\4\7\1\161\1\162\1\163\1\7\1\164\5\7\1\165"+
    "\1\166\1\167\1\170\1\171\1\172\4\7\1\173\1\174"+
    "\1\60\3\10\3\7\1\175\4\7\1\176\1\7\1\177"+
    "\1\7\1\200\1\7\1\60\3\10\1\7\1\201\1\202"+
    "\1\7\1\203\1\204\1\205\1\206\1\7\1\207\2\0"+
    "\3\10\1\210\1\7\1\211\2\0\3\10\1\212\1\213"+
    "\1\0\2\10\1\0\2\10\1\0\2\10\1\0\2\10"+
    "\1\0\2\10\1\0\2\10\1\0\1\10\1\66\1\0"+
    "\5\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[489];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u01b0\0\u01f8"+
    "\0\u0240\0\u0288\0\u02d0\0\u0318\0\u0240\0\u0360\0\u03a8\0\u03f0"+
    "\0\u0438\0\u0480\0\u04c8\0\u0510\0\u0558\0\u05a0\0\u05e8\0\u0630"+
    "\0\u0678\0\u06c0\0\u0708\0\u0750\0\u0240\0\u0798\0\u07e0\0\u0828"+
    "\0\u0870\0\u0240\0\u08b8\0\u0900\0\u0948\0\u0990\0\u09d8\0\u0a20"+
    "\0\u0a68\0\u0ab0\0\u0af8\0\u0b40\0\u0b88\0\u0240\0\u0240\0\u0240"+
    "\0\u0240\0\u0240\0\u0240\0\u0240\0\u0240\0\u0bd0\0\u0c18\0\u0240"+
    "\0\u0240\0\u0c60\0\u0ca8\0\u0cf0\0\u0d38\0\u0d80\0\u0240\0\u0dc8"+
    "\0\u0e10\0\u0240\0\u0e58\0\u0240\0\u0ea0\0\u0ee8\0\u0240\0\u0f30"+
    "\0\u0240\0\u0f78\0\u0fc0\0\u0240\0\u0240\0\u0240\0\u1008\0\u1050"+
    "\0\u1098\0\u0240\0\u10e0\0\u1128\0\u1170\0\u0240\0\u0240\0\u11b8"+
    "\0\u0240\0\u1200\0\u0240\0\u02d0\0\u1248\0\u1290\0\u12d8\0\u0240"+
    "\0\u1320\0\u1368\0\u1320\0\u0240\0\u13b0\0\u13f8\0\u1440\0\u1488"+
    "\0\u14d0\0\u0240\0\u0240\0\u0240\0\u0798\0\u1518\0\u1560\0\u15a8"+
    "\0\u15f0\0\u1638\0\u0240\0\u1680\0\u16c8\0\u1710\0\u1758\0\u17a0"+
    "\0\u17e8\0\u1830\0\u1878\0\u18c0\0\u1908\0\u1950\0\u1998\0\u19e0"+
    "\0\u1a28\0\u1a70\0\u1ab8\0\u1b00\0\u1b48\0\u1b90\0\u1bd8\0\u1c20"+
    "\0\u1c68\0\u1cb0\0\u1cf8\0\u0240\0\u1d40\0\u0240\0\u0240\0\u1d88"+
    "\0\u0240\0\u0240\0\u1dd0\0\u1e18\0\u1e60\0\u1ea8\0\u1ef0\0\u1f38"+
    "\0\u1f80\0\u1fc8\0\u2010\0\u2058\0\u20a0\0\u20e8\0\u2130\0\u2178"+
    "\0\u21c0\0\u2208\0\u2250\0\u2298\0\u22e0\0\u2328\0\u2370\0\u0240"+
    "\0\u0240\0\u0240\0\u0240\0\u0240\0\u0240\0\u0240\0\u0240\0\u0240"+
    "\0\u0240\0\u0240\0\u23b8\0\u2400\0\u2448\0\u2490\0\u1008\0\u24d8"+
    "\0\u2520\0\u2568\0\u25b0\0\u25f8\0\u2640\0\u1128\0\u2688\0\u26d0"+
    "\0\u2718\0\u2760\0\u1290\0\u27a8\0\u27f0\0\u2838\0\u2880\0\u28c8"+
    "\0\u0240\0\u2910\0\u2958\0\u29a0\0\u0798\0\u29e8\0\u2a30\0\u2a78"+
    "\0\u0798\0\u0240\0\u2ac0\0\u2b08\0\u2b50\0\u2b98\0\u2be0\0\u2c28"+
    "\0\u0798\0\u2c70\0\u2cb8\0\u2d00\0\u2d48\0\u2d90\0\u2dd8\0\u2e20"+
    "\0\u2e68\0\u2eb0\0\u2ef8\0\u2f40\0\u2f88\0\u2fd0\0\u3018\0\u3060"+
    "\0\u30a8\0\u0240\0\u30f0\0\u0240\0\u0240\0\u3138\0\u3180\0\u31c8"+
    "\0\u3210\0\u3258\0\u32a0\0\u32e8\0\u3330\0\u0798\0\u3378\0\u33c0"+
    "\0\u3408\0\u3450\0\u3498\0\u34e0\0\u3528\0\u3570\0\u35b8\0\u3600"+
    "\0\u3648\0\u3690\0\u36d8\0\u3720\0\u3768\0\u37b0\0\u37f8\0\u3840"+
    "\0\u3888\0\u0240\0\u38d0\0\u3918\0\u3960\0\u39a8\0\u39f0\0\u3a38"+
    "\0\u0240\0\u3a80\0\u3ac8\0\u3b10\0\u3b58\0\u1440\0\u3ba0\0\u3be8"+
    "\0\u3c30\0\u0240\0\u3c78\0\u3cc0\0\u3d08\0\u3d50\0\u3d98\0\u3de0"+
    "\0\u3e28\0\u3e70\0\u3eb8\0\u0798\0\u3f00\0\u3f48\0\u0798\0\u0798"+
    "\0\u3f90\0\u3fd8\0\u4020\0\u4068\0\u40b0\0\u40f8\0\u0798\0\u0798"+
    "\0\u4140\0\u0240\0\u0240\0\u4188\0\u0798\0\u41d0\0\u4218\0\u4260"+
    "\0\u42a8\0\u0798\0\u0798\0\u42f0\0\u4338\0\u4380\0\u43c8\0\u4410"+
    "\0\u4458\0\u44a0\0\u44e8\0\u4530\0\u4578\0\u0798\0\u45c0\0\u4608"+
    "\0\u4650\0\u4698\0\u46e0\0\u0798\0\u4728\0\u4770\0\u47b8\0\u4800"+
    "\0\u0240\0\u0240\0\u4848\0\u4890\0\u48d8\0\u0798\0\u4920\0\u4968"+
    "\0\u49b0\0\u49f8\0\u4a40\0\u0798\0\u0798\0\u4a88\0\u0798\0\u0798"+
    "\0\u4ad0\0\u0798\0\u4b18\0\u4b60\0\u4ba8\0\u4bf0\0\u0240\0\u4c38"+
    "\0\u4c80\0\u4cc8\0\u4d10\0\u0798\0\u4d58\0\u4da0\0\u4de8\0\u0798"+
    "\0\u4e30\0\u4e78\0\u4ec0\0\u4f08\0\u0798\0\u4f50\0\u0798\0\u4f98"+
    "\0\u4fe0\0\u5028\0\u5070\0\u50b8\0\u5100\0\u5148\0\u5190\0\u0240"+
    "\0\u0798\0\u0798\0\u51d8\0\u5220\0\u5268\0\u52b0\0\u52f8\0\u5340"+
    "\0\u5388\0\u0798\0\u0798\0\u0798\0\u53d0\0\u0798\0\u5418\0\u5460"+
    "\0\u54a8\0\u54f0\0\u5538\0\u0798\0\u0798\0\u0798\0\u0798\0\u0798"+
    "\0\u0798\0\u5580\0\u55c8\0\u5610\0\u5658\0\u0240\0\u0240\0\u56a0"+
    "\0\u56e8\0\u5730\0\u5778\0\u57c0\0\u5808\0\u5850\0\u0798\0\u5898"+
    "\0\u58e0\0\u5928\0\u5970\0\u0798\0\u59b8\0\u0798\0\u5a00\0\u0798"+
    "\0\u5a48\0\u5a90\0\u5ad8\0\u5b20\0\u5b68\0\u5bb0\0\u0798\0\u0798"+
    "\0\u5bf8\0\u0798\0\u0798\0\u0798\0\u0798\0\u5c40\0\u0798\0\u5c88"+
    "\0\u5cd0\0\u5d18\0\u5d60\0\u5da8\0\u0798\0\u5df0\0\u0798\0\u5e38"+
    "\0\u5e80\0\u5ec8\0\u5f10\0\u5f58\0\u0798\0\u0240\0\u5fa0\0\u5fe8"+
    "\0\u6030\0\u6078\0\u60c0\0\u6108\0\u6150\0\u6198\0\u61e0\0\u6228"+
    "\0\u6270\0\u62b8\0\u6300\0\u6348\0\u6390\0\u63d8\0\u6420\0\u6468"+
    "\0\u64b0\0\u64f8\0\u64f8\0\u6540\0\u6588\0\u65d0\0\u6618\0\u6660"+
    "\0\u66a8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[489];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\2\13\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\11"+
    "\1\37\3\36\3\37\1\36\1\40\1\36\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\36\1\51"+
    "\3\36\1\52\1\53\1\54\1\55\2\36\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\22\100\1\104\61\100\1\105"+
    "\1\106\1\107\1\110\40\105\1\111\43\105\1\112\1\113"+
    "\1\114\1\110\103\112\1\115\7\116\1\117\1\120\100\116"+
    "\1\121\1\122\1\123\3\116\1\124\1\125\15\116\1\126"+
    "\15\116\1\127\43\116\1\100\1\113\1\114\1\130\22\100"+
    "\1\131\61\100\1\105\1\132\1\133\1\130\40\105\1\131"+
    "\43\105\111\0\1\134\1\13\1\135\2\134\1\0\1\136"+
    "\101\0\2\134\1\135\2\134\1\0\1\136\101\0\1\12"+
    "\1\13\1\0\1\137\43\0\1\140\40\0\2\141\1\142"+
    "\2\143\1\0\1\144\1\145\2\0\1\146\1\147\1\0"+
    "\6\147\3\0\1\147\2\0\3\147\3\0\1\147\1\0"+
    "\1\147\3\0\20\147\32\0\1\150\1\151\65\0\1\152"+
    "\107\0\1\153\107\0\1\154\23\0\1\36\1\155\1\36"+
    "\1\156\5\36\3\0\12\36\1\0\1\36\3\0\20\36"+
    "\35\0\5\36\1\157\3\36\3\0\12\36\1\0\1\36"+
    "\3\0\1\160\1\161\1\36\1\162\14\36\36\0\1\163"+
    "\1\164\2\0\2\165\1\163\1\166\5\0\1\167\1\165"+
    "\1\170\1\0\1\171\1\172\1\173\1\163\1\174\1\166"+
    "\14\0\1\170\43\0\10\36\1\175\3\0\12\36\1\0"+
    "\1\36\3\0\1\176\17\36\35\0\5\36\1\177\3\36"+
    "\3\0\12\36\1\0\1\36\3\0\1\200\2\36\1\201"+
    "\3\36\1\202\10\36\35\0\11\36\3\0\12\36\1\0"+
    "\1\36\3\0\3\36\1\203\14\36\35\0\3\36\1\204"+
    "\5\36\3\0\12\36\1\0\1\36\3\0\6\36\1\205"+
    "\11\36\35\0\10\36\1\206\3\0\12\36\1\0\1\36"+
    "\3\0\3\36\1\207\14\36\35\0\3\36\1\210\1\36"+
    "\1\211\3\36\3\0\12\36\1\0\1\36\3\0\11\36"+
    "\1\212\6\36\46\0\1\213\52\0\1\214\35\0\1\215"+
    "\51\0\1\216\23\0\11\36\3\0\12\36\1\0\1\36"+
    "\3\0\20\36\36\0\1\163\1\37\2\0\2\165\1\163"+
    "\1\166\5\0\1\37\1\165\2\0\3\37\1\163\1\174"+
    "\1\166\56\0\1\217\3\0\1\174\13\0\1\174\3\0"+
    "\3\174\1\0\1\220\111\0\1\221\33\0\1\222\24\0"+
    "\1\223\1\0\1\224\104\0\6\36\1\225\2\36\3\0"+
    "\12\36\1\0\1\36\3\0\20\36\35\0\10\36\1\226"+
    "\3\0\12\36\1\0\1\36\3\0\20\36\35\0\10\36"+
    "\1\227\3\0\12\36\1\0\1\36\3\0\1\36\1\230"+
    "\5\36\1\231\7\36\1\232\35\0\11\36\3\0\12\36"+
    "\1\0\1\36\3\0\14\36\1\233\3\36\35\0\11\36"+
    "\3\0\12\36\1\0\1\36\3\0\1\36\1\234\16\36"+
    "\35\0\1\235\10\36\3\0\12\36\1\0\1\36\3\0"+
    "\2\36\1\236\4\36\1\237\3\36\1\240\4\36\35\0"+
    "\11\36\3\0\12\36\1\0\1\36\3\0\3\36\1\241"+
    "\14\36\35\0\11\36\3\0\12\36\1\0\1\36\3\0"+
    "\7\36\1\242\10\36\35\0\6\36\1\243\2\36\3\0"+
    "\12\36\1\0\1\36\3\0\1\36\1\244\16\36\35\0"+
    "\1\245\10\36\3\0\12\36\1\0\1\36\3\0\3\36"+
    "\1\246\14\36\47\0\1\247\50\0\1\250\1\251\107\0"+
    "\1\252\112\0\1\253\104\0\1\254\3\0\1\255\103\0"+
    "\1\256\4\0\1\257\102\0\1\260\107\0\1\261\10\0"+
    "\1\100\3\0\22\100\1\0\61\100\2\0\1\102\105\0"+
    "\1\262\1\263\13\262\1\264\17\262\2\264\1\265\17\262"+
    "\1\266\30\262\1\105\3\0\40\105\1\0\43\105\2\0"+
    "\1\107\105\0\2\262\1\0\12\262\1\264\17\262\2\264"+
    "\1\265\17\262\1\266\30\262\1\112\3\0\103\112\3\0"+
    "\1\114\106\0\2\267\1\270\2\267\2\0\1\271\12\0"+
    "\1\272\74\0\1\273\1\274\100\0\1\122\106\0\1\275"+
    "\1\116\106\0\2\276\1\277\2\276\2\0\1\300\107\0"+
    "\1\301\1\302\76\0\1\262\1\275\1\116\105\262\2\0"+
    "\1\133\106\0\2\134\1\0\1\135\104\0\2\303\1\304"+
    "\2\136\103\0\1\12\1\13\1\0\1\137\104\0\2\141"+
    "\1\142\2\143\2\0\1\145\2\0\1\146\1\147\1\0"+
    "\6\147\3\0\1\147\2\0\3\147\3\0\1\147\1\0"+
    "\1\147\3\0\20\147\23\0\2\143\1\0\1\142\113\0"+
    "\1\150\1\305\111\0\1\147\1\306\1\147\1\307\5\147"+
    "\3\0\12\147\1\0\1\147\3\0\20\147\35\0\11\147"+
    "\3\0\12\147\1\0\1\147\3\0\20\147\22\0\1\150"+
    "\1\310\1\311\105\150\11\312\1\313\76\312\13\0\5\36"+
    "\1\314\3\36\3\0\12\36\1\0\1\36\3\0\2\36"+
    "\1\315\15\36\35\0\11\36\3\0\12\36\1\0\1\36"+
    "\3\0\3\36\1\316\14\36\35\0\5\36\1\317\3\36"+
    "\3\0\12\36\1\0\1\36\3\0\20\36\35\0\1\320"+
    "\10\36\3\0\12\36\1\0\1\36\3\0\20\36\35\0"+
    "\11\36\3\0\12\36\1\0\1\36\3\0\1\36\1\321"+
    "\16\36\36\0\1\163\1\164\2\0\2\165\1\163\1\166"+
    "\5\0\1\167\1\165\2\0\1\171\1\172\1\173\1\163"+
    "\1\174\1\166\65\0\2\322\10\0\1\322\72\0\1\323"+
    "\13\0\1\323\3\0\3\323\3\0\1\324\32\0\1\324"+
    "\25\0\1\163\1\167\4\0\1\163\1\166\5\0\1\167"+
    "\3\0\3\167\1\163\1\174\1\166\61\0\1\325\1\326"+
    "\1\0\1\325\2\0\2\325\5\0\1\325\2\0\5\325"+
    "\1\0\1\325\3\0\1\325\3\0\1\325\51\0\1\163"+
    "\1\327\2\0\2\165\1\163\1\166\5\0\1\167\1\165"+
    "\2\0\3\327\1\163\1\174\1\166\61\0\1\163\1\173"+
    "\2\0\2\165\1\163\1\166\5\0\1\167\1\165\2\0"+
    "\3\173\1\163\1\174\1\166\61\0\1\163\1\330\2\0"+
    "\2\165\1\163\1\166\5\0\1\167\1\165\2\0\3\330"+
    "\1\163\1\174\1\166\61\0\1\163\1\174\4\0\1\163"+
    "\1\166\5\0\1\174\3\0\3\174\1\163\1\0\1\166"+
    "\60\0\11\36\3\0\12\36\1\0\1\36\3\0\13\36"+
    "\1\331\4\36\35\0\11\36\3\0\12\36\1\0\1\36"+
    "\3\0\10\36\1\332\7\36\35\0\11\36\3\0\12\36"+
    "\1\0\1\36\3\0\1\333\17\36\35\0\11\36\3\0"+
    "\12\36\1\0\1\36\3\0\2\36\1\334\3\36\1\335"+
    "\11\36\35\0\3\36\1\336\5\36\3\0\12\36\1\0"+
    "\1\36\3\0\20\36\35\0\11\36\3\0\12\36\1\0"+
    "\1\36\3\0\1\337\17\36\35\0\3\36\1\340\5\36"+
    "\3\0\12\36\1\0\1\36\3\0\20\36\35\0\1\341"+
    "\10\36\3\0\12\36\1\0\1\36\3\0\6\36\1\342"+
    "\11\36\35\0\1\343\10\36\3\0\12\36\1\0\1\36"+
    "\3\0\20\36\35\0\1\36\1\344\3\36\1\345\3\36"+
    "\3\0\12\36\1\0\1\36\3\0\20\36\35\0\6\36"+
    "\1\346\2\36\3\0\12\36\1\0\1\36\3\0\20\36"+
    "\35\0\6\36\1\347\2\36\3\0\12\36\1\0\1\36"+
    "\3\0\20\36\35\0\11\36\3\0\12\36\1\0\1\36"+
    "\3\0\6\36\1\350\11\36\35\0\11\36\3\0\12\36"+
    "\1\0\1\36\3\0\2\36\1\351\15\36\121\0\1\352"+
    "\35\0\1\353\51\0\1\354\51\0\1\355\114\0\1\356"+
    "\64\0\1\357\77\0\11\36\3\0\12\36\1\0\1\36"+
    "\3\0\2\36\1\360\15\36\35\0\7\36\1\361\1\36"+
    "\3\0\12\36\1\0\1\36\3\0\2\36\1\362\7\36"+
    "\1\363\5\36\35\0\11\36\3\0\12\36\1\0\1\36"+
    "\3\0\10\36\1\364\7\36\35\0\6\36\1\365\2\36"+
    "\3\0\12\36\1\0\1\36\3\0\17\36\1\366\35\0"+
    "\1\367\10\36\3\0\12\36\1\0\1\36\3\0\1\36"+
    "\1\370\16\36\35\0\11\36\3\0\12\36\1\0\1\36"+
    "\3\0\14\36\1\371\3\36\35\0\10\36\1\372\3\0"+
    "\12\36\1\0\1\36\3\0\20\36\35\0\10\36\1\373"+
    "\3\0\12\36\1\0\1\36\3\0\20\36\35\0\11\36"+
    "\3\0\12\36\1\0\1\36\3\0\12\36\1\374\3\36"+
    "\1\375\1\36\35\0\11\36\3\0\12\36\1\0\1\36"+
    "\3\0\1\376\1\377\16\36\35\0\11\36\3\0\12\36"+
    "\1\0\1\36\3\0\3\36\1\u0100\14\36\35\0\1\u0101"+
    "\10\36\3\0\12\36\1\0\1\36\3\0\20\36\35\0"+
    "\11\36\3\0\12\36\1\0\1\36\3\0\2\36\1\u0102"+
    "\15\36\35\0\1\u0103\10\36\3\0\12\36\1\0\1\36"+
    "\3\0\20\36\35\0\11\36\3\0\12\36\1\0\1\36"+
    "\3\0\4\36\1\u0104\13\36\35\0\1\u0105\10\36\3\0"+
    "\12\36\1\0\1\36\3\0\3\36\1\u0106\14\36\35\0"+
    "\11\36\3\0\12\36\1\0\1\36\3\0\1\36\1\u0107"+
    "\16\36\35\0\1\u0108\4\36\1\u0109\3\36\3\0\12\36"+
    "\1\0\1\36\3\0\20\36\33\0\1\u010a\100\0\1\262"+
    "\122\0\1\265\17\0\3\265\65\0\1\262\17\0\3\262"+
    "\64\0\2\u010b\1\0\1\u010b\2\0\2\u010b\5\0\1\u010b"+
    "\2\0\5\u010b\1\0\1\u010b\3\0\1\u010b\3\0\1\u010b"+
    "\36\0\2\267\1\0\1\270\113\0\1\273\1\u010c\114\0"+
    "\1\u010d\71\0\1\273\1\275\1\116\105\273\11\274\1\u010e"+
    "\76\274\2\0\1\116\106\0\2\276\1\0\1\277\113\0"+
    "\1\301\1\u010f\76\0\1\301\1\u0110\1\u0111\105\301\11\u0112"+
    "\1\u0113\76\u0112\1\0\2\136\1\0\1\304\103\0\11\312"+
    "\1\0\76\312\1\0\2\u0114\1\u0115\2\u0114\5\0\2\147"+
    "\1\u0116\6\147\3\0\12\147\1\0\1\147\3\0\20\147"+
    "\35\0\4\147\1\u0117\4\147\3\0\12\147\1\0\1\147"+
    "\3\0\20\147\24\0\1\311\105\0\11\312\1\u0118\76\312"+
    "\10\u0119\1\u011a\1\313\76\u0119\13\0\1\u011b\10\36\3\0"+
    "\12\36\1\0\1\36\3\0\20\36\35\0\11\36\3\0"+
    "\12\36\1\0\1\36\3\0\1\u011c\17\36\35\0\11\36"+
    "\3\0\12\36\1\0\1\36\3\0\6\36\1\365\11\36"+
    "\35\0\10\36\1\u011d\3\0\12\36\1\0\1\36\3\0"+
    "\20\36\36\0\1\163\1\323\4\0\1\163\6\0\1\323"+
    "\3\0\3\323\1\163\64\0\1\323\13\0\1\323\3\0"+
    "\3\323\64\0\2\u011e\1\0\1\u011e\2\165\2\u011e\5\0"+
    "\1\u011e\1\165\1\0\5\u011e\1\0\1\u011e\3\0\1\u011e"+
    "\3\0\1\u011e\51\0\1\325\1\326\1\0\1\325\2\165"+
    "\2\325\5\0\1\325\1\165\1\0\5\325\1\0\1\325"+
    "\3\0\1\325\3\0\1\325\51\0\1\163\1\u011f\2\0"+
    "\2\165\1\163\1\166\5\0\1\167\1\165\2\0\3\u011f"+
    "\1\163\1\174\1\166\61\0\1\163\1\u0120\2\0\2\165"+
    "\1\163\1\166\5\0\1\167\1\165\2\0\3\u0120\1\163"+
    "\1\174\1\166\60\0\10\36\1\u0121\3\0\12\36\1\0"+
    "\1\36\3\0\20\36\35\0\11\36\3\0\12\36\1\0"+
    "\1\36\3\0\6\36\1\u0122\11\36\35\0\4\36\1\u0123"+
    "\4\36\3\0\12\36\1\0\1\36\3\0\20\36\35\0"+
    "\10\36\1\u0124\3\0\12\36\1\0\1\36\3\0\20\36"+
    "\35\0\11\36\3\0\12\36\1\0\1\36\3\0\2\36"+
    "\1\u0125\3\36\1\u0126\11\36\35\0\11\36\3\0\12\36"+
    "\1\0\1\36\3\0\1\36\1\u0127\16\36\35\0\11\36"+
    "\3\0\12\36\1\0\1\36\3\0\12\36\1\u0128\5\36"+
    "\35\0\11\36\3\0\12\36\1\0\1\36\3\0\3\36"+
    "\1\u0129\14\36\35\0\1\u012a\10\36\3\0\12\36\1\0"+
    "\1\36\3\0\20\36\35\0\3\36\1\u012b\5\36\3\0"+
    "\12\36\1\0\1\36\3\0\20\36\35\0\11\36\3\0"+
    "\12\36\1\0\1\36\3\0\1\u012c\17\36\35\0\10\36"+
    "\1\u012d\3\0\12\36\1\0\1\36\3\0\20\36\35\0"+
    "\11\36\3\0\12\36\1\0\1\36\3\0\4\36\1\u012e"+
    "\13\36\35\0\11\36\3\0\12\36\1\0\1\36\3\0"+
    "\10\36\1\u012f\7\36\35\0\10\36\1\u0130\3\0\12\36"+
    "\1\0\1\36\3\0\20\36\35\0\10\36\1\u0131\3\0"+
    "\12\36\1\0\1\36\3\0\20\36\121\0\1\u0132\57\0"+
    "\1\u0133\106\0\1\u0134\54\0\11\36\3\0\12\36\1\0"+
    "\1\36\3\0\3\36\1\u0135\14\36\35\0\10\36\1\u0136"+
    "\3\0\12\36\1\0\1\36\3\0\20\36\35\0\6\36"+
    "\1\u0137\2\36\3\0\12\36\1\0\1\36\3\0\20\36"+
    "\35\0\1\u0138\10\36\3\0\12\36\1\0\1\36\3\0"+
    "\20\36\35\0\11\36\3\0\12\36\1\0\1\36\3\0"+
    "\14\36\1\u0139\3\36\35\0\10\36\1\u013a\3\0\12\36"+
    "\1\0\1\36\3\0\20\36\35\0\11\36\3\0\12\36"+
    "\1\0\1\36\3\0\6\36\1\u013b\11\36\35\0\11\36"+
    "\3\0\12\36\1\0\1\36\3\0\3\36\1\u013c\14\36"+
    "\35\0\10\36\1\u013d\3\0\12\36\1\0\1\36\3\0"+
    "\20\36\35\0\11\36\3\0\12\36\1\0\1\36\3\0"+
    "\1\36\1\u013e\16\36\35\0\11\36\3\0\12\36\1\0"+
    "\1\36\3\0\1\u013f\17\36\35\0\3\36\1\u0140\5\36"+
    "\3\0\12\36\1\0\1\36\3\0\20\36\35\0\10\36"+
    "\1\u0141\3\0\12\36\1\0\1\36\3\0\20\36\35\0"+
    "\11\36\3\0\12\36\1\0\1\36\3\0\2\36\1\u0142"+
    "\15\36\35\0\6\36\1\u0143\2\36\3\0\12\36\1\0"+
    "\1\36\3\0\20\36\35\0\11\36\3\0\12\36\1\0"+
    "\1\36\3\0\1\36\1\u0144\16\36\35\0\11\36\3\0"+
    "\12\36\1\0\1\36\3\0\2\36\1\u0145\15\36\35\0"+
    "\11\36\3\0\12\36\1\0\1\36\3\0\3\36\1\u0146"+
    "\14\36\35\0\5\36\1\u0147\3\36\3\0\12\36\1\0"+
    "\1\36\3\0\20\36\35\0\5\36\1\u0148\3\36\3\0"+
    "\12\36\1\0\1\36\3\0\20\36\35\0\11\36\3\0"+
    "\12\36\1\0\1\36\3\0\15\36\1\u0149\2\36\35\0"+
    "\11\36\3\0\12\36\1\0\1\36\3\0\2\36\1\u014a"+
    "\15\36\35\0\11\36\3\0\12\36\1\0\1\36\3\0"+
    "\2\36\1\u014b\15\36\35\0\7\36\1\u014c\1\36\3\0"+
    "\12\36\1\0\1\36\3\0\20\36\35\0\11\36\3\0"+
    "\12\36\1\0\1\36\3\0\1\u014d\17\36\36\0\2\262"+
    "\1\0\1\262\2\0\2\262\5\0\1\262\2\0\5\262"+
    "\1\0\1\262\3\0\1\262\3\0\1\262\35\0\11\274"+
    "\1\0\76\274\22\0\1\u014e\65\0\10\274\1\116\1\u010e"+
    "\76\274\11\u0112\1\0\76\u0112\2\0\1\u0111\105\0\11\u0112"+
    "\1\u014f\76\u0112\10\u0150\1\u0151\1\u0113\76\u0150\1\0\2\u0114"+
    "\1\u0115\2\u0114\7\0\1\u0152\73\0\2\u0114\1\0\1\u0115"+
    "\116\0\5\147\1\u0153\3\147\3\0\12\147\1\0\1\147"+
    "\3\0\20\147\22\0\10\312\1\u011a\1\u0118\76\312\11\u0119"+
    "\1\u0154\76\u0119\13\0\3\36\1\u0155\5\36\3\0\12\36"+
    "\1\0\1\36\3\0\20\36\35\0\11\36\3\0\12\36"+
    "\1\0\1\36\3\0\2\36\1\u0156\15\36\35\0\3\36"+
    "\1\u0157\5\36\3\0\12\36\1\0\1\36\3\0\20\36"+
    "\36\0\2\u0158\1\0\1\u0158\2\165\2\u0158\5\0\1\u0158"+
    "\1\165\1\0\5\u0158\1\0\1\u0158\3\0\1\u0158\3\0"+
    "\1\u0158\51\0\1\163\1\u0159\2\0\2\165\1\163\1\166"+
    "\5\0\1\167\1\165\2\0\3\u0159\1\163\1\174\1\166"+
    "\61\0\1\163\1\u015a\2\0\2\165\1\163\1\166\5\0"+
    "\1\167\1\165\2\0\3\u015a\1\163\1\174\1\166\60\0"+
    "\11\36\3\0\12\36\1\0\1\36\3\0\6\36\1\u015b"+
    "\11\36\35\0\11\36\3\0\12\36\1\0\1\36\3\0"+
    "\6\36\1\u015c\11\36\35\0\11\36\3\0\12\36\1\0"+
    "\1\36\3\0\7\36\1\u015d\10\36\35\0\1\u015e\10\36"+
    "\3\0\12\36\1\0\1\36\3\0\20\36\35\0\11\36"+
    "\3\0\12\36\1\0\1\36\3\0\2\36\1\u015f\15\36"+
    "\35\0\3\36\1\u0160\5\36\3\0\12\36\1\0\1\36"+
    "\3\0\20\36\35\0\11\36\3\0\12\36\1\0\1\36"+
    "\3\0\12\36\1\u0161\5\36\35\0\11\36\3\0\12\36"+
    "\1\0\1\36\3\0\12\36\1\u0162\5\36\35\0\6\36"+
    "\1\u0163\2\36\3\0\12\36\1\0\1\36\3\0\20\36"+
    "\35\0\11\36\3\0\12\36\1\0\1\36\3\0\2\36"+
    "\1\u0164\15\36\35\0\5\36\1\u0165\3\36\3\0\12\36"+
    "\1\0\1\36\3\0\20\36\35\0\11\36\3\0\12\36"+
    "\1\0\1\36\3\0\1\36\1\u0166\16\36\71\0\1\u0167"+
    "\53\0\4\36\1\u0168\4\36\3\0\12\36\1\0\1\36"+
    "\3\0\20\36\35\0\11\36\3\0\12\36\1\0\1\36"+
    "\3\0\1\36\1\u0169\16\36\35\0\11\36\3\0\12\36"+
    "\1\0\1\36\3\0\6\36\1\u016a\11\36\35\0\5\36"+
    "\1\u016b\3\36\3\0\12\36\1\0\1\36\3\0\20\36"+
    "\35\0\11\36\3\0\12\36\1\0\1\36\3\0\13\36"+
    "\1\u016c\4\36\35\0\3\36\1\u016d\3\36\1\u016e\1\36"+
    "\3\0\12\36\1\0\1\36\3\0\20\36\35\0\11\36"+
    "\3\0\12\36\1\0\1\36\3\0\1\u016f\17\36\35\0"+
    "\11\36\3\0\12\36\1\0\1\36\3\0\5\36\1\u0170"+
    "\12\36\35\0\10\36\1\u0171\3\0\12\36\1\0\1\36"+
    "\3\0\20\36\35\0\11\36\3\0\12\36\1\0\1\36"+
    "\3\0\3\36\1\u0172\14\36\35\0\1\u0173\10\36\3\0"+
    "\12\36\1\0\1\36\3\0\20\36\35\0\4\36\1\u0174"+
    "\4\36\3\0\12\36\1\0\1\36\3\0\20\36\35\0"+
    "\11\36\3\0\12\36\1\0\1\36\3\0\2\36\1\u0175"+
    "\15\36\35\0\4\36\1\u0176\4\36\3\0\12\36\1\0"+
    "\1\36\3\0\20\36\35\0\10\36\1\u0177\3\0\12\36"+
    "\1\0\1\36\3\0\20\36\35\0\1\u0178\10\36\3\0"+
    "\12\36\1\0\1\36\3\0\20\36\35\0\11\36\3\0"+
    "\12\36\1\0\1\36\3\0\1\u0179\17\36\35\0\10\36"+
    "\1\u017a\3\0\12\36\1\0\1\36\3\0\20\36\35\0"+
    "\6\36\1\u017b\2\36\3\0\12\36\1\0\1\36\3\0"+
    "\20\36\35\0\11\36\3\0\12\36\1\0\1\36\3\0"+
    "\2\36\1\u017c\15\36\35\0\1\u017d\74\0\10\u0112\1\u0151"+
    "\1\u014f\76\u0112\11\u0150\1\u017e\76\u0150\13\0\6\147\1\u017f"+
    "\2\147\3\0\12\147\1\0\1\147\3\0\20\147\22\0"+
    "\10\u0119\1\u0180\1\u0154\76\u0119\13\0\10\36\1\u0181\3\0"+
    "\12\36\1\0\1\36\3\0\20\36\35\0\7\36\1\u0182"+
    "\1\36\3\0\12\36\1\0\1\36\3\0\20\36\36\0"+
    "\2\u0183\1\0\1\u0183\2\165\2\u0183\5\0\1\u0183\1\165"+
    "\1\0\5\u0183\1\0\1\u0183\3\0\1\u0183\3\0\1\u0183"+
    "\51\0\1\163\1\u0184\2\0\2\165\1\163\1\166\5\0"+
    "\1\167\1\165\2\0\3\u0184\1\163\1\174\1\166\61\0"+
    "\1\163\1\u0185\2\0\2\165\1\163\1\166\5\0\1\167"+
    "\1\165\2\0\3\u0185\1\163\1\174\1\166\60\0\11\36"+
    "\3\0\12\36\1\0\1\36\3\0\14\36\1\u0186\3\36"+
    "\35\0\3\36\1\u0187\5\36\3\0\12\36\1\0\1\36"+
    "\3\0\20\36\35\0\3\36\1\u0188\5\36\3\0\12\36"+
    "\1\0\1\36\3\0\20\36\35\0\5\36\1\u0189\3\36"+
    "\3\0\12\36\1\0\1\36\3\0\20\36\35\0\10\36"+
    "\1\u018a\3\0\12\36\1\0\1\36\3\0\20\36\35\0"+
    "\10\36\1\u018b\3\0\12\36\1\0\1\36\3\0\20\36"+
    "\35\0\3\36\1\u018c\5\36\3\0\12\36\1\0\1\36"+
    "\3\0\20\36\35\0\5\36\1\u018d\3\36\3\0\12\36"+
    "\1\0\1\36\3\0\20\36\35\0\3\36\1\u018e\5\36"+
    "\3\0\12\36\1\0\1\36\3\0\20\36\35\0\11\36"+
    "\3\0\12\36\1\0\1\36\3\0\2\36\1\u018f\15\36"+
    "\35\0\11\36\3\0\12\36\1\0\1\36\3\0\1\u0190"+
    "\17\36\35\0\11\36\3\0\12\36\1\0\1\36\3\0"+
    "\1\u0191\17\36\35\0\10\36\1\u0192\3\0\12\36\1\0"+
    "\1\36\3\0\20\36\35\0\11\36\3\0\12\36\1\0"+
    "\1\36\3\0\2\36\1\u0193\15\36\35\0\7\36\1\u0194"+
    "\1\36\3\0\12\36\1\0\1\36\3\0\20\36\35\0"+
    "\1\36\1\u0195\7\36\3\0\12\36\1\0\1\36\3\0"+
    "\20\36\35\0\4\36\1\u0196\4\36\3\0\12\36\1\0"+
    "\1\36\3\0\20\36\35\0\11\36\3\0\12\36\1\0"+
    "\1\36\3\0\2\36\1\u0197\15\36\35\0\11\36\3\0"+
    "\12\36\1\0\1\36\3\0\7\36\1\u0198\10\36\35\0"+
    "\4\36\1\u0199\4\36\3\0\12\36\1\0\1\36\3\0"+
    "\20\36\35\0\11\36\3\0\12\36\1\0\1\36\3\0"+
    "\2\36\1\u019a\15\36\35\0\4\36\1\u019b\4\36\3\0"+
    "\12\36\1\0\1\36\3\0\20\36\35\0\11\36\3\0"+
    "\12\36\1\0\1\36\3\0\1\u019c\17\36\35\0\1\u019d"+
    "\10\36\3\0\12\36\1\0\1\36\3\0\20\36\36\0"+
    "\1\u019e\73\0\10\u0150\1\u019f\1\u017e\76\u0150\13\0\7\147"+
    "\1\u01a0\1\147\3\0\12\147\1\0\1\147\3\0\20\147"+
    "\36\0\2\u01a1\1\0\1\u01a1\2\165\2\u01a1\5\0\1\u01a1"+
    "\1\165\1\0\5\u01a1\1\0\1\u01a1\3\0\1\u01a1\3\0"+
    "\1\u01a1\51\0\1\163\1\u01a2\2\0\2\165\1\163\1\166"+
    "\5\0\1\167\1\165\2\0\3\u01a2\1\163\1\174\1\166"+
    "\61\0\1\163\1\u01a3\2\0\2\165\1\163\1\166\5\0"+
    "\1\167\1\165\2\0\3\u01a3\1\163\1\174\1\166\60\0"+
    "\11\36\3\0\12\36\1\0\1\36\3\0\1\u01a4\17\36"+
    "\35\0\6\36\1\u01a5\2\36\3\0\12\36\1\0\1\36"+
    "\3\0\20\36\35\0\10\36\1\u01a6\3\0\12\36\1\0"+
    "\1\36\3\0\20\36\35\0\11\36\3\0\12\36\1\0"+
    "\1\36\3\0\2\36\1\u01a7\15\36\35\0\11\36\3\0"+
    "\12\36\1\0\1\36\3\0\1\u01a8\17\36\35\0\10\36"+
    "\1\u01a9\3\0\12\36\1\0\1\36\3\0\20\36\35\0"+
    "\11\36\3\0\12\36\1\0\1\36\3\0\2\36\1\u01aa"+
    "\15\36\35\0\11\36\3\0\12\36\1\0\1\36\3\0"+
    "\10\36\1\u01ab\7\36\35\0\1\36\1\u01ac\7\36\3\0"+
    "\12\36\1\0\1\36\3\0\20\36\35\0\11\36\3\0"+
    "\12\36\1\0\1\36\3\0\3\36\1\u01ad\14\36\35\0"+
    "\10\36\1\u01ae\3\0\12\36\1\0\1\36\3\0\20\36"+
    "\35\0\11\36\3\0\12\36\1\0\1\36\3\0\2\36"+
    "\1\u01af\15\36\35\0\5\36\1\u01b0\3\36\3\0\12\36"+
    "\1\0\1\36\3\0\20\36\35\0\5\36\1\u01b1\3\36"+
    "\3\0\12\36\1\0\1\36\3\0\20\36\35\0\10\147"+
    "\1\u01b2\3\0\12\147\1\0\1\147\3\0\20\147\36\0"+
    "\2\u01b3\1\0\1\u01b3\2\165\2\u01b3\5\0\1\u01b3\1\165"+
    "\1\0\5\u01b3\1\0\1\u01b3\3\0\1\u01b3\3\0\1\u01b3"+
    "\51\0\1\163\1\u01b4\2\0\2\165\1\163\1\166\5\0"+
    "\1\167\1\165\2\0\3\u01b4\1\163\1\174\1\166\61\0"+
    "\1\163\1\u01b5\2\0\2\165\1\163\1\166\5\0\1\167"+
    "\1\165\2\0\3\u01b5\1\163\1\174\1\166\60\0\4\36"+
    "\1\u01b6\4\36\3\0\12\36\1\0\1\36\3\0\20\36"+
    "\35\0\10\36\1\u01b7\3\0\12\36\1\0\1\36\3\0"+
    "\20\36\35\0\7\36\1\u01b8\1\36\3\0\12\36\1\0"+
    "\1\36\3\0\20\36\35\0\11\36\3\0\12\36\1\0"+
    "\1\36\3\0\1\36\1\u01b9\16\36\35\0\11\36\3\0"+
    "\12\36\1\0\1\36\3\0\1\36\1\u01ba\16\36\35\0"+
    "\10\36\1\u01bb\3\0\12\36\1\0\1\36\3\0\20\36"+
    "\35\0\10\36\1\u01bc\3\0\12\36\1\0\1\36\3\0"+
    "\20\36\35\0\11\36\3\0\12\36\1\0\1\36\3\0"+
    "\1\36\1\u01bd\16\36\35\0\10\36\1\u01be\3\0\12\36"+
    "\1\0\1\36\3\0\20\36\35\0\10\36\1\u01bf\3\0"+
    "\12\36\1\0\1\36\3\0\20\36\23\0\2\u01c0\1\u01c1"+
    "\2\u01c0\5\0\11\147\3\0\12\147\1\0\1\147\3\0"+
    "\20\147\36\0\2\u01c2\1\0\1\u01c2\2\165\2\u01c2\5\0"+
    "\1\u01c2\1\165\1\0\5\u01c2\1\0\1\u01c2\3\0\1\u01c2"+
    "\3\0\1\u01c2\51\0\1\163\1\u01c3\2\0\2\165\1\163"+
    "\1\166\5\0\1\167\1\165\2\0\3\u01c3\1\163\1\174"+
    "\1\166\61\0\1\163\1\u01c4\2\0\2\165\1\163\1\166"+
    "\5\0\1\167\1\165\2\0\3\u01c4\1\163\1\174\1\166"+
    "\60\0\10\36\1\u01c5\3\0\12\36\1\0\1\36\3\0"+
    "\20\36\35\0\10\36\1\u01c6\3\0\12\36\1\0\1\36"+
    "\3\0\20\36\35\0\7\36\1\u01c7\1\36\3\0\12\36"+
    "\1\0\1\36\3\0\20\36\23\0\2\u01c0\1\u01c1\2\u01c0"+
    "\16\0\1\u01c8\1\0\1\u01c9\62\0\2\u01c0\1\0\1\u01c1"+
    "\117\0\2\u01ca\1\0\1\u01ca\2\165\2\u01ca\5\0\1\u01ca"+
    "\1\165\1\0\5\u01ca\1\0\1\u01ca\3\0\1\u01ca\3\0"+
    "\1\u01ca\51\0\1\163\1\u01cb\2\0\2\165\1\163\1\166"+
    "\5\0\1\167\1\165\2\0\3\u01cb\1\163\1\174\1\166"+
    "\61\0\1\163\1\u01cc\2\0\2\165\1\163\1\166\5\0"+
    "\1\167\1\165\2\0\3\u01cc\1\163\1\174\1\166\60\0"+
    "\7\36\1\u01cd\1\36\3\0\12\36\1\0\1\36\3\0"+
    "\20\36\22\0\25\u01c8\1\u01ce\62\u01c8\26\u01c9\1\u01ce\61\u01c9"+
    "\14\0\2\u01cf\1\0\1\u01cf\2\165\2\u01cf\5\0\1\u01cf"+
    "\1\165\1\0\5\u01cf\1\0\1\u01cf\3\0\1\u01cf\3\0"+
    "\1\u01cf\51\0\1\163\1\u01d0\2\0\2\165\1\163\1\166"+
    "\5\0\1\167\1\165\2\0\3\u01d0\1\163\1\174\1\166"+
    "\61\0\1\163\1\u01d1\2\0\2\165\1\163\1\166\5\0"+
    "\1\167\1\165\2\0\3\u01d1\1\163\1\174\1\166\61\0"+
    "\2\u01d2\1\0\1\u01d2\2\165\2\u01d2\5\0\1\u01d2\1\165"+
    "\1\0\5\u01d2\1\0\1\u01d2\3\0\1\u01d2\3\0\1\u01d2"+
    "\51\0\1\163\1\u01d3\2\0\2\165\1\163\1\166\5\0"+
    "\1\167\1\165\2\0\3\u01d3\1\163\1\174\1\166\61\0"+
    "\1\163\1\u01d4\2\0\2\165\1\163\1\166\5\0\1\167"+
    "\1\165\2\0\3\u01d4\1\163\1\174\1\166\61\0\2\u01d5"+
    "\1\0\1\u01d5\2\165\2\u01d5\5\0\1\u01d5\1\165\1\0"+
    "\5\u01d5\1\0\1\u01d5\3\0\1\u01d5\3\0\1\u01d5\51\0"+
    "\1\163\1\u01d6\2\0\2\165\1\163\1\166\5\0\1\167"+
    "\1\165\2\0\3\u01d6\1\163\1\174\1\166\61\0\1\163"+
    "\1\u01d7\2\0\2\165\1\163\1\166\5\0\1\167\1\165"+
    "\2\0\3\u01d7\1\163\1\174\1\166\61\0\2\u01d8\1\0"+
    "\1\u01d8\2\165\2\u01d8\5\0\1\u01d8\1\165\1\0\5\u01d8"+
    "\1\0\1\u01d8\3\0\1\u01d8\3\0\1\u01d8\51\0\1\163"+
    "\1\u01d9\2\0\2\165\1\163\1\166\5\0\1\167\1\165"+
    "\2\0\3\u01d9\1\163\1\174\1\166\61\0\1\163\1\u01da"+
    "\2\0\2\165\1\163\1\166\5\0\1\167\1\165\2\0"+
    "\3\u01da\1\163\1\174\1\166\61\0\2\u01db\1\0\1\u01db"+
    "\2\165\2\u01db\5\0\1\u01db\1\165\1\0\5\u01db\1\0"+
    "\1\u01db\3\0\1\u01db\3\0\1\u01db\51\0\1\163\1\u01dc"+
    "\2\0\2\165\1\163\1\166\5\0\1\167\1\165\2\0"+
    "\3\u01dc\1\163\1\174\1\166\61\0\1\163\1\u01dd\2\0"+
    "\2\165\1\163\1\166\5\0\1\167\1\165\2\0\3\u01dd"+
    "\1\163\1\174\1\166\61\0\2\u01de\1\0\1\u01de\2\165"+
    "\2\u01de\5\0\1\u01de\1\165\1\0\5\u01de\1\0\1\u01de"+
    "\3\0\1\u01de\3\0\1\u01de\51\0\1\163\1\u01df\2\0"+
    "\2\165\1\163\1\166\5\0\1\167\1\165\2\0\3\u01df"+
    "\1\163\1\174\1\166\61\0\1\163\1\u01e0\2\0\2\165"+
    "\1\163\1\166\5\0\1\167\1\165\2\0\3\u01e0\1\163"+
    "\1\174\1\166\61\0\2\u01e1\1\0\1\u01e1\2\165\2\u01e1"+
    "\5\0\1\u01e1\1\165\1\0\5\u01e1\1\0\1\u01e1\3\0"+
    "\1\u01e1\3\0\1\u01e1\51\0\1\163\1\u01e2\2\0\2\165"+
    "\1\163\1\166\5\0\1\167\1\165\2\0\3\u01e2\1\163"+
    "\1\174\1\166\61\0\1\163\1\u01e3\2\0\2\165\1\163"+
    "\1\166\5\0\1\167\1\165\2\0\3\u01e3\1\163\1\174"+
    "\1\166\61\0\2\u01e4\1\0\1\u01e4\2\165\2\u01e4\5\0"+
    "\1\u01e4\1\165\1\0\5\u01e4\1\0\1\u01e4\3\0\1\u01e4"+
    "\3\0\1\u01e4\51\0\1\163\1\u01e5\2\0\2\165\1\163"+
    "\1\166\5\0\1\167\1\165\2\0\3\u01e5\1\163\1\174"+
    "\1\166\65\0\2\165\10\0\1\165\71\0\1\163\1\u01e6"+
    "\2\0\2\165\1\163\1\166\5\0\1\167\1\165\2\0"+
    "\3\u01e6\1\163\1\174\1\166\61\0\1\163\1\u01e7\2\0"+
    "\2\165\1\163\1\166\5\0\1\167\1\165\2\0\3\u01e7"+
    "\1\163\1\174\1\166\61\0\1\163\1\u01e8\2\0\2\165"+
    "\1\163\1\166\5\0\1\167\1\165\2\0\3\u01e8\1\163"+
    "\1\174\1\166\61\0\1\163\1\u01e9\2\0\2\165\1\163"+
    "\1\166\5\0\1\167\1\165\2\0\3\u01e9\1\163\1\174"+
    "\1\166\61\0\1\163\1\167\2\0\2\165\1\163\1\166"+
    "\5\0\1\167\1\165\2\0\3\167\1\163\1\174\1\166"+
    "\45\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26352];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\3\1\1\11\17\1\1\11\4\1\1\11"+
    "\13\1\10\11\2\1\2\11\5\1\1\11\2\1\1\11"+
    "\1\1\1\11\2\1\1\11\1\1\1\11\2\1\3\11"+
    "\3\1\1\11\3\1\2\11\1\1\1\11\1\1\1\11"+
    "\4\0\1\11\1\1\2\0\1\11\1\0\3\1\1\0"+
    "\3\11\6\1\1\11\2\1\1\0\1\1\1\0\23\1"+
    "\1\11\1\1\2\11\1\0\2\11\2\0\23\1\13\11"+
    "\4\1\4\0\1\1\1\0\1\1\3\0\1\1\1\0"+
    "\1\1\2\0\3\1\1\11\2\0\6\1\1\11\1\1"+
    "\1\0\25\1\1\11\1\1\2\11\2\0\32\1\1\11"+
    "\1\1\4\0\1\1\1\11\4\0\2\1\2\0\1\11"+
    "\27\1\2\11\1\0\31\1\3\0\2\11\1\1\1\0"+
    "\22\1\1\11\25\1\2\0\1\1\1\11\35\1\2\11"+
    "\40\1\2\0\6\1\2\0\4\1\1\11\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[489];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  private StringBuffer string = new StringBuffer();

  private String originId;
  
  /** 
   * Resets scanner.
   */    
  public void reset(java.io.Reader reader, String originId) {
    this.originId = originId;
    yyreset(reader);
  } 
  
  /**
   * {@inheritDoc}
   */
  public void close() throws java.io.IOException {
    yyclose();
  } 
  
  /** Returns whether the given comment would be swallowed by a macro. 
   *  This is true is all lines (but not the last one) are ended with a backslash (macro continuation). 
   */
  private boolean isMacroSwallowedComment (String comment) {
  	java.util.List<String> lines = org.conqat.lib.commons.string.StringUtils.splitLinesAsList(yytext());
  	for (int i = 0; i < lines.size()-1; ++i) {
  	  if (!lines.get(i).endsWith ("\\")) {
  	    return false;
  	  }
  	}
  	return true;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CPPScanner(java.io.Reader in, String originId) {
  	this.originId = originId;
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CPPScanner(java.io.InputStream in, String originId) {
    this(new java.io.InputStreamReader(in), originId);
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2240) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public CPPToken internalScan() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11: 
          { yybegin(STRING); string.setLength(0); string.append(yytext());
          }
        case 140: break;
        case 127: 
          { return new CPPToken(ETokenType.PRIVATE, yychar, yyline, yytext(), originId);
          }
        case 141: break;
        case 139: 
          { return new CPPToken(ETokenType.PREPROCESSOR_INCLUDE, yychar, yyline, yytext(), originId);
          }
        case 142: break;
        case 74: 
          { yybegin(YYINITIAL); 
                               pushToken(new CPPToken(ETokenType.END_OF_LINE_COMMENT, yychar, yyline, yytext(), originId));
                               return new CPPToken(ETokenType.PREPROCESSOR_DIRECTIVE, yychar-string.length(), yyline, string.toString(), originId);
          }
        case 143: break;
        case 15: 
          { return new CPPToken(ETokenType.AT_OPERATOR, yychar, yyline, yytext(), originId);
          }
        case 144: break;
        case 40: 
          { yybegin(YYINITIAL); 
                                   return new CPPToken(ETokenType.BACKTICK_STRING_LITERAL, yychar-string.length()-1, yyline, "`"+string.toString()+"`", originId);
          }
        case 145: break;
        case 4: 
          { return new CPPToken(ETokenType.DIV, yychar, yyline, yytext(), originId);
          }
        case 146: break;
        case 38: 
          { yybegin(YYINITIAL); 
                                   return new CPPToken(ETokenType.CHARACTER_LITERAL, yychar-string.length()-1, yyline, "'"+string.toString()+"'", originId);
          }
        case 147: break;
        case 48: 
          { yybegin(PREPROCESSOR_DIRECTIVE); string.setLength(0); string.append(yytext());
          }
        case 148: break;
        case 110: 
          { return new CPPToken(ETokenType.DOCUMENTATION_COMMENT, yychar, yyline, yytext(), originId);
          }
        case 149: break;
        case 122: 
          { return new CPPToken(ETokenType.PUBLIC, yychar, yyline, yytext(), originId);
          }
        case 150: break;
        case 33: 
          { yybegin(BACKTICK_STRING); string.setLength(0);
          }
        case 151: break;
        case 47: 
          { return new CPPToken(ETokenType.CONCATENATION, yychar, yyline, yytext(), originId);
          }
        case 152: break;
        case 21: 
          { return new CPPToken(ETokenType.RBRACK, yychar, yyline, yytext(), originId);
          }
        case 153: break;
        case 96: 
          { return new CPPToken(ETokenType.GOTO, yychar, yyline, yytext(), originId);
          }
        case 154: break;
        case 16: 
          { return new CPPToken(ETokenType.LPAREN, yychar, yyline, yytext(), originId);
          }
        case 155: break;
        case 91: 
          { return new CPPToken(ETokenType.URSHIFTEQ, yychar, yyline, yytext(), originId);
          }
        case 156: break;
        case 19: 
          { return new CPPToken(ETokenType.RBRACE, yychar, yyline, yytext(), originId);
          }
        case 157: break;
        case 24: 
          { return new CPPToken(ETokenType.MINUS, yychar, yyline, yytext(), originId);
          }
        case 158: break;
        case 105: 
          { return new CPPToken(ETokenType.NEAR, yychar, yyline, yytext(), originId);
          }
        case 159: break;
        case 85: 
          { return new CPPToken(ETokenType.TRADITIONAL_COMMENT, yychar, yyline, yytext(), originId);
          }
        case 160: break;
        case 46: 
          { yybegin(YYINITIAL); 
                                   return new CPPToken(ETokenType.UNTERMINATED_CHARACTER_LITERAL, yychar-string.length()-1, yyline, "`"+string.toString()+"`", originId);
          }
        case 161: break;
        case 108: 
          { return new CPPToken(ETokenType.SHORT, yychar, yyline, yytext(), originId);
          }
        case 162: break;
        case 102: 
          { return new CPPToken(ETokenType.CONST, yychar, yyline, yytext(), originId);
          }
        case 163: break;
        case 57: 
          { return new CPPToken(ETokenType.LTEQ, yychar, yyline, yytext(), originId);
          }
        case 164: break;
        case 65: 
          { return new CPPToken(ETokenType.MINUSEQ, yychar, yyline, yytext(), originId);
          }
        case 165: break;
        case 3: 
          { yyline -= 1;
          }
        case 166: break;
        case 69: 
          { return new CPPToken(ETokenType.ANDAND, yychar, yyline, yytext(), originId);
          }
        case 167: break;
        case 117: 
          { return new CPPToken(ETokenType.SIGNED, yychar, yyline, yytext(), originId);
          }
        case 168: break;
        case 42: 
          { yybegin(YYINITIAL); return new CPPToken(ETokenType.PREPROCESSOR_DIRECTIVE, yychar-string.length(), yyline, string.toString(), originId);
          }
        case 169: break;
        case 30: 
          { return new CPPToken(ETokenType.OR, yychar, yyline, yytext(), originId);
          }
        case 170: break;
        case 77: 
          { return new CPPToken(ETokenType.NEW, yychar, yyline, yytext(), originId);
          }
        case 171: break;
        case 51: 
          { return new CPPToken(ETokenType.MULTEQ, yychar, yyline, yytext(), originId);
          }
        case 172: break;
        case 81: 
          { return new CPPToken(ETokenType.ELLIPSIS, yychar, yyline, yytext(), originId);
          }
        case 173: break;
        case 37: 
          { yybegin(YYINITIAL); 
  								   return new CPPToken(ETokenType.UNTERMINATED_CHARACTER_LITERAL, yychar-string.length()-1, yyline, "'"+string.toString()+"'", originId);
          }
        case 174: break;
        case 97: 
          { return new CPPToken(ETokenType.VOID, yychar, yyline, yytext(), originId);
          }
        case 175: break;
        case 17: 
          { return new CPPToken(ETokenType.RPAREN, yychar, yyline, yytext(), originId);
          }
        case 176: break;
        case 136: 
          { return new CPPToken(ETokenType.NAMESPACE, yychar, yyline, yytext(), originId);
          }
        case 177: break;
        case 132: 
          { return new CPPToken(ETokenType.TEMPLATE, yychar, yyline, yytext(), originId);
          }
        case 178: break;
        case 118: 
          { return new CPPToken(ETokenType.SIZEOF, yychar, yyline, yytext(), originId);
          }
        case 179: break;
        case 87: 
          { return new CPPToken(ETokenType.CHAR, yychar, yyline, yytext(), originId);
          }
        case 180: break;
        case 104: 
          { return new CPPToken(ETokenType.USING, yychar, yyline, yytext(), originId);
          }
        case 181: break;
        case 54: 
          { return new CPPToken(ETokenType.FLOATING_POINT_LITERAL, yychar, yyline, yytext(), originId);
          }
        case 182: break;
        case 73: 
          { return new CPPToken(ETokenType.MODEQ, yychar, yyline, yytext(), originId);
          }
        case 183: break;
        case 31: 
          { return new CPPToken(ETokenType.XOR, yychar, yyline, yytext(), originId);
          }
        case 184: break;
        case 1: 
          { return new CPPToken(ETokenType.ILLEGAL_CHARACTER, yychar, yyline, yytext(), originId);
          }
        case 185: break;
        case 50: 
          { return new CPPToken(ETokenType.DIVEQ, yychar, yyline, yytext(), originId);
          }
        case 186: break;
        case 56: 
          { return new CPPToken(ETokenType.LSHIFT, yychar, yyline, yytext(), originId);
          }
        case 187: break;
        case 70: 
          { return new CPPToken(ETokenType.OREQ, yychar, yyline, yytext(), originId);
          }
        case 188: break;
        case 27: 
          { return new CPPToken(ETokenType.QUESTION, yychar, yyline, yytext(), originId);
          }
        case 189: break;
        case 128: 
          { return new CPPToken(ETokenType.VIRTUAL, yychar, yyline, yytext(), originId);
          }
        case 190: break;
        case 119: 
          { return new CPPToken(ETokenType.STATIC, yychar, yyline, yytext(), originId);
          }
        case 191: break;
        case 63: 
          { return new CPPToken(ETokenType.POINTERTO, yychar, yyline, yytext(), originId);
          }
        case 192: break;
        case 106: 
          { return new CPPToken(ETokenType.THROW, yychar, yyline, yytext(), originId);
          }
        case 193: break;
        case 86: 
          { return new CPPToken(ETokenType.CASE, yychar, yyline, yytext(), originId);
          }
        case 194: break;
        case 13: 
          { return new CPPToken(ETokenType.PLUS, yychar, yyline, yytext(), originId);
          }
        case 195: break;
        case 80: 
          { return new CPPToken(ETokenType.RSHIFTEQ, yychar, yyline, yytext(), originId);
          }
        case 196: break;
        case 12: 
          { return new CPPToken(ETokenType.DOT, yychar, yyline, yytext(), originId);
          }
        case 197: break;
        case 125: 
          { return new CPPToken(ETokenType.DEFAULT, yychar, yyline, yytext(), originId);
          }
        case 198: break;
        case 60: 
          { return new CPPToken(ETokenType.DOTSTAR, yychar, yyline, yytext(), originId);
          }
        case 199: break;
        case 129: 
          { return new CPPToken(ETokenType.CONTINUE, yychar, yyline, yytext(), originId);
          }
        case 200: break;
        case 79: 
          { return new CPPToken(ETokenType.URSHIFT, yychar, yyline, yytext(), originId);
          }
        case 201: break;
        case 76: 
          { return new CPPToken(ETokenType.FOR, yychar, yyline, yytext(), originId);
          }
        case 202: break;
        case 8: 
          { return new CPPToken(ETokenType.INTEGER_LITERAL, yychar, yyline, yytext(), originId);
          }
        case 203: break;
        case 36: 
          { yybegin(YYINITIAL); string.append(yytext());
                                   return new CPPToken(ETokenType.STRING_LITERAL, yychar-string.length()+1, yyline, string.toString(), originId);
          }
        case 204: break;
        case 88: 
          { return new CPPToken(ETokenType.LONG, yychar, yyline, yytext(), originId);
          }
        case 205: break;
        case 28: 
          { return new CPPToken(ETokenType.COLON, yychar, yyline, yytext(), originId);
          }
        case 206: break;
        case 130: 
          { return new CPPToken(ETokenType.UNSIGNED, yychar, yyline, yytext(), originId);
          }
        case 207: break;
        case 100: 
          { return new CPPToken(ETokenType.CLASS, yychar, yyline, yytext(), originId);
          }
        case 208: break;
        case 67: 
          { return new CPPToken(ETokenType.SCOPE, yychar, yyline, yytext(), originId);
          }
        case 209: break;
        case 83: 
          { return new CPPToken(ETokenType.ARROWSTAR, yychar, yyline, yytext(), originId);
          }
        case 210: break;
        case 23: 
          { return new CPPToken(ETokenType.COMMA, yychar, yyline, yytext(), originId);
          }
        case 211: break;
        case 121: 
          { return new CPPToken(ETokenType.SWITCH, yychar, yyline, yytext(), originId);
          }
        case 212: break;
        case 72: 
          { return new CPPToken(ETokenType.XOREQ, yychar, yyline, yytext(), originId);
          }
        case 213: break;
        case 14: 
          { yybegin(CHARLITERAL); string.setLength(0);
          }
        case 214: break;
        case 126: 
          { return new CPPToken(ETokenType.TYPEDEF, yychar, yyline, yytext(), originId);
          }
        case 215: break;
        case 41: 
          { string.append(yytext());
          }
        case 216: break;
        case 68: 
          { return new CPPToken(ETokenType.ANDEQ, yychar, yyline, yytext(), originId);
          }
        case 217: break;
        case 49: 
          { return new CPPToken(ETokenType.END_OF_LINE_COMMENT, yychar, yyline, yytext(), originId);
          }
        case 218: break;
        case 32: 
          { return new CPPToken(ETokenType.MOD, yychar, yyline, yytext(), originId);
          }
        case 219: break;
        case 58: 
          { return new CPPToken(ETokenType.RSHIFT, yychar, yyline, yytext(), originId);
          }
        case 220: break;
        case 10: 
          { return new CPPToken(ETokenType.GT, yychar, yyline, yytext(), originId);
          }
        case 221: break;
        case 78: 
          { return new CPPToken(ETokenType.LSHIFTEQ, yychar, yyline, yytext(), originId);
          }
        case 222: break;
        case 82: 
          { return new CPPToken(ETokenType.TRY, yychar, yyline, yytext(), originId);
          }
        case 223: break;
        case 89: 
          { return new CPPToken(ETokenType.ENUM, yychar, yyline, yytext(), originId);
          }
        case 224: break;
        case 26: 
          { return new CPPToken(ETokenType.COMP, yychar, yyline, yytext(), originId);
          }
        case 225: break;
        case 7: 
          { return new CPPToken(ETokenType.IDENTIFIER, yychar, yyline, yytext(), originId);
          }
        case 226: break;
        case 109: 
          { return new CPPToken(ETokenType.WHILE, yychar, yyline, yytext(), originId);
          }
        case 227: break;
        case 71: 
          { return new CPPToken(ETokenType.OROR, yychar, yyline, yytext(), originId);
          }
        case 228: break;
        case 22: 
          { return new CPPToken(ETokenType.SEMICOLON, yychar, yyline, yytext(), originId);
          }
        case 229: break;
        case 101: 
          { return new CPPToken(ETokenType.CATCH, yychar, yyline, yytext(), originId);
          }
        case 230: break;
        case 84: 
          { yybegin(PREPROCESSOR_IGNORE_IF_NULL); string.setLength(0); string.append(yytext());
          }
        case 231: break;
        case 75: 
          { return new CPPToken(ETokenType.INT, yychar, yyline, yytext(), originId);
          }
        case 232: break;
        case 9: 
          { return new CPPToken(ETokenType.LT, yychar, yyline, yytext(), originId);
          }
        case 233: break;
        case 39: 
          { yybegin(YYINITIAL); 
                                   return new CPPToken(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()-1, yyline, "`"+string.toString()+"`", originId);
          }
        case 234: break;
        case 103: 
          { return new CPPToken(ETokenType.UNION, yychar, yyline, yytext(), originId);
          }
        case 235: break;
        case 95: 
          { return new CPPToken(ETokenType.THIS, yychar, yyline, yytext(), originId);
          }
        case 236: break;
        case 113: 
          { return new CPPToken(ETokenType.DELETE, yychar, yyline, yytext(), originId);
          }
        case 237: break;
        case 135: 
          { return new CPPToken(ETokenType.VOLATILE, yychar, yyline, yytext(), originId);
          }
        case 238: break;
        case 66: 
          { return new CPPToken(ETokenType.EQEQ, yychar, yyline, yytext(), originId);
          }
        case 239: break;
        case 131: 
          { return new CPPToken(ETokenType.REGISTER, yychar, yyline, yytext(), originId);
          }
        case 240: break;
        case 134: 
          { return new CPPToken(ETokenType.OPERATOR, yychar, yyline, yytext(), originId);
          }
        case 241: break;
        case 98: 
          { if (isMacroSwallowedComment(yytext())) {
                                   // swallow single line comment, as more tokens might follow
                                   string.append(yytext());
                               } else {
                                   yybegin(YYINITIAL); 
                                   pushToken(new CPPToken(ETokenType.TRADITIONAL_COMMENT, yychar, yyline, yytext(), originId));
                                   return new CPPToken(ETokenType.PREPROCESSOR_DIRECTIVE, yychar-string.length(), yyline, string.toString(), originId);
                               }
          }
        case 242: break;
        case 53: 
          { return new CPPToken(ETokenType.IF, yychar, yyline, yytext(), originId);
          }
        case 243: break;
        case 64: 
          { return new CPPToken(ETokenType.MINUSMINUS, yychar, yyline, yytext(), originId);
          }
        case 244: break;
        case 138: 
          { return new CPPToken(ETokenType.REDECLARED, yychar, yyline, yytext(), originId);
          }
        case 245: break;
        case 107: 
          { return new CPPToken(ETokenType.BREAK, yychar, yyline, yytext(), originId);
          }
        case 246: break;
        case 120: 
          { return new CPPToken(ETokenType.STRUCT, yychar, yyline, yytext(), originId);
          }
        case 247: break;
        case 116: 
          { return new CPPToken(ETokenType.RETURN, yychar, yyline, yytext(), originId);
          }
        case 248: break;
        case 114: 
          { return new CPPToken(ETokenType.DOUBLE, yychar, yyline, yytext(), originId);
          }
        case 249: break;
        case 94: 
          { return new CPPToken(ETokenType.BOOLEAN_LITERAL, yychar, yyline, yytext(), originId);
          }
        case 250: break;
        case 44: 
          { yybegin(CHAR_IN_PREPROCESSOR); string.append(yytext());
          }
        case 251: break;
        case 90: 
          { return new CPPToken(ETokenType.ELSE, yychar, yyline, yytext(), originId);
          }
        case 252: break;
        case 61: 
          { return new CPPToken(ETokenType.PLUSPLUS, yychar, yyline, yytext(), originId);
          }
        case 253: break;
        case 2: 
          { /* ignore */
          }
        case 254: break;
        case 92: 
          { return new CPPToken(ETokenType.FAR, yychar, yyline, yytext(), originId);
          }
        case 255: break;
        case 35: 
          { yybegin(YYINITIAL); string.append(yytext());
  								   return new CPPToken(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()+1, yyline, string.toString(), originId);
          }
        case 256: break;
        case 123: 
          { yybegin(YYINITIAL); return new CPPToken(ETokenType.IF_ZERO_BLOCK, yychar-string.length(), yyline, string.toString()+yytext(), originId);
          }
        case 257: break;
        case 25: 
          { return new CPPToken(ETokenType.EQ, yychar, yyline, yytext(), originId);
          }
        case 258: break;
        case 111: 
          { return new CPPToken(ETokenType.INLINE, yychar, yyline, yytext(), originId);
          }
        case 259: break;
        case 20: 
          { return new CPPToken(ETokenType.LBRACK, yychar, yyline, yytext(), originId);
          }
        case 260: break;
        case 34: 
          { string.append( yytext() );
          }
        case 261: break;
        case 137: 
          { return new CPPToken(ETokenType.PROTECTED, yychar, yyline, yytext(), originId);
          }
        case 262: break;
        case 112: 
          { return new CPPToken(ETokenType.FRIEND, yychar, yyline, yytext(), originId);
          }
        case 263: break;
        case 5: 
          { return new CPPToken(ETokenType.MULT, yychar, yyline, yytext(), originId);
          }
        case 264: break;
        case 124: 
          { if (isMacroSwallowedComment(yytext())) {
                                   // swallow single line comment, as more tokens might follow
                                   string.append(yytext());
                               } else {
                                   yybegin(YYINITIAL); 
                                   pushToken(new CPPToken(ETokenType.DOCUMENTATION_COMMENT, yychar, yyline, yytext(), originId));
                                   return new CPPToken(ETokenType.PREPROCESSOR_DIRECTIVE, yychar-string.length(), yyline, string.toString(), originId);
                               }
          }
        case 265: break;
        case 133: 
          { return new CPPToken(ETokenType.TYPENAME, yychar, yyline, yytext(), originId);
          }
        case 266: break;
        case 45: 
          { yybegin(PREPROCESSOR_DIRECTIVE); string.append(yytext());
          }
        case 267: break;
        case 59: 
          { return new CPPToken(ETokenType.GTEQ, yychar, yyline, yytext(), originId);
          }
        case 268: break;
        case 18: 
          { return new CPPToken(ETokenType.LBRACE, yychar, yyline, yytext(), originId);
          }
        case 269: break;
        case 99: 
          { return new CPPToken(ETokenType.FLOAT, yychar, yyline, yytext(), originId);
          }
        case 270: break;
        case 29: 
          { return new CPPToken(ETokenType.AND, yychar, yyline, yytext(), originId);
          }
        case 271: break;
        case 62: 
          { return new CPPToken(ETokenType.PLUSEQ, yychar, yyline, yytext(), originId);
          }
        case 272: break;
        case 55: 
          { return new CPPToken(ETokenType.DO, yychar, yyline, yytext(), originId);
          }
        case 273: break;
        case 52: 
          { return new CPPToken(ETokenType.NOTEQ, yychar, yyline, yytext(), originId);
          }
        case 274: break;
        case 115: 
          { return new CPPToken(ETokenType.EXTERN, yychar, yyline, yytext(), originId);
          }
        case 275: break;
        case 43: 
          { yybegin(STRING_IN_PREPROCESSOR); string.append(yytext());
          }
        case 276: break;
        case 93: 
          { return new CPPToken(ETokenType.AUTO, yychar, yyline, yytext(), originId);
          }
        case 277: break;
        case 6: 
          { return new CPPToken(ETokenType.NOT, yychar, yyline, yytext(), originId);
          }
        case 278: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case STRING: {
              yybegin(YYINITIAL); string.append(yytext());
  								   return new CPPToken(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()+1, yyline, string.toString(), originId);
            }
            case 490: break;
            case CHAR_IN_PREPROCESSOR: {
              yybegin(YYINITIAL); 
                                   return new CPPToken(ETokenType.UNTERMINATED_CHARACTER_LITERAL, yychar-string.length()-1, yyline, "`"+string.toString()+"`", originId);
            }
            case 491: break;
            case BACKTICK_STRING: {
              yybegin(YYINITIAL); 
                                   return new CPPToken(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()-1, yyline, "`"+string.toString()+"`", originId);
            }
            case 492: break;
            case PREPROCESSOR_DIRECTIVE: {
              yybegin(YYINITIAL); return new CPPToken(ETokenType.PREPROCESSOR_DIRECTIVE, yychar-string.length(), yyline, string.toString(), originId);
            }
            case 493: break;
            case STRING_IN_PREPROCESSOR: {
              yybegin(YYINITIAL); 
                                   return new CPPToken(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()-1, yyline, "`"+string.toString()+"`", originId);
            }
            case 494: break;
            case CHARLITERAL: {
              yybegin(YYINITIAL); 
  								   return new CPPToken(ETokenType.UNTERMINATED_CHARACTER_LITERAL, yychar-string.length()-1, yyline, "'"+string.toString()+"'", originId);
            }
            case 495: break;
            default:
              {
                return new CPPToken(ETokenType.EOF, yychar, yyline, yytext(), originId);
              }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
