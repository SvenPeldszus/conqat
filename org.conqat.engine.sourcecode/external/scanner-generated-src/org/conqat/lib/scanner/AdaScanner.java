/* The following code was generated by JFlex 1.4.2 on {{TIMESTAMP}} */

/* Based on ISO/IEC 8652:1995
	as found on http://www.adahome.com/rm95/
 */

package org.conqat.lib.scanner;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on {{TIMESTAMP}} from the specification file
 * <tt>/home/freakout/cqse/repositories/conqat/trunk/lib/org.conqat.lib.scanner/grammars/ada.flex</tt>
 */
class AdaScanner implements ILenientScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\30\1\3\1\0\1\31\1\2\22\0\1\30\1\0\1\22"+
    "\1\12\2\0\1\51\1\21\1\60\1\61\1\50\1\10\1\62\1\11"+
    "\1\6\1\52\12\1\1\57\1\27\1\53\1\54\1\55\2\0\1\13"+
    "\1\14\1\15\1\16\1\7\1\20\1\25\1\44\1\36\1\5\1\45"+
    "\1\35\1\26\1\37\1\32\1\23\1\47\1\24\1\34\1\33\1\42"+
    "\1\46\1\43\1\41\1\40\1\5\4\0\1\4\1\0\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\25\1\44\1\36\1\5\1\45\1\35"+
    "\1\26\1\37\1\32\1\23\1\47\1\24\1\34\1\33\1\42\1\46"+
    "\1\43\1\41\1\40\1\5\1\0\1\56\55\0\1\5\12\0\1\5"+
    "\4\0\1\5\5\0\27\5\1\0\7\5\30\5\1\0\10\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\2\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\2\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\2\5\1\5\1\5"+
    "\1\5\1\5\3\5\2\5\1\5\1\5\1\5\2\5\1\5\3\5"+
    "\2\5\4\5\1\5\2\5\1\5\3\5\3\5\2\5\1\5\2\5"+
    "\1\5\1\5\1\5\1\5\1\5\2\5\1\5\1\5\2\5\1\5"+
    "\1\5\2\5\1\5\3\5\1\5\1\5\1\5\2\5\2\5\1\0"+
    "\1\5\3\5\4\0\1\5\1\0\1\5\1\5\1\0\1\5\1\5"+
    "\1\0\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\2\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\2\5\1\5\1\0\1\5\1\5"+
    "\1\5\3\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\7\5\2\5\1\5\2\5\2\5\1\5\1\5\4\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\105\5\1\0\44\5\7\0"+
    "\2\5\36\0\5\5\140\0\1\5\52\0\1\5\1\5\1\5\1\5"+
    "\2\0\1\5\1\5\2\0\4\5\10\0\1\5\1\0\3\5\1\0"+
    "\1\5\1\0\2\5\1\5\21\5\1\0\11\5\43\5\1\5\2\5"+
    "\3\5\3\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\5\5\1\5\1\5\1\0\1\5"+
    "\1\5\2\5\2\5\63\5\60\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\10\0"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\2\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\2\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\11\0\46\5\12\0\47\5"+
    "\u0b18\0\46\5\u0c3a\0\300\5\100\0\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\11\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\11\5\10\5\6\5\2\0\6\5\2\0\10\5\10\5"+
    "\10\5\10\5\6\5\2\0\6\5\2\0\10\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\10\5\10\5\16\5\2\0\10\5"+
    "\10\0\10\5\10\0\10\5\10\0\5\5\1\0\2\5\4\5\2\0"+
    "\1\5\3\0\3\5\1\0\2\5\4\5\4\0\4\5\2\0\2\5"+
    "\4\5\4\0\10\5\5\5\5\0\3\5\1\0\2\5\4\5\224\0"+
    "\5\5\155\0\1\5\4\0\1\5\2\0\1\5\3\5\2\5\3\5"+
    "\1\5\1\0\1\5\3\0\5\5\6\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\0\1\5\4\5\1\5\4\0\1\5\2\0"+
    "\2\5\2\5\5\0\1\5\4\5\4\0\1\5\21\0\20\5\20\5"+
    "\3\0\1\5\1\5\u0331\0\32\5\32\5\u0716\0\57\5\1\0\57\5"+
    "\1\0\1\5\1\5\3\5\2\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\4\5\1\5\1\5\2\5\1\5\10\5\3\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\2\5\6\0\1\5\1\5"+
    "\1\5\1\5\21\0\46\5\u791a\0\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\22\0\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\212\0\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\3\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\12\5\1\5\1\5\1\5\1\5\2\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\1\5\3\0\1\5\1\5"+
    "\1\5\1\5\1\0\1\5\1\5\16\0\1\5\1\5\1\5\1\5"+
    "\1\5\1\5\1\5\1\5\1\5\1\5\120\0\1\5\u5305\0\7\5"+
    "\14\0\5\5\u0409\0\32\5\6\0\32\5\245\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\5\1\4\1\6"+
    "\1\7\5\4\1\10\1\1\4\4\1\11\1\12\11\4"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\5\0\1\26\3\4\1\27\3\4"+
    "\1\30\7\4\1\31\3\4\3\0\1\32\7\4\1\33"+
    "\1\34\12\4\1\35\1\36\1\37\10\4\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\2\2\2\0"+
    "\1\4\1\50\3\4\2\27\1\4\1\51\2\4\1\52"+
    "\1\4\1\53\7\4\1\54\1\4\1\55\1\0\5\4"+
    "\1\56\10\4\1\57\1\4\1\60\12\4\1\61\1\62"+
    "\1\4\1\63\1\64\4\4\1\0\1\65\1\66\3\4"+
    "\1\67\6\4\1\70\1\71\6\4\1\0\15\4\1\72"+
    "\3\4\1\73\1\74\1\75\3\4\1\76\1\4\1\77"+
    "\1\4\1\100\1\101\1\4\2\0\1\102\1\103\1\4"+
    "\1\104\3\4\1\105\1\4\1\106\2\4\1\107\1\110"+
    "\2\4\1\111\12\4\1\112\1\113\10\4\1\114\1\115"+
    "\1\65\1\0\2\4\1\116\1\117\3\4\1\120\6\4"+
    "\1\121\1\122\4\4\1\123\1\4\1\124\1\4\1\125"+
    "\4\4\1\126\1\4\1\127\1\4\1\130\1\0\2\4"+
    "\1\131\1\132\1\133\1\134\1\135\2\4\1\136\1\137"+
    "\1\4\1\140\1\141\1\142\1\0\3\4\1\143\1\144"+
    "\1\145\1\146\1\147\1\150";

  private static int [] zzUnpackAction() {
    int [] result = new int[330];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\63\0\314\0\377\0\u0132"+
    "\0\63\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297"+
    "\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\63\0\63\0\u03c9"+
    "\0\u03fc\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561"+
    "\0\u0594\0\63\0\u05c7\0\u05fa\0\63\0\u062d\0\63\0\u0660"+
    "\0\63\0\63\0\63\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f"+
    "\0\63\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4"+
    "\0\314\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29"+
    "\0\314\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u02ca\0\u0b5b"+
    "\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\314"+
    "\0\314\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25"+
    "\0\u0e58\0\u0e8b\0\u0ebe\0\314\0\314\0\314\0\u0ef1\0\u0f24"+
    "\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\63\0\63"+
    "\0\63\0\63\0\63\0\63\0\63\0\63\0\u1089\0\u10bc"+
    "\0\u10ef\0\u1122\0\u1155\0\314\0\u1188\0\u11bb\0\u11ee\0\u1221"+
    "\0\63\0\u1254\0\u1287\0\u12ba\0\u12ed\0\314\0\u1320\0\314"+
    "\0\u1353\0\u1386\0\u13b9\0\u13ec\0\u141f\0\u1452\0\u1485\0\314"+
    "\0\u14b8\0\u14eb\0\u14eb\0\u151e\0\u1551\0\u1584\0\u15b7\0\u15ea"+
    "\0\314\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c\0\u174f"+
    "\0\u1782\0\314\0\u17b5\0\314\0\u17e8\0\u181b\0\u184e\0\u1881"+
    "\0\u18b4\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3\0\314\0\314"+
    "\0\u19e6\0\314\0\314\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5"+
    "\0\u1b18\0\314\0\u1b4b\0\u1b7e\0\u1bb1\0\314\0\u1be4\0\u1c17"+
    "\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3\0\314\0\314\0\u1d16\0\u1d49"+
    "\0\u1d7c\0\u1daf\0\u1de2\0\u1e15\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1"+
    "\0\u1f14\0\u1f47\0\u1f7a\0\u1fad\0\u1fe0\0\u2013\0\u2046\0\u2079"+
    "\0\u20ac\0\u20df\0\314\0\u2112\0\u2145\0\u2178\0\314\0\314"+
    "\0\314\0\u21ab\0\u21de\0\u2211\0\314\0\u2244\0\314\0\u2277"+
    "\0\314\0\314\0\u22aa\0\u22dd\0\u2310\0\314\0\314\0\u2343"+
    "\0\314\0\u2376\0\u23a9\0\u23dc\0\314\0\u240f\0\314\0\u2442"+
    "\0\u2475\0\314\0\314\0\u24a8\0\u24db\0\63\0\u250e\0\u2541"+
    "\0\u2574\0\u25a7\0\u25da\0\u260d\0\u2640\0\u2673\0\u26a6\0\u26d9"+
    "\0\314\0\314\0\u270c\0\u273f\0\u2772\0\u27a5\0\u27d8\0\u280b"+
    "\0\u283e\0\u2871\0\314\0\314\0\u28a4\0\u28d7\0\u290a\0\u293d"+
    "\0\314\0\314\0\u2970\0\u29a3\0\u29d6\0\314\0\u2a09\0\u2a3c"+
    "\0\u2a6f\0\u2aa2\0\u2ad5\0\u2b08\0\314\0\314\0\u2b3b\0\u2b6e"+
    "\0\u2ba1\0\u2bd4\0\314\0\u2c07\0\314\0\u2c3a\0\314\0\u2c6d"+
    "\0\u2ca0\0\u2cd3\0\u2d06\0\314\0\u2d39\0\314\0\u2d6c\0\314"+
    "\0\u2d9f\0\u2dd2\0\u2e05\0\314\0\314\0\314\0\314\0\314"+
    "\0\u2e38\0\u2e6b\0\314\0\314\0\u2e9e\0\314\0\314\0\314"+
    "\0\u2ed1\0\u2f04\0\u2f37\0\u2f6a\0\314\0\314\0\63\0\314"+
    "\0\314\0\314";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[330];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\11\1\12\1\2\1\13\1\14\1\15\1\16\1\10"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\5\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\6\1\36\1\37\1\40\4\6\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\64\0\1\3\2\0\1\54\1\0\1\55\1\56\2\0"+
    "\1\57\53\0\1\5\60\0\1\6\2\0\1\60\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\4\6\3\0\16\6"+
    "\21\0\1\61\55\0\1\6\2\0\1\60\1\6\1\0"+
    "\1\6\3\0\6\6\2\0\4\6\3\0\3\6\1\62"+
    "\1\6\1\63\1\6\1\64\6\6\24\0\1\65\52\0"+
    "\1\6\2\0\1\60\1\6\1\0\1\6\3\0\1\6"+
    "\1\66\1\67\3\6\2\0\1\6\1\70\2\6\3\0"+
    "\1\6\1\71\1\6\1\72\1\6\1\73\10\6\14\0"+
    "\1\6\2\0\1\60\1\6\1\0\1\74\3\0\4\6"+
    "\1\74\1\6\2\0\4\6\3\0\1\75\15\6\14\0"+
    "\1\6\2\0\1\60\1\6\1\0\1\6\3\0\1\76"+
    "\5\6\2\0\4\6\3\0\1\77\15\6\14\0\1\6"+
    "\2\0\1\60\1\6\1\0\1\100\3\0\4\6\1\100"+
    "\1\6\2\0\4\6\3\0\1\101\3\6\1\102\11\6"+
    "\14\0\1\6\2\0\1\60\1\6\1\0\1\6\3\0"+
    "\6\6\2\0\4\6\3\0\1\103\7\6\1\104\5\6"+
    "\13\0\2\105\2\106\57\105\2\107\2\0\16\107\1\110"+
    "\40\107\1\0\1\6\2\0\1\60\1\6\1\0\1\6"+
    "\3\0\1\111\5\6\2\0\1\6\1\112\2\6\3\0"+
    "\16\6\14\0\1\6\2\0\1\60\1\6\1\0\1\113"+
    "\3\0\1\114\3\6\1\113\1\6\2\0\4\6\3\0"+
    "\16\6\14\0\1\6\2\0\1\60\1\6\1\0\1\115"+
    "\3\0\4\6\1\115\1\6\2\0\4\6\3\0\1\116"+
    "\15\6\14\0\1\6\2\0\1\60\1\6\1\0\1\6"+
    "\3\0\6\6\2\0\4\6\3\0\1\117\15\6\14\0"+
    "\1\6\2\0\1\60\1\6\1\0\1\6\3\0\5\6"+
    "\1\120\2\0\1\6\1\121\2\6\3\0\1\6\1\122"+
    "\6\6\1\123\5\6\14\0\1\6\2\0\1\60\1\6"+
    "\1\0\1\124\3\0\1\125\3\6\1\124\1\6\2\0"+
    "\4\6\3\0\6\6\1\126\3\6\1\127\3\6\14\0"+
    "\1\6\2\0\1\60\1\6\1\0\1\130\3\0\4\6"+
    "\1\130\1\6\2\0\4\6\3\0\10\6\1\131\5\6"+
    "\14\0\1\6\2\0\1\60\1\6\1\0\1\6\3\0"+
    "\6\6\2\0\4\6\3\0\1\132\3\6\1\133\11\6"+
    "\14\0\1\6\2\0\1\60\1\6\1\0\1\6\3\0"+
    "\5\6\1\134\2\0\4\6\3\0\2\6\1\135\2\6"+
    "\1\136\10\6\14\0\1\6\2\0\1\60\1\6\1\0"+
    "\1\137\3\0\4\6\1\137\1\6\2\0\4\6\3\0"+
    "\1\140\7\6\1\141\5\6\14\0\1\6\2\0\1\60"+
    "\1\6\1\0\1\6\3\0\6\6\2\0\4\6\3\0"+
    "\1\142\15\6\14\0\1\6\2\0\1\60\1\6\1\0"+
    "\1\6\3\0\6\6\2\0\4\6\3\0\2\6\1\143"+
    "\2\6\1\144\10\6\14\0\1\6\2\0\1\60\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\4\6\3\0\4\6"+
    "\1\145\5\6\1\146\3\6\63\0\1\147\66\0\1\150"+
    "\61\0\1\151\1\152\1\153\61\0\1\154\1\155\61\0"+
    "\1\156\7\0\1\3\62\0\1\157\62\0\1\160\6\0"+
    "\2\161\52\0\1\162\5\0\1\162\3\0\6\162\43\0"+
    "\1\6\3\0\1\6\1\0\1\6\3\0\6\6\2\0"+
    "\4\6\3\0\16\6\14\0\1\6\2\0\1\60\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\4\6\3\0\2\6"+
    "\1\163\13\6\14\0\1\6\2\0\1\60\1\6\1\0"+
    "\1\6\3\0\3\6\1\164\2\6\2\0\4\6\3\0"+
    "\1\6\1\165\14\6\14\0\1\6\2\0\1\60\1\6"+
    "\1\0\1\6\3\0\2\6\1\166\3\6\2\0\4\6"+
    "\3\0\4\6\1\167\11\6\13\0\2\65\1\170\1\171"+
    "\57\65\1\0\1\6\2\0\1\60\1\6\1\0\1\6"+
    "\3\0\6\6\2\0\4\6\3\0\1\172\1\6\1\173"+
    "\13\6\14\0\1\6\2\0\1\60\1\6\1\0\1\6"+
    "\3\0\2\6\1\174\3\6\2\0\4\6\3\0\16\6"+
    "\14\0\1\6\2\0\1\60\1\6\1\0\1\6\3\0"+
    "\6\6\2\0\1\6\1\175\2\6\3\0\16\6\14\0"+
    "\1\6\2\0\1\60\1\6\1\0\1\6\3\0\6\6"+
    "\2\0\4\6\3\0\3\6\1\176\1\177\11\6\14\0"+
    "\1\6\2\0\1\60\1\6\1\0\1\6\3\0\3\6"+
    "\1\200\2\6\2\0\4\6\3\0\16\6\14\0\1\6"+
    "\2\0\1\60\1\6\1\0\1\6\3\0\6\6\2\0"+
    "\2\6\1\201\1\6\3\0\16\6\14\0\1\6\2\0"+
    "\1\60\1\6\1\0\1\6\3\0\3\6\1\202\2\6"+
    "\2\0\4\6\3\0\16\6\14\0\1\6\2\0\1\60"+
    "\1\6\1\0\1\6\3\0\6\6\2\0\4\6\3\0"+
    "\2\6\1\203\13\6\14\0\1\6\2\0\1\60\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\4\6\3\0\5\6"+
    "\1\204\10\6\14\0\1\6\2\0\1\60\1\6\1\0"+
    "\1\6\3\0\2\6\1\205\3\6\2\0\4\6\3\0"+
    "\3\6\1\206\12\6\14\0\1\6\2\0\1\60\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\2\6\1\207\1\6"+
    "\3\0\16\6\14\0\1\6\2\0\1\60\1\6\1\0"+
    "\1\6\3\0\6\6\2\0\1\6\1\210\2\6\3\0"+
    "\16\6\14\0\1\6\2\0\1\60\1\6\1\0\1\6"+
    "\3\0\6\6\2\0\4\6\3\0\5\6\1\211\10\6"+
    "\34\0\1\212\62\0\1\213\63\0\1\107\41\0\1\6"+
    "\2\0\1\60\1\6\1\0\1\6\3\0\2\6\1\214"+
    "\3\6\2\0\4\6\3\0\16\6\14\0\1\6\2\0"+
    "\1\60\1\6\1\0\1\6\3\0\1\215\5\6\2\0"+
    "\4\6\3\0\1\216\3\6\1\217\11\6\14\0\1\6"+
    "\2\0\1\60\1\6\1\0\1\6\3\0\2\6\1\220"+
    "\3\6\2\0\3\6\1\221\3\0\1\6\1\222\3\6"+
    "\1\223\6\6\1\224\1\225\14\0\1\6\2\0\1\60"+
    "\1\6\1\0\1\6\3\0\6\6\2\0\4\6\3\0"+
    "\4\6\1\226\1\227\10\6\14\0\1\6\2\0\1\60"+
    "\1\6\1\0\1\6\3\0\6\6\2\0\4\6\3\0"+
    "\5\6\1\230\10\6\14\0\1\6\2\0\1\60\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\4\6\3\0\1\6"+
    "\1\231\14\6\14\0\1\6\2\0\1\60\1\6\1\0"+
    "\1\6\3\0\3\6\1\232\2\6\2\0\4\6\3\0"+
    "\16\6\14\0\1\6\2\0\1\60\1\6\1\0\1\6"+
    "\3\0\6\6\2\0\4\6\3\0\12\6\1\233\3\6"+
    "\14\0\1\6\2\0\1\60\1\6\1\0\1\6\3\0"+
    "\6\6\2\0\4\6\3\0\1\6\1\234\14\6\14\0"+
    "\1\6\2\0\1\60\1\6\1\0\1\6\3\0\6\6"+
    "\2\0\1\6\1\235\2\6\3\0\16\6\14\0\1\6"+
    "\2\0\1\60\1\6\1\0\1\6\3\0\6\6\2\0"+
    "\2\6\1\236\1\6\3\0\2\6\1\237\13\6\14\0"+
    "\1\6\2\0\1\60\1\6\1\0\1\6\3\0\6\6"+
    "\2\0\1\240\3\6\3\0\16\6\14\0\1\6\2\0"+
    "\1\60\1\6\1\0\1\241\3\0\4\6\1\241\1\6"+
    "\2\0\4\6\3\0\16\6\14\0\1\6\2\0\1\60"+
    "\1\6\1\0\1\6\3\0\6\6\2\0\1\242\3\6"+
    "\3\0\3\6\1\243\12\6\14\0\1\6\2\0\1\60"+
    "\1\6\1\0\1\6\3\0\1\6\1\244\4\6\2\0"+
    "\4\6\3\0\16\6\14\0\1\6\2\0\1\60\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\4\6\3\0\1\245"+
    "\15\6\14\0\1\6\2\0\1\60\1\6\1\0\1\6"+
    "\3\0\6\6\2\0\3\6\1\246\3\0\16\6\14\0"+
    "\1\6\2\0\1\60\1\6\1\0\1\6\3\0\6\6"+
    "\2\0\4\6\3\0\11\6\1\247\4\6\14\0\1\6"+
    "\2\0\1\60\1\6\1\0\1\6\3\0\6\6\2\0"+
    "\4\6\3\0\1\6\1\250\14\6\14\0\1\6\2\0"+
    "\1\60\1\6\1\0\1\6\3\0\6\6\2\0\4\6"+
    "\3\0\3\6\1\251\12\6\14\0\1\6\2\0\1\60"+
    "\1\6\1\0\1\6\3\0\6\6\2\0\1\6\1\252"+
    "\2\6\3\0\16\6\14\0\1\6\2\0\1\60\1\6"+
    "\1\0\1\253\3\0\4\6\1\253\1\6\2\0\4\6"+
    "\3\0\16\6\14\0\1\6\2\0\1\60\1\6\1\0"+
    "\1\6\3\0\6\6\2\0\4\6\3\0\1\6\1\254"+
    "\14\6\14\0\1\6\2\0\1\60\1\6\1\0\1\6"+
    "\3\0\6\6\2\0\4\6\3\0\1\6\1\255\14\6"+
    "\14\0\1\6\2\0\1\60\1\6\1\0\1\256\3\0"+
    "\4\6\1\256\1\6\2\0\4\6\3\0\4\6\1\257"+
    "\11\6\14\0\1\157\2\0\1\55\2\0\1\56\54\0"+
    "\1\160\2\0\1\161\57\0\1\160\62\0\1\162\2\0"+
    "\1\57\1\0\1\260\1\162\2\0\1\261\6\162\43\0"+
    "\1\6\2\0\1\60\1\6\1\0\1\262\3\0\4\6"+
    "\1\262\1\6\2\0\4\6\3\0\4\6\1\263\11\6"+
    "\14\0\1\6\2\0\1\60\1\6\1\0\1\6\3\0"+
    "\6\6\2\0\1\6\1\264\2\6\3\0\16\6\14\0"+
    "\1\6\2\0\1\60\1\6\1\0\1\265\3\0\4\6"+
    "\1\265\1\6\2\0\4\6\3\0\16\6\14\0\1\6"+
    "\2\0\1\60\1\6\1\0\1\6\3\0\6\6\2\0"+
    "\4\6\3\0\1\6\1\266\14\6\16\0\1\171\60\0"+
    "\1\6\2\0\1\60\1\6\1\0\1\6\3\0\6\6"+
    "\2\0\1\6\1\267\2\6\3\0\16\6\14\0\1\6"+
    "\2\0\1\60\1\6\1\0\1\6\3\0\6\6\2\0"+
    "\4\6\3\0\1\6\1\270\14\6\14\0\1\6\2\0"+
    "\1\60\1\6\1\0\1\271\3\0\4\6\1\271\1\6"+
    "\2\0\4\6\3\0\16\6\14\0\1\6\2\0\1\60"+
    "\1\6\1\0\1\6\3\0\1\272\5\6\2\0\4\6"+
    "\3\0\16\6\14\0\1\6\2\0\1\60\1\6\1\0"+
    "\1\6\3\0\1\273\5\6\2\0\4\6\3\0\16\6"+
    "\14\0\1\6\2\0\1\60\1\6\1\0\1\6\3\0"+
    "\6\6\2\0\4\6\3\0\4\6\1\274\11\6\14\0"+
    "\1\6\2\0\1\60\1\6\1\0\1\6\3\0\6\6"+
    "\2\0\4\6\3\0\6\6\1\275\7\6\14\0\1\6"+
    "\2\0\1\60\1\6\1\0\1\276\3\0\4\6\1\276"+
    "\1\6\2\0\4\6\3\0\16\6\14\0\1\6\2\0"+
    "\1\60\1\6\1\0\1\6\3\0\6\6\2\0\4\6"+
    "\3\0\2\6\1\277\13\6\14\0\1\6\2\0\1\60"+
    "\1\6\1\0\1\6\3\0\6\6\2\0\4\6\3\0"+
    "\3\6\1\300\12\6\14\0\1\6\2\0\1\60\1\6"+
    "\1\0\1\6\3\0\1\301\5\6\2\0\4\6\3\0"+
    "\1\6\1\302\14\6\14\0\1\6\2\0\1\60\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\4\6\3\0\4\6"+
    "\1\303\11\6\14\0\1\6\2\0\1\60\1\6\1\0"+
    "\1\6\3\0\2\6\1\304\3\6\2\0\4\6\3\0"+
    "\16\6\13\0\63\305\1\0\1\6\2\0\1\60\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\4\6\3\0\13\6"+
    "\1\306\2\6\14\0\1\6\2\0\1\60\1\6\1\0"+
    "\1\6\3\0\6\6\2\0\2\6\1\307\1\6\3\0"+
    "\16\6\14\0\1\6\2\0\1\60\1\6\1\0\1\6"+
    "\3\0\2\6\1\310\3\6\2\0\4\6\3\0\1\6"+
    "\1\311\14\6\14\0\1\6\2\0\1\60\1\6\1\0"+
    "\1\6\3\0\6\6\2\0\4\6\3\0\14\6\1\312"+
    "\1\6\14\0\1\6\2\0\1\60\1\6\1\0\1\6"+
    "\3\0\6\6\2\0\4\6\3\0\1\313\15\6\14\0"+
    "\1\6\2\0\1\60\1\6\1\0\1\6\3\0\6\6"+
    "\2\0\4\6\3\0\10\6\1\314\5\6\14\0\1\6"+
    "\2\0\1\60\1\6\1\0\1\6\3\0\1\315\5\6"+
    "\2\0\4\6\3\0\16\6\14\0\1\6\2\0\1\60"+
    "\1\6\1\0\1\316\3\0\4\6\1\316\1\6\2\0"+
    "\4\6\3\0\16\6\14\0\1\6\2\0\1\60\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\4\6\3\0\10\6"+
    "\1\317\5\6\14\0\1\6\2\0\1\60\1\6\1\0"+
    "\1\6\3\0\6\6\2\0\4\6\3\0\2\6\1\320"+
    "\13\6\14\0\1\6\2\0\1\60\1\6\1\0\1\6"+
    "\3\0\6\6\2\0\2\6\1\321\1\6\3\0\16\6"+
    "\14\0\1\6\2\0\1\60\1\6\1\0\1\322\3\0"+
    "\4\6\1\322\1\6\2\0\4\6\3\0\16\6\14\0"+
    "\1\6\2\0\1\60\1\6\1\0\1\6\3\0\6\6"+
    "\2\0\4\6\3\0\1\323\15\6\14\0\1\6\2\0"+
    "\1\60\1\6\1\0\1\324\3\0\4\6\1\324\1\6"+
    "\2\0\4\6\3\0\16\6\14\0\1\6\2\0\1\60"+
    "\1\6\1\0\1\6\3\0\6\6\2\0\3\6\1\325"+
    "\3\0\16\6\14\0\1\6\2\0\1\60\1\6\1\0"+
    "\1\6\3\0\6\6\2\0\2\6\1\326\1\6\3\0"+
    "\16\6\14\0\1\6\2\0\1\60\1\6\1\0\1\6"+
    "\3\0\6\6\2\0\4\6\3\0\13\6\1\327\2\6"+
    "\14\0\1\6\2\0\1\60\1\6\1\0\1\330\3\0"+
    "\4\6\1\330\1\6\2\0\4\6\3\0\16\6\14\0"+
    "\1\6\2\0\1\60\1\6\1\0\1\6\3\0\6\6"+
    "\2\0\4\6\3\0\5\6\1\331\10\6\14\0\1\6"+
    "\2\0\1\60\1\6\1\0\1\6\3\0\1\332\5\6"+
    "\2\0\4\6\3\0\16\6\14\0\1\6\2\0\1\60"+
    "\1\6\1\0\1\333\3\0\4\6\1\333\1\6\2\0"+
    "\4\6\3\0\16\6\14\0\1\6\2\0\1\60\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\4\6\3\0\1\6"+
    "\1\334\14\6\14\0\1\6\2\0\1\60\1\6\1\0"+
    "\1\6\3\0\6\6\2\0\1\335\3\6\3\0\16\6"+
    "\14\0\1\6\2\0\1\60\1\6\1\0\1\6\3\0"+
    "\6\6\2\0\4\6\3\0\4\6\1\336\11\6\14\0"+
    "\1\6\2\0\1\60\1\6\1\0\1\6\3\0\6\6"+
    "\2\0\4\6\3\0\3\6\1\337\12\6\14\0\1\6"+
    "\2\0\1\60\1\6\1\0\1\6\3\0\6\6\2\0"+
    "\4\6\3\0\4\6\1\340\11\6\14\0\1\6\2\0"+
    "\1\60\1\6\1\0\1\6\3\0\6\6\2\0\4\6"+
    "\3\0\12\6\1\341\3\6\14\0\1\6\2\0\1\60"+
    "\1\6\1\0\1\6\3\0\6\6\2\0\4\6\3\0"+
    "\5\6\1\342\10\6\14\0\1\6\2\0\1\60\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\4\6\3\0\3\6"+
    "\1\343\12\6\14\0\1\344\5\0\1\344\3\0\6\344"+
    "\51\0\1\345\54\0\1\6\2\0\1\60\1\6\1\0"+
    "\1\6\3\0\5\6\1\346\2\0\4\6\3\0\16\6"+
    "\14\0\1\6\2\0\1\60\1\6\1\0\1\6\3\0"+
    "\6\6\2\0\4\6\3\0\6\6\1\347\7\6\14\0"+
    "\1\6\2\0\1\60\1\6\1\0\1\6\3\0\6\6"+
    "\2\0\1\350\3\6\3\0\16\6\14\0\1\6\2\0"+
    "\1\60\1\6\1\0\1\6\3\0\6\6\2\0\4\6"+
    "\3\0\1\6\1\351\14\6\14\0\1\6\2\0\1\60"+
    "\1\6\1\0\1\6\3\0\6\6\2\0\1\6\1\352"+
    "\2\6\3\0\16\6\14\0\1\6\2\0\1\60\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\1\353\3\6\3\0"+
    "\2\6\1\354\13\6\14\0\1\6\2\0\1\60\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\4\6\3\0\6\6"+
    "\1\355\7\6\14\0\1\6\2\0\1\60\1\6\1\0"+
    "\1\6\3\0\6\6\2\0\4\6\3\0\2\6\1\356"+
    "\13\6\14\0\1\6\2\0\1\60\1\6\1\0\1\6"+
    "\3\0\6\6\2\0\4\6\3\0\5\6\1\357\10\6"+
    "\14\0\1\6\2\0\1\60\1\6\1\0\1\6\3\0"+
    "\6\6\2\0\4\6\3\0\1\6\1\360\14\6\14\0"+
    "\1\6\2\0\1\60\1\6\1\0\1\6\3\0\1\361"+
    "\5\6\2\0\4\6\3\0\16\6\14\0\1\6\2\0"+
    "\1\60\1\6\1\0\1\6\3\0\6\6\2\0\4\6"+
    "\3\0\6\6\1\362\7\6\14\0\1\6\2\0\1\60"+
    "\1\6\1\0\1\6\3\0\1\363\5\6\2\0\4\6"+
    "\3\0\16\6\14\0\1\6\2\0\1\60\1\6\1\0"+
    "\1\6\3\0\6\6\2\0\4\6\3\0\1\6\1\364"+
    "\14\6\14\0\1\6\2\0\1\60\1\6\1\0\1\6"+
    "\3\0\6\6\2\0\4\6\3\0\1\6\1\365\14\6"+
    "\34\0\1\366\42\0\1\6\2\0\1\60\1\6\1\0"+
    "\1\6\3\0\1\367\5\6\2\0\4\6\3\0\16\6"+
    "\14\0\1\6\2\0\1\60\1\6\1\0\1\6\3\0"+
    "\6\6\2\0\3\6\1\370\3\0\16\6\14\0\1\6"+
    "\2\0\1\60\1\6\1\0\1\371\3\0\4\6\1\371"+
    "\1\6\2\0\4\6\3\0\16\6\14\0\1\6\2\0"+
    "\1\60\1\6\1\0\1\372\3\0\4\6\1\372\1\6"+
    "\2\0\4\6\3\0\16\6\14\0\1\6\2\0\1\60"+
    "\1\6\1\0\1\6\3\0\1\373\5\6\2\0\4\6"+
    "\3\0\16\6\14\0\1\6\2\0\1\60\1\6\1\0"+
    "\1\6\3\0\6\6\2\0\1\6\1\374\2\6\3\0"+
    "\16\6\14\0\1\6\2\0\1\60\1\6\1\0\1\6"+
    "\3\0\6\6\2\0\1\6\1\375\2\6\3\0\16\6"+
    "\14\0\1\6\2\0\1\60\1\6\1\0\1\6\3\0"+
    "\6\6\2\0\3\6\1\376\3\0\16\6\14\0\1\6"+
    "\2\0\1\60\1\6\1\0\1\6\3\0\6\6\2\0"+
    "\1\6\1\377\2\6\3\0\16\6\14\0\1\6\2\0"+
    "\1\60\1\6\1\0\1\u0100\3\0\4\6\1\u0100\1\6"+
    "\2\0\4\6\3\0\16\6\14\0\1\6\2\0\1\60"+
    "\1\6\1\0\1\u0101\3\0\4\6\1\u0101\1\6\2\0"+
    "\4\6\3\0\16\6\14\0\1\6\2\0\1\60\1\6"+
    "\1\0\1\u0102\3\0\4\6\1\u0102\1\6\2\0\4\6"+
    "\3\0\16\6\14\0\1\6\2\0\1\60\1\6\1\0"+
    "\1\6\3\0\6\6\2\0\1\6\1\u0103\2\6\3\0"+
    "\16\6\14\0\1\6\2\0\1\60\1\6\1\0\1\6"+
    "\3\0\6\6\2\0\1\6\1\u0104\2\6\3\0\16\6"+
    "\14\0\1\6\2\0\1\60\1\6\1\0\1\6\3\0"+
    "\6\6\2\0\4\6\3\0\4\6\1\u0105\11\6\14\0"+
    "\1\6\2\0\1\60\1\6\1\0\1\u0106\3\0\4\6"+
    "\1\u0106\1\6\2\0\4\6\3\0\16\6\14\0\1\6"+
    "\2\0\1\60\1\6\1\0\1\6\3\0\6\6\2\0"+
    "\1\6\1\u0107\2\6\3\0\16\6\14\0\1\6\2\0"+
    "\1\60\1\6\1\0\1\6\3\0\2\6\1\u0108\3\6"+
    "\2\0\4\6\3\0\16\6\14\0\1\6\2\0\1\60"+
    "\1\6\1\0\1\6\3\0\6\6\2\0\4\6\3\0"+
    "\6\6\1\u0109\7\6\14\0\1\6\2\0\1\60\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\4\6\3\0\1\6"+
    "\1\u010a\14\6\14\0\1\6\2\0\1\60\1\6\1\0"+
    "\1\6\3\0\6\6\2\0\4\6\3\0\3\6\1\u010b"+
    "\12\6\14\0\1\6\2\0\1\60\1\6\1\0\1\u010c"+
    "\3\0\4\6\1\u010c\1\6\2\0\4\6\3\0\16\6"+
    "\14\0\1\344\2\0\1\260\2\0\1\344\2\0\1\261"+
    "\6\344\43\0\1\u010d\6\0\2\u010e\52\0\1\6\2\0"+
    "\1\60\1\6\1\0\1\6\3\0\6\6\2\0\4\6"+
    "\3\0\1\6\1\u010f\14\6\14\0\1\6\2\0\1\60"+
    "\1\6\1\0\1\6\3\0\1\u0110\5\6\2\0\4\6"+
    "\3\0\16\6\14\0\1\6\2\0\1\60\1\6\1\0"+
    "\1\6\3\0\6\6\2\0\4\6\3\0\1\6\1\u0111"+
    "\14\6\14\0\1\6\2\0\1\60\1\6\1\0\1\6"+
    "\3\0\6\6\2\0\4\6\3\0\2\6\1\u0112\13\6"+
    "\14\0\1\6\2\0\1\60\1\6\1\0\1\u0113\3\0"+
    "\4\6\1\u0113\1\6\2\0\4\6\3\0\16\6\14\0"+
    "\1\6\2\0\1\60\1\6\1\0\1\6\3\0\1\u0114"+
    "\5\6\2\0\4\6\3\0\16\6\14\0\1\6\2\0"+
    "\1\60\1\6\1\0\1\6\3\0\6\6\2\0\1\6"+
    "\1\u0115\2\6\3\0\16\6\14\0\1\6\2\0\1\60"+
    "\1\6\1\0\1\6\3\0\6\6\2\0\4\6\3\0"+
    "\2\6\1\u0116\13\6\14\0\1\6\2\0\1\60\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\4\6\3\0\4\6"+
    "\1\u0117\11\6\14\0\1\6\2\0\1\60\1\6\1\0"+
    "\1\6\3\0\6\6\2\0\2\6\1\u0118\1\6\3\0"+
    "\16\6\14\0\1\6\2\0\1\60\1\6\1\0\1\6"+
    "\3\0\1\u0119\5\6\2\0\4\6\3\0\16\6\14\0"+
    "\1\6\2\0\1\60\1\6\1\0\1\6\3\0\3\6"+
    "\1\u011a\2\6\2\0\4\6\3\0\16\6\14\0\1\6"+
    "\2\0\1\60\1\6\1\0\1\6\3\0\2\6\1\u011b"+
    "\3\6\2\0\4\6\3\0\16\6\14\0\1\6\2\0"+
    "\1\60\1\6\1\0\1\6\3\0\6\6\2\0\4\6"+
    "\3\0\1\6\1\u011c\14\6\14\0\1\6\2\0\1\60"+
    "\1\6\1\0\1\6\3\0\3\6\1\u011d\2\6\2\0"+
    "\4\6\3\0\16\6\14\0\1\6\2\0\1\60\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\4\6\3\0\5\6"+
    "\1\u011e\10\6\14\0\1\6\2\0\1\60\1\6\1\0"+
    "\1\u011f\3\0\4\6\1\u011f\1\6\2\0\4\6\3\0"+
    "\16\6\14\0\1\6\2\0\1\60\1\6\1\0\1\6"+
    "\3\0\6\6\2\0\4\6\3\0\2\6\1\u0120\13\6"+
    "\14\0\1\6\2\0\1\60\1\6\1\0\1\6\3\0"+
    "\6\6\2\0\4\6\3\0\10\6\1\u0121\5\6\14\0"+
    "\1\6\2\0\1\60\1\6\1\0\1\6\3\0\6\6"+
    "\2\0\4\6\3\0\4\6\1\u0122\11\6\14\0\1\6"+
    "\2\0\1\60\1\6\1\0\1\6\3\0\6\6\2\0"+
    "\4\6\3\0\2\6\1\u0123\13\6\14\0\1\6\2\0"+
    "\1\60\1\6\1\0\1\6\3\0\6\6\2\0\4\6"+
    "\3\0\5\6\1\u0124\10\6\14\0\1\6\2\0\1\60"+
    "\1\6\1\0\1\6\3\0\3\6\1\u0125\2\6\2\0"+
    "\4\6\3\0\16\6\14\0\1\6\2\0\1\60\1\6"+
    "\1\0\1\6\3\0\1\u0126\5\6\2\0\4\6\3\0"+
    "\16\6\14\0\1\6\2\0\1\60\1\6\1\0\1\6"+
    "\3\0\6\6\2\0\4\6\3\0\1\6\1\u0127\14\6"+
    "\14\0\1\6\2\0\1\60\1\6\1\0\1\6\3\0"+
    "\6\6\2\0\1\u0128\3\6\3\0\16\6\14\0\1\6"+
    "\2\0\1\60\1\6\1\0\1\u0129\3\0\4\6\1\u0129"+
    "\1\6\2\0\4\6\3\0\16\6\14\0\1\u010d\2\0"+
    "\1\u010e\57\0\1\u010d\62\0\1\6\2\0\1\60\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\4\6\3\0\4\6"+
    "\1\u012a\11\6\14\0\1\6\2\0\1\60\1\6\1\0"+
    "\1\6\3\0\2\6\1\u012b\3\6\2\0\4\6\3\0"+
    "\16\6\14\0\1\6\2\0\1\60\1\6\1\0\1\6"+
    "\3\0\3\6\1\u012c\2\6\2\0\4\6\3\0\16\6"+
    "\14\0\1\6\2\0\1\60\1\6\1\0\1\6\3\0"+
    "\6\6\2\0\4\6\3\0\5\6\1\u012d\10\6\14\0"+
    "\1\6\2\0\1\60\1\6\1\0\1\u012e\3\0\4\6"+
    "\1\u012e\1\6\2\0\4\6\3\0\16\6\14\0\1\6"+
    "\2\0\1\60\1\6\1\0\1\6\3\0\6\6\2\0"+
    "\4\6\3\0\1\u012f\15\6\14\0\1\6\2\0\1\60"+
    "\1\6\1\0\1\u0130\3\0\4\6\1\u0130\1\6\2\0"+
    "\4\6\3\0\16\6\14\0\1\6\2\u0131\1\60\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\4\6\1\0\1\u0131"+
    "\1\0\16\6\14\0\1\6\2\0\1\60\1\6\1\0"+
    "\1\6\3\0\6\6\2\0\4\6\3\0\10\6\1\u0132"+
    "\5\6\14\0\1\6\2\0\1\60\1\6\1\0\1\6"+
    "\3\0\6\6\2\0\4\6\3\0\1\6\1\u0133\14\6"+
    "\14\0\1\6\2\0\1\60\1\6\1\0\1\u0134\3\0"+
    "\4\6\1\u0134\1\6\2\0\4\6\3\0\16\6\14\0"+
    "\1\6\2\0\1\60\1\6\1\0\1\6\3\0\6\6"+
    "\2\0\4\6\3\0\2\6\1\u0135\13\6\14\0\1\6"+
    "\2\0\1\60\1\6\1\0\1\u0136\3\0\4\6\1\u0136"+
    "\1\6\2\0\4\6\3\0\16\6\14\0\1\6\2\0"+
    "\1\60\1\6\1\0\1\u0137\3\0\4\6\1\u0137\1\6"+
    "\2\0\4\6\3\0\16\6\14\0\1\6\2\0\1\60"+
    "\1\6\1\0\1\6\3\0\2\6\1\u0138\3\6\2\0"+
    "\4\6\3\0\16\6\14\0\1\6\2\0\1\60\1\6"+
    "\1\0\1\6\3\0\1\u0139\5\6\2\0\4\6\3\0"+
    "\16\6\14\0\1\6\2\0\1\60\1\6\1\0\1\6"+
    "\3\0\6\6\2\0\4\6\3\0\1\6\1\u013a\14\6"+
    "\14\0\1\6\2\0\1\60\1\6\1\0\1\u013b\3\0"+
    "\4\6\1\u013b\1\6\2\0\4\6\3\0\16\6\14\0"+
    "\1\6\2\0\1\60\1\6\1\0\1\6\3\0\3\6"+
    "\1\u013c\2\6\2\0\4\6\3\0\16\6\14\0\1\6"+
    "\2\0\1\60\1\6\1\0\1\6\3\0\6\6\2\0"+
    "\4\6\3\0\1\u013d\15\6\14\0\1\6\2\0\1\60"+
    "\1\6\1\0\1\6\3\0\6\6\2\0\4\6\3\0"+
    "\1\6\1\u013e\14\6\14\0\1\6\2\0\1\60\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\4\6\3\0\1\6"+
    "\1\u013f\14\6\14\0\1\6\2\0\1\60\1\6\1\0"+
    "\1\6\3\0\6\6\2\0\4\6\3\0\5\6\1\u0140"+
    "\10\6\15\0\2\u0131\1\0\1\u0141\1\0\1\u0141\3\0"+
    "\6\u0141\2\0\4\u0141\1\0\1\u0131\1\0\16\u0141\14\0"+
    "\1\6\2\0\1\60\1\6\1\0\1\6\3\0\6\6"+
    "\2\0\1\6\1\u0142\2\6\3\0\16\6\14\0\1\6"+
    "\2\0\1\60\1\6\1\0\1\u0143\3\0\4\6\1\u0143"+
    "\1\6\2\0\4\6\3\0\16\6\14\0\1\6\2\0"+
    "\1\60\1\6\1\0\1\6\3\0\6\6\2\0\4\6"+
    "\3\0\1\6\1\u0144\14\6\14\0\1\6\2\0\1\60"+
    "\1\6\1\0\1\u0145\3\0\4\6\1\u0145\1\6\2\0"+
    "\4\6\3\0\16\6\14\0\1\6\2\0\1\60\1\6"+
    "\1\0\1\6\3\0\6\6\2\0\4\6\3\0\5\6"+
    "\1\u0146\10\6\13\0\27\u0141\1\u0147\33\u0141\1\0\1\6"+
    "\2\0\1\60\1\6\1\0\1\u0148\3\0\4\6\1\u0148"+
    "\1\6\2\0\4\6\3\0\16\6\14\0\1\6\2\0"+
    "\1\60\1\6\1\0\1\6\3\0\3\6\1\u0149\2\6"+
    "\2\0\4\6\3\0\16\6\14\0\1\6\2\0\1\60"+
    "\1\6\1\0\1\u014a\3\0\4\6\1\u014a\1\6\2\0"+
    "\4\6\3\0\16\6\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12189];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\3\1\1\11\14\1\2\11"+
    "\12\1\1\11\2\1\1\11\1\1\1\11\1\1\3\11"+
    "\5\0\1\11\23\1\3\0\37\1\10\11\2\1\2\0"+
    "\6\1\1\11\21\1\1\0\44\1\1\0\24\1\1\0"+
    "\36\1\2\0\20\1\1\11\27\1\1\0\42\1\1\0"+
    "\17\1\1\0\5\1\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[330];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  private StringBuffer string = new StringBuffer();

  private String originId;
   
  /** Counts nesting of parenthese. */
  private int parenNesting = 0;
   
  /** This is true if we are in the region after an end and before the semicolon. */
  private boolean afterEnd = false;
   
  /** 
   * Resets scanner.
   */    
  public void reset(java.io.Reader reader, String originId) {
    this.originId = originId;
    parenNesting = 0;
    afterEnd = false;
    yyreset(reader);
  } 
  
  /**
   * {@inheritDoc}
   */
  public void close() throws java.io.IOException {
    yyclose();
  } 


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AdaScanner(java.io.Reader in, String originId) {
  	this.originId = originId;
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  AdaScanner(java.io.InputStream in, String originId) {
    this(new java.io.InputStreamReader(in), originId);
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2654) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public AdaToken getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 58: 
          { return new AdaToken(ETokenType.GOTO, yychar, yyline, yytext(), originId);
          }
        case 105: break;
        case 70: 
          { return new AdaToken(ETokenType.BEGIN, yychar, yyline, yytext(), originId);
          }
        case 106: break;
        case 21: 
          { return new AdaToken(ETokenType.COMMA, yychar, yyline, yytext(), originId);
          }
        case 107: break;
        case 82: 
          { return new AdaToken(ETokenType.RETURN, yychar, yyline, yytext(), originId);
          }
        case 108: break;
        case 42: 
          { return new AdaToken(ETokenType.ALL, yychar, yyline, yytext(), originId);
          }
        case 109: break;
        case 43: 
          { return new AdaToken(ETokenType.AND, yychar, yyline, yytext(), originId);
          }
        case 110: break;
        case 50: 
          { return new AdaToken(ETokenType.NOT, yychar, yyline, yytext(), originId);
          }
        case 111: break;
        case 24: 
          { return new AdaToken(ETokenType.AT, yychar, yyline, yytext(), originId);
          }
        case 112: break;
        case 20: 
          { parenNesting -= 1; return new AdaToken(ETokenType.RPAREN, yychar, yyline, yytext(), originId);
          }
        case 113: break;
        case 67: 
          { return new AdaToken(ETokenType.ENTRY, yychar, yyline, yytext(), originId);
          }
        case 114: break;
        case 13: 
          { return new AdaToken(ETokenType.DIV, yychar, yyline, yytext(), originId);
          }
        case 115: break;
        case 15: 
          { return new AdaToken(ETokenType.EQ, yychar, yyline, yytext(), originId);
          }
        case 116: break;
        case 68: 
          { return new AdaToken(ETokenType.ABORT, yychar, yyline, yytext(), originId);
          }
        case 117: break;
        case 88: 
          { return new AdaToken(ETokenType.PACKAGE, yychar, yyline, yytext(), originId);
          }
        case 118: break;
        case 102: 
          { return new AdaToken(ETokenType.PROCEDURE, yychar, yyline, yytext(), originId);
          }
        case 119: break;
        case 23: 
          { return new AdaToken(ETokenType.END_OF_LINE_COMMENT, yychar, yyline, yytext(), originId);
          }
        case 120: break;
        case 40: 
          { afterEnd = true; return new AdaToken(ETokenType.END, yychar, yyline, yytext(), originId);
          }
        case 121: break;
        case 77: 
          { return new AdaToken(ETokenType.WHILE, yychar, yyline, yytext(), originId);
          }
        case 122: break;
        case 17: 
          { return new AdaToken(ETokenType.ALTERNATIVE, yychar, yyline, yytext(), originId);
          }
        case 123: break;
        case 31: 
          { return new AdaToken(ETokenType.IN, yychar, yyline, yytext(), originId);
          }
        case 124: break;
        case 10: 
          { yyline -= 1;
          }
        case 125: break;
        case 74: 
          { return new AdaToken(ETokenType.RAISE, yychar, yyline, yytext(), originId);
          }
        case 126: break;
        case 6: 
          { return new AdaToken(ETokenType.PLUS, yychar, yyline, yytext(), originId);
          }
        case 127: break;
        case 29: 
          { if (afterEnd) { afterEnd = false; return new AdaToken(ETokenType.ENDIF, yychar, yyline, yytext(), originId); }
       else          return new AdaToken(ETokenType.IF, yychar, yyline, yytext(), originId);
          }
        case 128: break;
        case 90: 
          { return new AdaToken(ETokenType.RENAMES, yychar, yyline, yytext(), originId);
          }
        case 129: break;
        case 25: 
          { return new AdaToken(ETokenType.DO, yychar, yyline, yytext(), originId);
          }
        case 130: break;
        case 69: 
          { return new AdaToken(ETokenType.ARRAY, yychar, yyline, yytext(), originId);
          }
        case 131: break;
        case 4: 
          { return new AdaToken(ETokenType.IDENTIFIER, yychar, yyline, yytext(), originId);
          }
        case 132: break;
        case 56: 
          { return new AdaToken(ETokenType.BODY, yychar, yyline, yytext(), originId);
          }
        case 133: break;
        case 61: 
          { return new AdaToken(ETokenType.THEN, yychar, yyline, yytext(), originId);
          }
        case 134: break;
        case 51: 
          { return new AdaToken(ETokenType.XOR, yychar, yyline, yytext(), originId);
          }
        case 135: break;
        case 1: 
          { return new AdaToken(ETokenType.ILLEGAL_CHARACTER, yychar, yyline, yytext(), originId);
          }
        case 136: break;
        case 49: 
          { return new AdaToken(ETokenType.NEW, yychar, yyline, yytext(), originId);
          }
        case 137: break;
        case 94: 
          { return new AdaToken(ETokenType.SUBTYPE, yychar, yyline, yytext(), originId);
          }
        case 138: break;
        case 101: 
          { return new AdaToken(ETokenType.PREPROCESSOR_DIRECTIVE, yychar, yyline, yytext(), originId);
          }
        case 139: break;
        case 9: 
          { afterEnd = false; 
        if (parenNesting > 0) 
             return new AdaToken(ETokenType.PARAMETER_SEPARATOR, yychar, yyline, yytext(), originId); 
        else 
             return new AdaToken(ETokenType.SEMICOLON, yychar, yyline, yytext(), originId);
          }
        case 140: break;
        case 64: 
          { return new AdaToken(ETokenType.WITH, yychar, yyline, yytext(), originId);
          }
        case 141: break;
        case 99: 
          { return new AdaToken(ETokenType.SEPARATE, yychar, yyline, yytext(), originId);
          }
        case 142: break;
        case 97: 
          { return new AdaToken(ETokenType.CONSTANT, yychar, yyline, yytext(), originId);
          }
        case 143: break;
        case 63: 
          { return new AdaToken(ETokenType.NULL, yychar, yyline, yytext(), originId);
          }
        case 144: break;
        case 52: 
          { return new AdaToken(ETokenType.USE, yychar, yyline, yytext(), originId);
          }
        case 145: break;
        case 84: 
          { return new AdaToken(ETokenType.TAGGED, yychar, yyline, yytext(), originId);
          }
        case 146: break;
        case 12: 
          { return new AdaToken(ETokenType.CONCATENATION, yychar, yyline, yytext(), originId);
          }
        case 147: break;
        case 95: 
          { return new AdaToken(ETokenType.LIMITED, yychar, yyline, yytext(), originId);
          }
        case 148: break;
        case 60: 
          { return new AdaToken(ETokenType.TYPE, yychar, yyline, yytext(), originId);
          }
        case 149: break;
        case 59: 
          { return new AdaToken(ETokenType.TASK, yychar, yyline, yytext(), originId);
          }
        case 150: break;
        case 39: 
          { return new AdaToken(ETokenType.ASSIGNMENT, yychar, yyline, yytext(), originId);
          }
        case 151: break;
        case 83: 
          { return new AdaToken(ETokenType.OTHERS, yychar, yyline, yytext(), originId);
          }
        case 152: break;
        case 26: 
          { return new AdaToken(ETokenType.STRING_LITERAL, yychar, yyline, yytext(), originId);
          }
        case 153: break;
        case 33: 
          { return new AdaToken(ETokenType.NOTEQ, yychar, yyline, yytext(), originId);
          }
        case 154: break;
        case 28: 
          { return new AdaToken(ETokenType.OR, yychar, yyline, yytext(), originId);
          }
        case 155: break;
        case 87: 
          { return new AdaToken(ETokenType.DECLARE, yychar, yyline, yytext(), originId);
          }
        case 156: break;
        case 22: 
          { return new AdaToken(ETokenType.DOUBLE_DOT, yychar, yyline, yytext(), originId);
          }
        case 157: break;
        case 81: 
          { if (afterEnd) { afterEnd = false; return new AdaToken(ETokenType.ENDRECORD, yychar, yyline, yytext(), originId); } 
           else          return new AdaToken(ETokenType.RECORD, yychar, yyline, yytext(), originId);
          }
        case 158: break;
        case 47: 
          { return new AdaToken(ETokenType.MOD, yychar, yyline, yytext(), originId);
          }
        case 159: break;
        case 7: 
          { return new AdaToken(ETokenType.MINUS, yychar, yyline, yytext(), originId);
          }
        case 160: break;
        case 5: 
          { return new AdaToken(ETokenType.DOT, yychar, yyline, yytext(), originId);
          }
        case 161: break;
        case 66: 
          { return new AdaToken(ETokenType.ELSEIF, yychar, yyline, yytext(), originId);
          }
        case 162: break;
        case 55: 
          { return new AdaToken(ETokenType.EXIT, yychar, yyline, yytext(), originId);
          }
        case 163: break;
        case 44: 
          { return new AdaToken(ETokenType.FOR, yychar, yyline, yytext(), originId);
          }
        case 164: break;
        case 46: 
          { return new AdaToken(ETokenType.REM, yychar, yyline, yytext(), originId);
          }
        case 165: break;
        case 85: 
          { if (afterEnd) { afterEnd = false; return new AdaToken(ETokenType.ENDSELECT, yychar, yyline, yytext(), originId); } 
           else          return new AdaToken(ETokenType.SELECT, yychar, yyline, yytext(), originId);
          }
        case 166: break;
        case 104: 
          { return new AdaToken(ETokenType.TERMINATE, yychar, yyline, yytext(), originId);
          }
        case 167: break;
        case 91: 
          { return new AdaToken(ETokenType.REVERSE, yychar, yyline, yytext(), originId);
          }
        case 168: break;
        case 53: 
          { return new AdaToken(ETokenType.BASED_FLOATING_POINT_LITERAL, yychar, yyline, yytext(), originId);
          }
        case 169: break;
        case 38: 
          { return new AdaToken(ETokenType.RIGHT_LABEL_BRACKET, yychar, yyline, yytext(), originId);
          }
        case 170: break;
        case 75: 
          { return new AdaToken(ETokenType.RANGE, yychar, yyline, yytext(), originId);
          }
        case 171: break;
        case 27: 
          { return new AdaToken(ETokenType.OF, yychar, yyline, yytext(), originId);
          }
        case 172: break;
        case 54: 
          { return new AdaToken(ETokenType.ELSE, yychar, yyline, yytext(), originId);
          }
        case 173: break;
        case 71: 
          { return new AdaToken(ETokenType.DELAY, yychar, yyline, yytext(), originId);
          }
        case 174: break;
        case 96: 
          { return new AdaToken(ETokenType.ABSTRACT, yychar, yyline, yytext(), originId);
          }
        case 175: break;
        case 79: 
          { return new AdaToken(ETokenType.ACCESS, yychar, yyline, yytext(), originId);
          }
        case 176: break;
        case 73: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return new AdaToken(ETokenType.SINGLE_QUOTE, yychar, yyline, yytext(), originId);
          }
        case 177: break;
        case 8: 
          { return new AdaToken(ETokenType.SINGLE_QUOTE, yychar, yyline, yytext(), originId);
          }
        case 178: break;
        case 19: 
          { parenNesting += 1; return new AdaToken(ETokenType.LPAREN, yychar, yyline, yytext(), originId);
          }
        case 179: break;
        case 62: 
          { if (afterEnd) { afterEnd = false; return new AdaToken(ETokenType.ENDLOOP, yychar, yyline, yytext(), originId); } 
         else          return new AdaToken(ETokenType.LOOP, yychar, yyline, yytext(), originId);
          }
        case 180: break;
        case 11: 
          { return new AdaToken(ETokenType.MULT, yychar, yyline, yytext(), originId);
          }
        case 181: break;
        case 37: 
          { return new AdaToken(ETokenType.GTEQ, yychar, yyline, yytext(), originId);
          }
        case 182: break;
        case 89: 
          { return new AdaToken(ETokenType.PRIVATE, yychar, yyline, yytext(), originId);
          }
        case 183: break;
        case 100: 
          { return new AdaToken(ETokenType.EXCEPTION, yychar, yyline, yytext(), originId);
          }
        case 184: break;
        case 45: 
          { return new AdaToken(ETokenType.CHARACTER_LITERAL, yychar, yyline, yytext(), originId);
          }
        case 185: break;
        case 103: 
          { return new AdaToken(ETokenType.PROTECTED, yychar, yyline, yytext(), originId);
          }
        case 186: break;
        case 16: 
          { return new AdaToken(ETokenType.GT, yychar, yyline, yytext(), originId);
          }
        case 187: break;
        case 80: 
          { return new AdaToken(ETokenType.DIGITS, yychar, yyline, yytext(), originId);
          }
        case 188: break;
        case 72: 
          { return new AdaToken(ETokenType.DELTA, yychar, yyline, yytext(), originId);
          }
        case 189: break;
        case 36: 
          { return new AdaToken(ETokenType.BOX, yychar, yyline, yytext(), originId);
          }
        case 190: break;
        case 3: 
          { /* ignore */
          }
        case 191: break;
        case 92: 
          { return new AdaToken(ETokenType.REQUEUE, yychar, yyline, yytext(), originId);
          }
        case 192: break;
        case 14: 
          { return new AdaToken(ETokenType.LT, yychar, yyline, yytext(), originId);
          }
        case 193: break;
        case 57: 
          { if (afterEnd) { afterEnd = false; return new AdaToken(ETokenType.ENDCASE, yychar, yyline, yytext(), originId); } 
         else          return new AdaToken(ETokenType.CASE, yychar, yyline, yytext(), originId);
          }
        case 194: break;
        case 65: 
          { return new AdaToken(ETokenType.WHEN, yychar, yyline, yytext(), originId);
          }
        case 195: break;
        case 30: 
          { return new AdaToken(ETokenType.IS, yychar, yyline, yytext(), originId);
          }
        case 196: break;
        case 2: 
          { return new AdaToken(ETokenType.FLOATING_POINT_LITERAL, yychar, yyline, yytext(), originId);
          }
        case 197: break;
        case 78: 
          { return new AdaToken(ETokenType.ACCEPT, yychar, yyline, yytext(), originId);
          }
        case 198: break;
        case 32: 
          { return new AdaToken(ETokenType.DOUBLE_STAR, yychar, yyline, yytext(), originId);
          }
        case 199: break;
        case 76: 
          { return new AdaToken(ETokenType.UNTIL, yychar, yyline, yytext(), originId);
          }
        case 200: break;
        case 41: 
          { return new AdaToken(ETokenType.ABS, yychar, yyline, yytext(), originId);
          }
        case 201: break;
        case 93: 
          { return new AdaToken(ETokenType.GENERIC, yychar, yyline, yytext(), originId);
          }
        case 202: break;
        case 34: 
          { return new AdaToken(ETokenType.LEFT_LABEL_BRACKET, yychar, yyline, yytext(), originId);
          }
        case 203: break;
        case 86: 
          { return new AdaToken(ETokenType.ALIAS, yychar, yyline, yytext(), originId);
          }
        case 204: break;
        case 98: 
          { return new AdaToken(ETokenType.FUNCTION, yychar, yyline, yytext(), originId);
          }
        case 205: break;
        case 35: 
          { return new AdaToken(ETokenType.LTEQ, yychar, yyline, yytext(), originId);
          }
        case 206: break;
        case 48: 
          { return new AdaToken(ETokenType.OUT, yychar, yyline, yytext(), originId);
          }
        case 207: break;
        case 18: 
          { return new AdaToken(ETokenType.COLON, yychar, yyline, yytext(), originId);
          }
        case 208: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return new AdaToken(ETokenType.EOF, yychar, yyline, yytext(), originId);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
