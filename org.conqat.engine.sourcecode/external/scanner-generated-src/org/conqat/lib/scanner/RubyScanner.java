/* The following code was generated by JFlex 1.4.2 on {{TIMESTAMP}} */

/* This grammar is based on the book O'Reilly Book "Programming PHP" and http://www.php.net/manual/en/langref.php 
 *
 * Notes: In this grammar the term heredoc refers to heredoc as well as nowdoc blocks.
 */

package org.conqat.lib.scanner;
import org.conqat.lib.commons.string.StringUtils;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on {{TIMESTAMP}} from the specification file
 * <tt>/home/freakout/cqse/repositories/conqat/trunk/lib/org.conqat.lib.scanner/grammars/ruby.flex</tt>
 */
class RubyScanner extends QueuedScannerBase<RubyToken> {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int DOUBLEQUOTEDSTRING = 4;
  public static final int INTERPOLATIONSTART = 14;
  public static final int YYINITIAL = 0;
  public static final int STRINGINLINECODE = 12;
  public static final int REGEX = 10;
  public static final int BACKTICKSTRING = 6;
  public static final int HEREDOC = 8;
  public static final int SINGLEQUOTEDSTRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  0,  0,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\17\1\3\1\2\1\0\1\4\1\1\16\17\4\0\1\3\1\20"+
    "\1\112\1\14\1\15\1\103\1\106\1\113\1\66\1\67\1\101\1\34"+
    "\1\75\1\76\1\32\1\102\1\22\1\31\2\26\4\27\2\23\1\100"+
    "\1\74\1\104\1\5\1\77\1\54\1\21\1\25\1\30\1\41\1\40"+
    "\1\33\1\43\1\35\1\15\1\36\2\15\1\44\1\15\1\37\1\42"+
    "\10\15\1\24\2\15\1\72\1\111\1\73\1\105\1\16\1\114\1\45"+
    "\1\6\1\52\1\13\1\7\1\53\1\10\1\64\1\11\1\15\1\51"+
    "\1\46\1\57\1\12\1\55\1\63\1\15\1\50\1\47\1\61\1\56"+
    "\1\15\1\65\1\60\1\62\1\15\1\70\1\107\1\71\1\110\41\17"+
    "\2\0\4\15\4\0\1\15\2\0\1\17\7\0\1\15\4\0\1\15"+
    "\5\0\27\15\1\0\37\15\1\0\u01ca\15\4\0\14\15\16\0\5\15"+
    "\7\0\1\15\1\0\1\15\21\0\160\17\5\15\1\0\2\15\2\0"+
    "\4\15\10\0\1\15\1\0\3\15\1\0\1\15\1\0\24\15\1\0"+
    "\123\15\1\0\213\15\1\0\5\17\2\0\236\15\11\0\46\15\2\0"+
    "\1\15\7\0\47\15\11\0\55\17\1\0\1\17\1\0\2\17\1\0"+
    "\2\17\1\0\1\17\10\0\33\15\5\0\3\15\15\0\4\17\7\0"+
    "\1\15\4\0\13\17\5\0\53\15\37\17\4\0\2\15\1\17\143\15"+
    "\1\0\1\15\10\17\1\0\6\17\2\15\2\17\1\0\4\17\2\15"+
    "\12\17\3\15\2\0\1\15\17\0\1\17\1\15\1\17\36\15\33\17"+
    "\2\0\131\15\13\17\1\15\16\0\12\17\41\15\11\17\2\15\4\0"+
    "\1\15\5\0\26\15\4\17\1\15\11\17\1\15\3\17\1\15\5\17"+
    "\22\0\31\15\3\17\244\0\4\17\66\15\3\17\1\15\22\17\1\15"+
    "\7\17\12\15\2\17\2\0\12\17\1\0\7\15\1\0\7\15\1\0"+
    "\3\17\1\0\10\15\2\0\2\15\2\0\26\15\1\0\7\15\1\0"+
    "\1\15\3\0\4\15\2\0\1\17\1\15\7\17\2\0\2\17\2\0"+
    "\3\17\1\15\10\0\1\17\4\0\2\15\1\0\3\15\2\17\2\0"+
    "\12\17\4\15\7\0\1\15\5\0\3\17\1\0\6\15\4\0\2\15"+
    "\2\0\26\15\1\0\7\15\1\0\2\15\1\0\2\15\1\0\2\15"+
    "\2\0\1\17\1\0\5\17\4\0\2\17\2\0\3\17\3\0\1\17"+
    "\7\0\4\15\1\0\1\15\7\0\14\17\3\15\1\17\13\0\3\17"+
    "\1\0\11\15\1\0\3\15\1\0\26\15\1\0\7\15\1\0\2\15"+
    "\1\0\5\15\2\0\1\17\1\15\10\17\1\0\3\17\1\0\3\17"+
    "\2\0\1\15\17\0\2\15\2\17\2\0\12\17\1\0\1\15\17\0"+
    "\3\17\1\0\10\15\2\0\2\15\2\0\26\15\1\0\7\15\1\0"+
    "\2\15\1\0\5\15\2\0\1\17\1\15\7\17\2\0\2\17\2\0"+
    "\3\17\10\0\2\17\4\0\2\15\1\0\3\15\2\17\2\0\12\17"+
    "\1\0\1\15\20\0\1\17\1\15\1\0\6\15\3\0\3\15\1\0"+
    "\4\15\3\0\2\15\1\0\1\15\1\0\2\15\3\0\2\15\3\0"+
    "\3\15\3\0\14\15\4\0\5\17\3\0\3\17\1\0\4\17\2\0"+
    "\1\15\6\0\1\17\16\0\12\17\11\0\1\15\7\0\3\17\1\0"+
    "\10\15\1\0\3\15\1\0\27\15\1\0\12\15\1\0\5\15\3\0"+
    "\1\15\7\17\1\0\3\17\1\0\4\17\7\0\2\17\1\0\2\15"+
    "\6\0\2\15\2\17\2\0\12\17\22\0\2\17\1\0\10\15\1\0"+
    "\3\15\1\0\27\15\1\0\12\15\1\0\5\15\2\0\1\17\1\15"+
    "\7\17\1\0\3\17\1\0\4\17\7\0\2\17\7\0\1\15\1\0"+
    "\2\15\2\17\2\0\12\17\1\0\2\15\17\0\2\17\1\0\10\15"+
    "\1\0\3\15\1\0\51\15\2\0\1\15\7\17\1\0\3\17\1\0"+
    "\4\17\1\15\10\0\1\17\10\0\2\15\2\17\2\0\12\17\12\0"+
    "\6\15\2\0\2\17\1\0\22\15\3\0\30\15\1\0\11\15\1\0"+
    "\1\15\2\0\7\15\3\0\1\17\4\0\6\17\1\0\1\17\1\0"+
    "\10\17\22\0\2\17\15\0\60\15\1\17\2\15\7\17\4\0\10\15"+
    "\10\17\1\0\12\17\47\0\2\15\1\0\1\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\6\0\4\15\1\0\7\15\1\0\3\15\1\0"+
    "\1\15\1\0\1\15\2\0\2\15\1\0\4\15\1\17\2\15\6\17"+
    "\1\0\2\17\1\15\2\0\5\15\1\0\1\15\1\0\6\17\2\0"+
    "\12\17\2\0\2\15\42\0\1\15\27\0\2\17\6\0\12\17\13\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\2\17\10\15\1\0\44\15"+
    "\4\0\24\17\1\0\2\17\5\15\13\17\1\0\44\17\11\0\1\17"+
    "\71\0\53\15\24\17\1\15\12\17\6\0\6\15\4\17\4\15\3\17"+
    "\1\15\3\17\2\15\7\17\3\15\4\17\15\15\14\17\1\15\17\17"+
    "\2\0\46\15\12\0\53\15\1\0\1\15\3\0\u0149\15\1\0\4\15"+
    "\2\0\7\15\1\0\1\15\1\0\4\15\2\0\51\15\1\0\4\15"+
    "\2\0\41\15\1\0\4\15\2\0\7\15\1\0\1\15\1\0\4\15"+
    "\2\0\17\15\1\0\71\15\1\0\4\15\2\0\103\15\2\0\3\17"+
    "\40\0\20\15\20\0\125\15\14\0\u026c\15\2\0\21\15\1\0\32\15"+
    "\5\0\113\15\3\0\3\15\17\0\15\15\1\0\4\15\3\17\13\0"+
    "\22\15\3\17\13\0\22\15\2\17\14\0\15\15\1\0\3\15\1\0"+
    "\2\17\14\0\64\15\40\17\3\0\1\15\3\0\2\15\1\17\2\0"+
    "\12\17\41\0\3\17\2\0\12\17\6\0\130\15\10\0\51\15\1\17"+
    "\1\15\5\0\106\15\12\0\35\15\3\0\14\17\4\0\14\17\12\0"+
    "\12\17\36\15\2\0\5\15\13\0\54\15\4\0\21\17\7\15\2\17"+
    "\6\0\12\17\46\0\27\15\5\17\4\0\65\15\12\17\1\0\35\17"+
    "\2\0\13\17\6\0\12\17\15\0\1\15\130\0\5\17\57\15\21\17"+
    "\7\15\4\0\12\17\21\0\11\17\14\0\3\17\36\15\12\17\3\0"+
    "\2\15\12\17\6\0\46\15\16\17\14\0\44\15\24\17\10\0\12\17"+
    "\3\0\3\15\12\17\44\15\122\0\3\17\1\0\25\17\4\15\1\17"+
    "\4\15\1\17\15\0\300\15\47\17\25\0\4\17\u0116\15\2\0\6\15"+
    "\2\0\46\15\2\0\6\15\2\0\10\15\1\0\1\15\1\0\1\15"+
    "\1\0\1\15\1\0\37\15\2\0\65\15\1\0\7\15\1\0\1\15"+
    "\3\0\3\15\1\0\7\15\3\0\4\15\2\0\6\15\4\0\15\15"+
    "\5\0\3\15\1\0\7\15\16\0\5\17\32\0\5\17\20\0\2\15"+
    "\23\0\1\15\13\0\5\17\5\0\6\17\1\0\1\15\15\0\1\15"+
    "\20\0\15\15\3\0\32\15\26\0\15\17\4\0\1\17\3\0\14\17"+
    "\21\0\1\15\4\0\1\15\2\0\12\15\1\0\1\15\3\0\5\15"+
    "\6\0\1\15\1\0\1\15\1\0\1\15\1\0\4\15\1\0\13\15"+
    "\2\0\4\15\5\0\5\15\4\0\1\15\21\0\51\15\u0a77\0\57\15"+
    "\1\0\57\15\1\0\205\15\6\0\4\15\3\17\16\0\46\15\12\0"+
    "\66\15\11\0\1\15\17\0\1\17\27\15\11\0\7\15\1\0\7\15"+
    "\1\0\7\15\1\0\7\15\1\0\7\15\1\0\7\15\1\0\7\15"+
    "\1\0\7\15\1\0\40\17\57\0\1\15\u01d5\0\3\15\31\0\11\15"+
    "\6\17\1\0\5\15\2\0\5\15\4\0\126\15\2\0\2\17\2\0"+
    "\3\15\1\0\132\15\1\0\4\15\5\0\51\15\3\0\136\15\21\0"+
    "\33\15\65\0\20\15\u0200\0\u19b6\15\112\0\u51cc\15\64\0\u048d\15\103\0"+
    "\56\15\2\0\u010d\15\3\0\20\15\12\17\2\15\24\0\57\15\1\17"+
    "\14\0\2\17\1\0\31\15\10\0\120\15\2\17\45\0\11\15\2\0"+
    "\147\15\2\0\4\15\1\0\2\15\16\0\12\15\120\0\10\15\1\17"+
    "\3\15\1\17\4\15\1\17\27\15\5\17\20\0\1\15\7\0\64\15"+
    "\14\0\2\17\62\15\21\17\13\0\12\17\6\0\22\17\6\15\3\0"+
    "\1\15\4\0\12\17\34\15\10\17\2\0\27\15\15\17\14\0\35\15"+
    "\3\0\4\17\57\15\16\17\16\0\1\15\12\17\46\0\51\15\16\17"+
    "\11\0\3\15\1\17\10\15\2\17\2\0\12\17\6\0\27\15\3\0"+
    "\1\15\1\17\4\0\60\15\1\17\1\15\3\17\2\15\2\17\5\15"+
    "\2\17\1\15\1\17\1\15\30\0\3\15\43\0\6\15\2\0\6\15"+
    "\2\0\6\15\11\0\7\15\1\0\7\15\221\0\43\15\10\17\1\0"+
    "\2\17\2\0\12\17\6\0\u2ba4\15\14\0\27\15\4\0\61\15\u2104\0"+
    "\u012e\15\2\0\76\15\2\0\152\15\46\0\7\15\14\0\5\15\5\0"+
    "\1\15\1\17\12\15\1\0\15\15\1\0\5\15\1\0\1\15\1\0"+
    "\2\15\1\0\2\15\1\0\154\15\41\0\u016b\15\22\0\100\15\2\0"+
    "\66\15\50\0\15\15\3\0\20\17\20\0\7\17\14\0\2\15\30\0"+
    "\3\15\31\0\1\15\6\0\5\15\1\0\207\15\2\0\1\17\4\0"+
    "\1\15\13\0\12\17\7\0\32\15\4\0\1\15\1\0\32\15\13\0"+
    "\131\15\3\0\6\15\2\0\6\15\2\0\6\15\2\0\3\15\3\0"+
    "\2\15\3\0\2\15\22\0\3\17\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\2\2\1\3\1\4\6\5\1\6\1\5"+
    "\1\7\1\1\2\10\1\5\1\11\1\5\1\12\5\5"+
    "\1\13\6\5\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\3\43\1\1\1\44\1\43\1\1\1\43\1\45"+
    "\4\43\2\46\1\47\1\1\1\50\1\51\1\0\5\5"+
    "\1\52\1\53\4\5\1\54\2\6\1\5\1\55\1\5"+
    "\3\0\2\10\1\56\1\0\1\10\1\56\1\5\1\56"+
    "\1\57\1\5\1\60\11\5\1\35\6\5\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\43\1\101"+
    "\1\43\1\0\1\101\1\0\1\51\1\0\2\5\1\102"+
    "\3\5\1\103\1\104\1\105\3\5\2\10\1\56\1\0"+
    "\3\10\1\5\1\106\1\107\1\34\11\5\1\110\11\5"+
    "\3\0\2\101\1\43\2\101\2\0\3\5\1\111\1\5"+
    "\1\112\4\5\3\10\2\5\1\113\1\5\1\114\3\5"+
    "\1\115\6\5\1\116\1\117\1\5\1\120\1\5\2\121"+
    "\4\0\1\122\1\123\1\5\1\124\5\5\3\10\1\125"+
    "\1\126\1\127\1\5\1\130\1\5\1\131\1\132\1\133"+
    "\1\5\1\134\1\5\1\135\1\136\1\0\1\137\5\5"+
    "\3\10\1\140\1\141\1\142\1\143\1\0\1\5\1\144"+
    "\3\5\3\10\1\0\1\145\1\5\1\146\1\147\3\10"+
    "\1\0\1\5\3\10\1\150\1\5\3\10\1\5\2\10"+
    "\1\151\33\10";

  private static int [] zzUnpackAction() {
    int [] result = new int[343];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\232\0\347\0\u0134\0\u0181\0\u01ce\0\u021b"+
    "\0\u0268\0\u021b\0\u021b\0\u02b5\0\u0302\0\u034f\0\u039c\0\u03e9"+
    "\0\u0436\0\u0483\0\u04d0\0\u051d\0\u056a\0\u05b7\0\u0604\0\u0651"+
    "\0\u069e\0\u06eb\0\u0738\0\u0785\0\u07d2\0\u081f\0\u086c\0\u08b9"+
    "\0\u0906\0\u021b\0\u0953\0\u09a0\0\u09ed\0\u0a3a\0\u0a87\0\u0ad4"+
    "\0\u021b\0\u021b\0\u021b\0\u021b\0\u021b\0\u021b\0\u021b\0\u021b"+
    "\0\u0b21\0\u0b6e\0\u0bbb\0\u0c08\0\u0c55\0\u0ca2\0\u0cef\0\u0d3c"+
    "\0\u0d89\0\u0dd6\0\u021b\0\u021b\0\u021b\0\u021b\0\u021b\0\u0e23"+
    "\0\u0e70\0\u021b\0\u0ebd\0\u021b\0\u0f0a\0\u0f57\0\u0fa4\0\u021b"+
    "\0\u0ff1\0\u103e\0\u108b\0\u10d8\0\u1125\0\u021b\0\u1172\0\u11bf"+
    "\0\u021b\0\u120c\0\u1259\0\u12a6\0\u021b\0\u12f3\0\u1340\0\u138d"+
    "\0\u039c\0\u039c\0\u13da\0\u1427\0\u1474\0\u14c1\0\u039c\0\u150e"+
    "\0\u021b\0\u155b\0\u021b\0\u15a8\0\u15f5\0\u1642\0\u168f\0\u16dc"+
    "\0\u1729\0\u1776\0\u17c3\0\u1810\0\u185d\0\u18aa\0\u18f7\0\u1944"+
    "\0\u1991\0\u021b\0\u19de\0\u1a2b\0\u1a78\0\u1ac5\0\u1b12\0\u1b5f"+
    "\0\u1bac\0\u1bf9\0\u1c46\0\u039c\0\u1c93\0\u1ce0\0\u1d2d\0\u1d7a"+
    "\0\u1dc7\0\u1e14\0\u021b\0\u021b\0\u021b\0\u021b\0\u021b\0\u021b"+
    "\0\u021b\0\u021b\0\u021b\0\u1e61\0\u1eae\0\u021b\0\u021b\0\u021b"+
    "\0\u021b\0\u021b\0\u1efb\0\u1f48\0\u1f95\0\u108b\0\u1fe2\0\u202f"+
    "\0\u021b\0\u207c\0\u20c9\0\u2116\0\u039c\0\u2163\0\u21b0\0\u21fd"+
    "\0\u039c\0\u039c\0\u224a\0\u2297\0\u22e4\0\u2331\0\u237e\0\u1642"+
    "\0\u23cb\0\u2418\0\u2465\0\u24b2\0\u17c3\0\u24ff\0\u021b\0\u039c"+
    "\0\u039c\0\u254c\0\u2599\0\u25e6\0\u2633\0\u2680\0\u26cd\0\u271a"+
    "\0\u2767\0\u27b4\0\u039c\0\u2801\0\u284e\0\u289b\0\u28e8\0\u2935"+
    "\0\u2982\0\u29cf\0\u2a1c\0\u2a69\0\u2ab6\0\u2b03\0\u2b50\0\u0ff1"+
    "\0\u2b9d\0\u2bea\0\u021b\0\u2c37\0\u2c84\0\u2cd1\0\u2d1e\0\u2d6b"+
    "\0\u2db8\0\u039c\0\u2e05\0\u039c\0\u2e52\0\u2e9f\0\u2eec\0\u2f39"+
    "\0\u2f86\0\u2fd3\0\u3020\0\u306d\0\u30ba\0\u039c\0\u3107\0\u039c"+
    "\0\u3154\0\u31a1\0\u31ee\0\u039c\0\u323b\0\u3288\0\u32d5\0\u3322"+
    "\0\u336f\0\u33bc\0\u039c\0\u039c\0\u3409\0\u039c\0\u3456\0\u34a3"+
    "\0\u021b\0\u34f0\0\u353d\0\u358a\0\u35d7\0\u039c\0\u039c\0\u3624"+
    "\0\u039c\0\u3671\0\u36be\0\u370b\0\u3758\0\u37a5\0\u37f2\0\u383f"+
    "\0\u388c\0\u039c\0\u039c\0\u039c\0\u38d9\0\u039c\0\u3926\0\u039c"+
    "\0\u039c\0\u039c\0\u3973\0\u039c\0\u39c0\0\u039c\0\u039c\0\u3a0d"+
    "\0\u039c\0\u3a5a\0\u3aa7\0\u3af4\0\u3b41\0\u3b8e\0\u3bdb\0\u3c28"+
    "\0\u3c75\0\u039c\0\u039c\0\u039c\0\u039c\0\u3cc2\0\u3d0f\0\u039c"+
    "\0\u3d5c\0\u3da9\0\u3df6\0\u3e43\0\u3e90\0\u3edd\0\u3f2a\0\u021b"+
    "\0\u3f77\0\u039c\0\u039c\0\u3fc4\0\u4011\0\u405e\0\u40ab\0\u40f8"+
    "\0\u4145\0\u4192\0\u41df\0\u021b\0\u422c\0\u4279\0\u42c6\0\u021b"+
    "\0\u4313\0\u4360\0\u43ad\0\u039c\0\u43fa\0\u4447\0\u4494\0\u44e1"+
    "\0\u452e\0\u457b\0\u45c8\0\u4615\0\u4662\0\u1776\0\u46af\0\u46fc"+
    "\0\u4749\0\u4796\0\u47e3\0\u4830\0\u487d\0\u48ca\0\u4917\0\u4964"+
    "\0\u49b1\0\u49fe\0\u4a4b\0\u4a98\0\u4ae5\0\u4b32\0\u4b7f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[343];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\2\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\17\1\24\1\10\1\25"+
    "\1\26\1\27\1\30\2\17\2\30\1\31\1\30\1\32"+
    "\1\33\1\34\10\17\1\35\1\17\1\36\1\37\1\17"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\17\1\46"+
    "\1\47\2\17\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\106\100\1\103\1\100"+
    "\1\104\1\100\1\105\1\101\1\102\11\105\1\106\74\105"+
    "\1\103\1\104\2\105\1\107\1\101\1\102\106\107\1\103"+
    "\2\107\1\110\1\111\1\112\1\113\112\111\1\114\1\115"+
    "\1\116\77\114\1\117\6\114\1\120\3\114\70\10\1\121"+
    "\24\10\117\0\1\12\117\0\1\122\1\123\114\0\1\17"+
    "\1\124\4\17\1\0\3\17\1\125\1\0\10\17\1\0"+
    "\1\17\1\0\13\17\1\126\3\17\1\125\11\17\35\0"+
    "\4\17\1\127\1\17\1\0\3\17\1\125\1\0\10\17"+
    "\1\0\1\17\1\0\11\17\1\130\5\17\1\125\11\17"+
    "\35\0\6\17\1\0\3\17\1\125\1\0\10\17\1\0"+
    "\1\17\1\0\17\17\1\125\11\17\35\0\4\17\1\131"+
    "\1\17\1\0\3\17\1\125\1\0\10\17\1\0\1\17"+
    "\1\0\16\17\1\132\1\125\11\17\35\0\1\17\1\133"+
    "\1\17\1\134\2\17\1\0\3\17\1\125\1\0\10\17"+
    "\1\0\1\17\1\0\17\17\1\125\1\135\10\17\35\0"+
    "\1\17\1\136\4\17\1\0\3\17\1\125\1\0\10\17"+
    "\1\0\1\17\1\0\17\17\1\125\1\137\10\17\27\0"+
    "\1\23\1\140\1\141\112\23\6\0\6\17\1\0\1\17"+
    "\1\142\1\17\1\125\1\0\10\17\1\0\1\17\1\0"+
    "\17\17\1\125\11\17\34\0\1\143\115\0\6\144\1\0"+
    "\2\144\2\0\1\145\2\0\2\144\2\0\1\144\2\0"+
    "\1\144\1\0\17\144\1\0\11\144\35\0\1\146\1\147"+
    "\6\0\1\150\3\0\1\151\1\152\1\153\1\0\1\154"+
    "\1\150\1\146\1\154\1\155\1\147\24\0\1\153\43\0"+
    "\1\147\6\0\1\30\3\0\2\30\2\0\2\30\1\0"+
    "\1\30\1\155\1\147\67\0\6\17\1\0\3\17\1\125"+
    "\1\0\10\17\1\0\1\156\1\0\17\17\1\125\11\17"+
    "\51\0\2\157\2\0\2\157\1\0\1\157\1\160\70\0"+
    "\6\17\1\0\3\17\1\125\1\0\10\17\1\0\1\17"+
    "\1\0\2\17\1\161\14\17\1\125\11\17\34\0\1\162"+
    "\115\0\4\17\1\163\1\17\1\0\3\17\1\125\1\0"+
    "\10\17\1\0\1\17\1\0\11\17\1\164\5\17\1\125"+
    "\11\17\35\0\1\17\1\165\4\17\1\0\3\17\1\125"+
    "\1\0\10\17\1\0\1\17\1\0\17\17\1\125\1\17"+
    "\1\166\7\17\35\0\1\17\1\167\4\17\1\0\3\17"+
    "\1\125\1\0\10\17\1\0\1\17\1\0\17\17\1\125"+
    "\11\17\35\0\6\17\1\0\3\17\1\125\1\0\10\17"+
    "\1\0\1\17\1\0\10\17\1\170\1\171\5\17\1\125"+
    "\11\17\35\0\6\17\1\0\3\17\1\125\1\0\10\17"+
    "\1\0\1\17\1\0\10\17\1\172\6\17\1\125\1\173"+
    "\10\17\35\0\6\17\1\0\3\17\1\125\1\0\10\17"+
    "\1\0\1\17\1\0\13\17\1\174\3\17\1\125\11\17"+
    "\35\0\4\17\1\175\1\17\1\0\3\17\1\125\1\0"+
    "\10\17\1\0\1\17\1\0\17\17\1\125\11\17\35\0"+
    "\6\17\1\0\3\17\1\125\1\0\10\17\1\0\1\17"+
    "\1\0\17\17\1\125\1\176\10\17\35\0\6\17\1\0"+
    "\3\17\1\125\1\0\10\17\1\0\1\17\1\0\13\17"+
    "\1\177\3\17\1\125\7\17\1\200\1\17\35\0\3\17"+
    "\1\201\2\17\1\0\3\17\1\125\1\0\10\17\1\0"+
    "\1\17\1\0\17\17\1\125\11\17\35\0\6\17\1\0"+
    "\3\17\1\125\1\0\10\17\1\0\1\17\1\0\17\17"+
    "\1\125\7\17\1\202\1\17\34\0\1\203\71\0\1\204"+
    "\22\0\1\205\71\0\1\206\115\0\1\207\21\0\1\210"+
    "\73\0\1\211\20\0\1\212\114\0\1\213\114\0\1\214"+
    "\76\0\1\215\15\0\1\216\215\0\1\217\115\0\1\220"+
    "\5\0\1\100\2\0\106\100\1\0\1\100\1\0\1\100"+
    "\2\0\1\102\112\0\2\102\1\0\112\102\1\105\2\0"+
    "\11\105\1\0\74\105\2\0\2\105\70\221\1\222\24\221"+
    "\1\107\2\0\106\107\1\0\2\107\1\0\2\111\1\0"+
    "\114\111\1\113\1\223\2\111\6\224\1\111\2\224\2\111"+
    "\1\225\2\111\2\224\2\111\1\224\2\111\1\224\1\111"+
    "\17\224\1\111\11\224\27\111\3\0\1\226\2\0\6\227"+
    "\1\0\2\227\2\0\1\230\2\0\2\227\2\0\1\227"+
    "\2\0\1\227\1\0\17\227\1\0\11\227\27\0\1\114"+
    "\2\0\77\114\1\0\6\114\1\0\3\114\2\0\1\116"+
    "\121\0\1\117\1\0\1\117\46\0\1\117\34\0\1\102"+
    "\2\0\112\102\5\0\1\231\116\0\1\232\113\0\2\17"+
    "\1\233\3\17\1\0\3\17\1\125\1\0\10\17\1\0"+
    "\1\17\1\0\17\17\1\125\11\17\35\0\1\17\1\234"+
    "\4\17\1\0\3\17\1\125\1\0\10\17\1\0\1\17"+
    "\1\0\17\17\1\125\11\17\35\0\5\17\1\235\1\0"+
    "\3\17\1\125\1\0\10\17\1\0\1\17\1\0\12\17"+
    "\1\236\4\17\1\125\11\17\35\0\6\17\1\0\3\17"+
    "\1\125\1\0\10\17\1\0\1\17\1\0\12\17\1\237"+
    "\4\17\1\125\11\17\35\0\6\17\1\0\3\17\1\125"+
    "\1\0\10\17\1\0\1\17\1\0\17\17\1\125\3\17"+
    "\1\240\5\17\35\0\6\17\1\0\3\17\1\125\1\0"+
    "\10\17\1\0\1\17\1\0\11\17\1\241\5\17\1\125"+
    "\11\17\35\0\6\17\1\0\3\17\1\125\1\0\10\17"+
    "\1\0\1\17\1\0\17\17\1\125\4\17\1\242\4\17"+
    "\35\0\6\17\1\0\3\17\1\125\1\0\10\17\1\0"+
    "\1\17\1\0\16\17\1\243\1\125\11\17\31\0\1\141"+
    "\120\0\6\17\1\0\3\17\1\125\1\0\10\17\1\0"+
    "\1\244\1\0\6\17\1\245\1\246\7\17\1\125\11\17"+
    "\35\0\6\144\1\0\3\144\2\0\10\144\1\0\1\144"+
    "\1\0\17\144\1\0\11\144\35\0\6\144\1\0\2\144"+
    "\5\0\2\144\2\0\1\144\2\0\1\144\1\0\17\144"+
    "\1\0\11\144\45\0\1\247\3\0\1\250\6\0\1\247"+
    "\105\0\2\251\2\0\2\251\1\0\1\251\2\0\1\252"+
    "\41\0\1\252\25\0\1\147\6\0\1\253\3\0\1\253"+
    "\1\152\2\0\2\253\1\0\1\253\1\155\1\147\70\0"+
    "\1\147\6\0\1\150\3\0\1\151\1\152\2\0\1\154"+
    "\1\150\1\0\1\154\1\155\1\147\70\0\1\147\6\0"+
    "\1\152\3\0\2\152\2\0\2\152\1\0\1\152\1\155"+
    "\1\147\67\0\2\254\3\0\1\254\2\0\1\254\3\0"+
    "\1\255\1\254\1\0\5\254\1\0\1\254\4\0\2\254"+
    "\1\0\1\254\1\0\1\254\4\0\2\254\50\0\1\147"+
    "\6\0\1\150\3\0\1\150\1\152\2\0\2\150\1\0"+
    "\1\150\1\155\1\147\70\0\1\147\12\0\2\157\2\0"+
    "\2\157\1\0\1\157\1\0\1\147\67\0\6\17\1\0"+
    "\3\17\1\125\1\0\10\17\1\0\1\17\1\0\1\256"+
    "\16\17\1\125\11\17\36\0\1\147\6\0\1\157\3\0"+
    "\2\157\2\0\2\157\1\0\1\157\1\0\1\147\113\0"+
    "\1\257\70\0\6\17\1\0\3\17\1\125\1\0\10\17"+
    "\1\0\1\17\1\0\3\17\1\260\13\17\1\125\11\17"+
    "\35\0\5\17\1\261\1\0\3\17\1\125\1\0\10\17"+
    "\1\0\1\17\1\0\17\17\1\125\11\17\35\0\3\17"+
    "\1\262\2\17\1\0\3\17\1\125\1\0\10\17\1\0"+
    "\1\17\1\0\17\17\1\125\11\17\35\0\6\17\1\0"+
    "\3\17\1\125\1\0\10\17\1\0\1\17\1\0\11\17"+
    "\1\263\5\17\1\125\11\17\35\0\6\17\1\0\3\17"+
    "\1\125\1\0\10\17\1\0\1\17\1\0\17\17\1\125"+
    "\6\17\1\264\2\17\35\0\5\17\1\265\1\0\3\17"+
    "\1\125\1\0\10\17\1\0\1\17\1\0\12\17\1\266"+
    "\4\17\1\125\4\17\1\267\4\17\35\0\6\17\1\0"+
    "\3\17\1\125\1\0\10\17\1\0\1\17\1\0\12\17"+
    "\1\270\4\17\1\125\11\17\35\0\6\17\1\0\3\17"+
    "\1\125\1\0\10\17\1\0\1\17\1\0\10\17\1\271"+
    "\6\17\1\125\11\17\35\0\6\17\1\0\3\17\1\125"+
    "\1\0\10\17\1\0\1\17\1\0\11\17\1\272\5\17"+
    "\1\125\11\17\35\0\6\17\1\0\3\17\1\125\1\0"+
    "\10\17\1\0\1\17\1\0\13\17\1\273\3\17\1\125"+
    "\11\17\35\0\5\17\1\274\1\0\3\17\1\125\1\0"+
    "\10\17\1\0\1\17\1\0\11\17\1\275\5\17\1\125"+
    "\4\17\1\276\4\17\35\0\5\17\1\277\1\0\3\17"+
    "\1\125\1\0\10\17\1\0\1\17\1\0\17\17\1\125"+
    "\11\17\35\0\6\17\1\0\3\17\1\125\1\0\10\17"+
    "\1\0\1\17\1\0\17\17\1\125\1\17\1\300\7\17"+
    "\35\0\1\17\1\301\4\17\1\0\3\17\1\125\1\0"+
    "\10\17\1\0\1\17\1\0\17\17\1\125\11\17\35\0"+
    "\1\17\1\302\4\17\1\0\3\17\1\125\1\0\10\17"+
    "\1\0\1\17\1\0\17\17\1\125\11\17\35\0\1\17"+
    "\1\303\1\17\1\304\2\17\1\0\3\17\1\125\1\0"+
    "\10\17\1\0\1\17\1\0\17\17\1\125\11\17\126\0"+
    "\1\143\23\0\6\305\1\0\2\305\2\0\1\306\2\0"+
    "\2\305\2\0\1\305\2\0\1\305\1\0\17\305\1\0"+
    "\11\305\10\0\1\307\16\0\2\111\1\0\1\223\2\111"+
    "\6\224\1\111\2\224\2\111\1\225\2\111\2\224\2\111"+
    "\1\224\2\111\1\224\1\111\17\224\1\111\11\224\31\111"+
    "\1\0\3\111\6\224\1\111\3\224\1\310\1\111\10\224"+
    "\1\111\1\224\1\111\17\224\1\310\11\224\31\111\1\0"+
    "\3\111\6\311\1\111\2\311\2\111\1\312\2\111\2\311"+
    "\2\111\1\311\2\111\1\311\1\111\17\311\1\111\11\311"+
    "\27\111\6\0\6\227\1\0\3\227\1\313\1\0\10\227"+
    "\1\0\1\227\1\0\17\227\1\313\11\227\35\0\6\314"+
    "\1\0\2\314\2\0\1\315\2\0\2\314\2\0\1\314"+
    "\2\0\1\314\1\0\17\314\1\0\11\314\37\0\1\316"+
    "\112\0\3\17\1\317\2\17\1\0\3\17\1\125\1\0"+
    "\10\17\1\0\1\17\1\0\17\17\1\125\11\17\35\0"+
    "\6\17\1\0\3\17\1\125\1\0\10\17\1\0\1\17"+
    "\1\0\10\17\1\320\6\17\1\125\11\17\35\0\6\17"+
    "\1\0\3\17\1\125\1\0\10\17\1\0\1\17\1\0"+
    "\17\17\1\125\1\17\1\321\7\17\35\0\1\17\1\322"+
    "\1\17\1\323\2\17\1\0\3\17\1\125\1\0\10\17"+
    "\1\0\1\17\1\0\17\17\1\125\11\17\35\0\6\17"+
    "\1\0\3\17\1\125\1\0\10\17\1\0\1\17\1\0"+
    "\17\17\1\125\4\17\1\324\4\17\35\0\3\17\1\325"+
    "\2\17\1\0\3\17\1\125\1\0\10\17\1\0\1\17"+
    "\1\0\17\17\1\125\11\17\35\0\6\17\1\0\3\17"+
    "\1\125\1\0\10\17\1\0\1\17\1\0\2\17\1\326"+
    "\14\17\1\125\11\17\35\0\6\17\1\0\3\17\1\125"+
    "\1\0\10\17\1\0\1\17\1\0\1\17\1\327\15\17"+
    "\1\125\11\17\35\0\6\17\1\0\3\17\1\125\1\0"+
    "\10\17\1\0\1\17\1\0\1\17\1\330\15\17\1\125"+
    "\11\17\45\0\1\331\3\0\1\331\6\0\1\331\101\0"+
    "\1\251\3\0\2\251\2\0\2\251\1\0\1\251\105\0"+
    "\2\251\2\0\2\251\1\0\1\251\72\0\1\147\6\0"+
    "\1\332\3\0\1\332\1\152\2\0\2\332\1\0\1\332"+
    "\1\155\1\147\67\0\2\333\3\0\1\333\2\0\1\333"+
    "\3\0\2\333\1\0\5\333\1\0\1\333\4\0\2\333"+
    "\1\0\1\333\1\0\1\333\4\0\2\333\47\0\6\17"+
    "\1\0\3\17\1\125\1\0\10\17\1\0\1\17\1\0"+
    "\1\17\1\334\15\17\1\125\11\17\35\0\6\17\1\0"+
    "\3\17\1\125\1\0\10\17\1\0\1\17\1\0\10\17"+
    "\1\335\6\17\1\125\11\17\35\0\6\17\1\0\3\17"+
    "\1\125\1\0\10\17\1\0\1\17\1\0\16\17\1\336"+
    "\1\125\11\17\35\0\1\17\1\337\4\17\1\0\3\17"+
    "\1\125\1\0\10\17\1\0\1\17\1\0\17\17\1\125"+
    "\11\17\35\0\6\17\1\0\3\17\1\125\1\0\10\17"+
    "\1\0\1\17\1\0\17\17\1\125\1\340\10\17\35\0"+
    "\6\17\1\0\3\17\1\125\1\0\10\17\1\0\1\17"+
    "\1\0\15\17\1\341\1\17\1\125\11\17\35\0\6\17"+
    "\1\0\3\17\1\125\1\0\10\17\1\0\1\17\1\0"+
    "\13\17\1\342\3\17\1\125\1\17\1\343\7\17\35\0"+
    "\1\17\1\344\4\17\1\0\3\17\1\125\1\0\10\17"+
    "\1\0\1\17\1\0\17\17\1\125\11\17\35\0\6\17"+
    "\1\0\3\17\1\125\1\0\10\17\1\0\1\17\1\0"+
    "\12\17\1\345\4\17\1\125\11\17\35\0\6\17\1\0"+
    "\3\17\1\125\1\0\10\17\1\0\1\17\1\0\12\17"+
    "\1\346\4\17\1\125\11\17\35\0\1\17\1\347\4\17"+
    "\1\0\3\17\1\125\1\0\10\17\1\0\1\17\1\0"+
    "\17\17\1\125\11\17\35\0\1\17\1\350\4\17\1\0"+
    "\3\17\1\125\1\0\10\17\1\0\1\17\1\0\17\17"+
    "\1\125\11\17\35\0\3\17\1\351\2\17\1\0\3\17"+
    "\1\125\1\0\10\17\1\0\1\17\1\0\17\17\1\125"+
    "\11\17\35\0\6\17\1\0\3\17\1\125\1\0\10\17"+
    "\1\0\1\17\1\0\17\17\1\125\1\17\1\352\7\17"+
    "\35\0\1\17\1\353\4\17\1\0\3\17\1\125\1\0"+
    "\10\17\1\0\1\17\1\0\17\17\1\125\11\17\35\0"+
    "\4\17\1\354\1\17\1\0\3\17\1\125\1\0\10\17"+
    "\1\0\1\17\1\0\17\17\1\125\11\17\35\0\6\17"+
    "\1\0\3\17\1\125\1\0\10\17\1\0\1\17\1\0"+
    "\11\17\1\355\5\17\1\125\11\17\35\0\4\17\1\356"+
    "\1\17\1\0\3\17\1\125\1\0\10\17\1\0\1\17"+
    "\1\0\17\17\1\125\11\17\35\0\6\17\1\0\3\17"+
    "\1\125\1\0\10\17\1\0\1\17\1\0\11\17\1\357"+
    "\5\17\1\125\11\17\30\0\1\360\1\361\3\0\6\305"+
    "\1\0\3\305\1\362\1\0\10\305\1\0\1\305\1\0"+
    "\17\305\1\362\11\305\35\0\6\363\1\0\2\363\2\0"+
    "\1\364\2\0\2\363\2\0\1\363\2\0\1\363\1\0"+
    "\17\363\1\0\11\363\35\0\6\305\1\0\2\305\2\0"+
    "\1\306\2\0\2\305\2\0\1\305\2\0\1\305\1\0"+
    "\17\305\1\0\11\305\27\0\2\111\1\0\3\111\6\311"+
    "\1\111\3\311\2\111\10\311\1\111\1\311\1\111\17\311"+
    "\1\111\11\311\31\111\1\0\3\111\6\311\1\111\2\311"+
    "\5\111\2\311\2\111\1\311\2\111\1\311\1\111\17\311"+
    "\1\111\11\311\27\111\6\0\6\314\1\0\3\314\2\0"+
    "\10\314\1\0\1\314\1\0\17\314\1\0\11\314\35\0"+
    "\6\314\1\0\2\314\5\0\2\314\2\0\1\314\2\0"+
    "\1\314\1\0\17\314\1\0\11\314\40\0\1\365\111\0"+
    "\4\17\1\366\1\17\1\0\3\17\1\125\1\0\10\17"+
    "\1\0\1\17\1\0\17\17\1\125\11\17\35\0\6\17"+
    "\1\0\3\17\1\125\1\0\10\17\1\0\1\17\1\0"+
    "\14\17\1\367\2\17\1\125\11\17\35\0\6\17\1\0"+
    "\3\17\1\125\1\0\10\17\1\0\1\17\1\0\13\17"+
    "\1\370\3\17\1\125\11\17\35\0\6\17\1\0\3\17"+
    "\1\125\1\0\10\17\1\0\1\17\1\0\16\17\1\371"+
    "\1\125\11\17\35\0\4\17\1\372\1\17\1\0\3\17"+
    "\1\125\1\0\10\17\1\0\1\17\1\0\17\17\1\125"+
    "\11\17\35\0\6\17\1\0\3\17\1\125\1\0\10\17"+
    "\1\0\1\17\1\0\3\17\1\373\1\374\12\17\1\125"+
    "\11\17\35\0\6\17\1\0\3\17\1\125\1\0\10\17"+
    "\1\0\1\17\1\0\7\17\1\375\7\17\1\125\11\17"+
    "\35\0\6\17\1\0\3\17\1\125\1\0\10\17\1\0"+
    "\1\17\1\0\2\17\1\376\14\17\1\125\11\17\45\0"+
    "\1\377\3\0\1\377\6\0\1\377\72\0\1\147\6\0"+
    "\1\u0100\3\0\1\u0100\1\152\2\0\2\u0100\1\0\1\u0100"+
    "\1\155\1\147\67\0\2\u0101\3\0\1\u0101\2\0\1\u0101"+
    "\3\0\2\u0101\1\0\5\u0101\1\0\1\u0101\4\0\2\u0101"+
    "\1\0\1\u0101\1\0\1\u0101\4\0\2\u0101\47\0\6\17"+
    "\1\0\3\17\1\125\1\0\10\17\1\0\1\17\1\0"+
    "\2\17\1\u0102\14\17\1\125\11\17\35\0\6\17\1\0"+
    "\3\17\1\125\1\0\10\17\1\0\1\17\1\0\12\17"+
    "\1\u0103\4\17\1\125\11\17\35\0\6\17\1\0\3\17"+
    "\1\125\1\0\10\17\1\0\1\17\1\0\13\17\1\u0104"+
    "\3\17\1\125\11\17\35\0\6\17\1\0\3\17\1\125"+
    "\1\0\10\17\1\0\1\17\1\0\17\17\1\125\1\17"+
    "\1\u0105\7\17\35\0\6\17\1\0\3\17\1\125\1\0"+
    "\10\17\1\0\1\17\1\0\17\17\1\125\5\17\1\u0106"+
    "\3\17\35\0\6\17\1\0\3\17\1\125\1\0\10\17"+
    "\1\0\1\17\1\0\13\17\1\u0107\3\17\1\125\11\17"+
    "\35\0\6\17\1\0\3\17\1\125\1\0\10\17\1\0"+
    "\1\17\1\0\12\17\1\u0108\4\17\1\125\11\17\35\0"+
    "\1\17\1\u0109\4\17\1\0\3\17\1\125\1\0\10\17"+
    "\1\0\1\17\1\0\17\17\1\125\11\17\35\0\6\17"+
    "\1\0\3\17\1\125\1\0\10\17\1\0\1\17\1\0"+
    "\16\17\1\u010a\1\125\11\17\35\0\6\17\1\0\3\17"+
    "\1\125\1\0\10\17\1\0\1\17\1\0\12\17\1\u010b"+
    "\4\17\1\125\11\17\35\0\6\17\1\0\3\17\1\125"+
    "\1\0\10\17\1\0\1\17\1\0\11\17\1\u010c\5\17"+
    "\1\125\11\17\35\0\6\17\1\0\3\17\1\125\1\0"+
    "\10\17\1\0\1\17\1\0\11\17\1\u010d\5\17\1\125"+
    "\11\17\35\0\5\17\1\u010e\1\0\3\17\1\125\1\0"+
    "\10\17\1\0\1\17\1\0\17\17\1\125\11\17\35\0"+
    "\1\17\1\u010f\4\17\1\0\3\17\1\125\1\0\10\17"+
    "\1\0\1\17\1\0\17\17\1\125\11\17\31\0\1\361"+
    "\113\0\1\360\1\361\113\0\1\360\1\361\3\0\6\363"+
    "\1\0\3\363\2\0\10\363\1\0\1\363\1\0\17\363"+
    "\1\0\11\363\35\0\6\363\1\0\2\363\5\0\2\363"+
    "\2\0\1\363\2\0\1\363\1\0\17\363\1\0\11\363"+
    "\41\0\1\u0110\110\0\1\17\1\u0111\4\17\1\0\3\17"+
    "\1\125\1\0\10\17\1\0\1\17\1\0\17\17\1\125"+
    "\11\17\35\0\1\17\1\u0112\4\17\1\0\3\17\1\125"+
    "\1\0\10\17\1\0\1\17\1\0\17\17\1\125\11\17"+
    "\35\0\6\17\1\0\1\17\1\u0113\1\17\1\125\1\0"+
    "\10\17\1\0\1\17\1\0\17\17\1\125\11\17\35\0"+
    "\6\17\1\0\3\17\1\125\1\0\10\17\1\0\1\17"+
    "\1\0\5\17\1\u0114\11\17\1\125\11\17\35\0\6\17"+
    "\1\0\3\17\1\125\1\0\10\17\1\0\1\u0115\1\0"+
    "\17\17\1\125\11\17\35\0\6\17\1\0\3\17\1\125"+
    "\1\0\10\17\1\0\1\u0116\1\0\17\17\1\125\11\17"+
    "\45\0\1\u0117\3\0\1\u0117\6\0\1\u0117\72\0\1\147"+
    "\6\0\1\u0118\3\0\1\u0118\1\152\2\0\2\u0118\1\0"+
    "\1\u0118\1\155\1\147\67\0\2\u0119\3\0\1\u0119\2\0"+
    "\1\u0119\3\0\2\u0119\1\0\5\u0119\1\0\1\u0119\4\0"+
    "\2\u0119\1\0\1\u0119\1\0\1\u0119\4\0\2\u0119\47\0"+
    "\1\17\1\u011a\4\17\1\0\3\17\1\125\1\0\10\17"+
    "\1\0\1\17\1\0\17\17\1\125\11\17\35\0\4\17"+
    "\1\u011b\1\17\1\0\3\17\1\125\1\0\10\17\1\0"+
    "\1\17\1\0\17\17\1\125\11\17\35\0\6\17\1\0"+
    "\3\17\1\125\1\0\10\17\1\0\1\17\1\0\12\17"+
    "\1\u011c\4\17\1\125\11\17\35\0\1\17\1\u011d\4\17"+
    "\1\0\3\17\1\125\1\0\10\17\1\0\1\17\1\0"+
    "\17\17\1\125\11\17\27\0\5\u0110\1\u011e\107\u0110\6\0"+
    "\5\17\1\u011f\1\0\3\17\1\125\1\0\10\17\1\0"+
    "\1\17\1\0\17\17\1\125\11\17\35\0\6\17\1\0"+
    "\1\17\1\u0120\1\17\1\125\1\0\10\17\1\0\1\17"+
    "\1\0\17\17\1\125\11\17\35\0\6\17\1\0\3\17"+
    "\1\125\1\0\10\17\1\0\1\17\1\0\3\17\1\u0121"+
    "\13\17\1\125\11\17\35\0\6\17\1\0\1\17\1\u0122"+
    "\1\17\1\125\1\0\10\17\1\0\1\17\1\0\17\17"+
    "\1\125\11\17\35\0\6\17\1\0\1\17\1\u0123\1\17"+
    "\1\125\1\0\10\17\1\0\1\17\1\0\17\17\1\125"+
    "\11\17\45\0\1\u0124\3\0\1\u0124\6\0\1\u0124\72\0"+
    "\1\147\6\0\1\u0125\3\0\1\u0125\1\152\2\0\2\u0125"+
    "\1\0\1\u0125\1\155\1\147\67\0\2\u0126\3\0\1\u0126"+
    "\2\0\1\u0126\3\0\2\u0126\1\0\5\u0126\1\0\1\u0126"+
    "\4\0\2\u0126\1\0\1\u0126\1\0\1\u0126\4\0\2\u0126"+
    "\41\0\5\u0110\1\u011e\1\u0110\1\u0127\105\u0110\6\0\6\17"+
    "\1\0\3\17\1\125\1\0\10\17\1\0\1\17\1\0"+
    "\17\17\1\u0128\11\17\35\0\6\17\1\0\3\17\1\125"+
    "\1\0\10\17\1\0\1\17\1\0\1\17\1\u0129\15\17"+
    "\1\125\11\17\35\0\6\17\1\0\1\17\1\u012a\1\17"+
    "\1\125\1\0\10\17\1\0\1\17\1\0\17\17\1\125"+
    "\11\17\35\0\6\17\1\0\1\17\1\u012b\1\17\1\125"+
    "\1\0\10\17\1\0\1\17\1\0\17\17\1\125\11\17"+
    "\45\0\1\u012c\3\0\1\u012c\6\0\1\u012c\72\0\1\147"+
    "\6\0\1\u012d\3\0\1\u012d\1\152\2\0\2\u012d\1\0"+
    "\1\u012d\1\155\1\147\67\0\2\u012e\3\0\1\u012e\2\0"+
    "\1\u012e\3\0\2\u012e\1\0\5\u012e\1\0\1\u012e\4\0"+
    "\2\u012e\1\0\1\u012e\1\0\1\u012e\4\0\2\u012e\41\0"+
    "\5\u0110\1\u011e\4\u0110\1\u012f\102\u0110\6\0\6\17\1\0"+
    "\3\17\1\125\1\0\10\17\1\0\1\17\1\0\2\17"+
    "\1\u0130\14\17\1\125\11\17\45\0\1\u0131\3\0\1\u0131"+
    "\6\0\1\u0131\72\0\1\147\6\0\1\u0132\3\0\1\u0132"+
    "\1\152\2\0\2\u0132\1\0\1\u0132\1\155\1\147\67\0"+
    "\2\u0133\3\0\1\u0133\2\0\1\u0133\3\0\2\u0133\1\0"+
    "\5\u0133\1\0\1\u0133\4\0\2\u0133\1\0\1\u0133\1\0"+
    "\1\u0133\4\0\2\u0133\41\0\5\u0110\1\u011e\5\u0110\1\u0134"+
    "\101\u0110\6\0\6\17\1\0\3\17\1\125\1\0\10\17"+
    "\1\0\1\17\1\0\1\u0135\16\17\1\125\11\17\45\0"+
    "\1\u0136\3\0\1\u0136\6\0\1\u0136\72\0\1\147\6\0"+
    "\1\u0137\3\0\1\u0137\1\152\2\0\2\u0137\1\0\1\u0137"+
    "\1\155\1\147\67\0\2\u0138\3\0\1\u0138\2\0\1\u0138"+
    "\3\0\2\u0138\1\0\5\u0138\1\0\1\u0138\4\0\2\u0138"+
    "\1\0\1\u0138\1\0\1\u0138\4\0\2\u0138\47\0\6\17"+
    "\1\0\1\17\1\u0139\1\17\1\125\1\0\10\17\1\0"+
    "\1\17\1\0\17\17\1\125\11\17\45\0\1\u013a\3\0"+
    "\1\u013a\6\0\1\u013a\72\0\1\147\6\0\1\u013b\3\0"+
    "\1\u013b\1\152\2\0\2\u013b\1\0\1\u013b\1\155\1\147"+
    "\67\0\6\17\1\0\1\17\1\u013c\1\17\1\125\1\0"+
    "\10\17\1\0\1\17\1\0\17\17\1\125\11\17\45\0"+
    "\1\u013d\3\0\1\u013d\6\0\1\u013d\72\0\1\147\6\0"+
    "\1\u013e\3\0\1\u013e\1\152\2\0\2\u013e\1\0\1\u013e"+
    "\1\155\1\147\77\0\1\u013f\3\0\1\u013f\6\0\1\u013f"+
    "\72\0\1\147\6\0\1\u0140\3\0\1\u0140\1\152\2\0"+
    "\2\u0140\1\0\1\u0140\1\155\1\147\77\0\1\u0141\3\0"+
    "\1\u0141\6\0\1\u0141\72\0\1\147\6\0\1\u0142\3\0"+
    "\1\u0142\1\152\2\0\2\u0142\1\0\1\u0142\1\155\1\147"+
    "\77\0\1\u0143\3\0\1\u0143\6\0\1\u0143\72\0\1\147"+
    "\6\0\1\u0144\3\0\1\u0144\1\152\2\0\2\u0144\1\0"+
    "\1\u0144\1\155\1\147\77\0\1\u0145\3\0\1\u0145\6\0"+
    "\1\u0145\72\0\1\147\6\0\1\u0146\3\0\1\u0146\1\152"+
    "\2\0\2\u0146\1\0\1\u0146\1\155\1\147\77\0\1\u0147"+
    "\3\0\1\u0147\6\0\1\u0147\101\0\1\u0148\3\0\1\u0148"+
    "\6\0\1\u0148\101\0\1\u0149\3\0\1\u0149\6\0\1\u0149"+
    "\101\0\1\u014a\3\0\1\u014a\6\0\1\u014a\101\0\1\u014b"+
    "\3\0\1\u014b\6\0\1\u014b\101\0\1\u014c\3\0\1\u014c"+
    "\6\0\1\u014c\101\0\1\u014d\3\0\1\u014d\6\0\1\u014d"+
    "\101\0\1\u014e\3\0\1\u014e\6\0\1\u014e\101\0\1\u014f"+
    "\3\0\1\u014f\6\0\1\u014f\101\0\1\u0150\3\0\1\u0150"+
    "\6\0\1\u0150\101\0\1\u0151\3\0\1\u0151\6\0\1\u0151"+
    "\101\0\1\u0152\3\0\1\u0152\6\0\1\u0152\101\0\1\u0153"+
    "\3\0\1\u0153\6\0\1\u0153\101\0\1\u0154\3\0\1\u0154"+
    "\6\0\1\u0154\101\0\1\u0155\3\0\1\u0155\6\0\1\u0155"+
    "\101\0\1\u0156\3\0\1\u0156\6\0\1\u0156\101\0\1\u0157"+
    "\3\0\1\u0157\6\0\1\u0157\101\0\1\u0138\3\0\1\u0138"+
    "\6\0\1\u0138\63\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19404];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\1\1\2\11\26\1\1\11\6\1\10\11"+
    "\12\1\5\11\2\1\1\11\1\1\1\11\3\1\1\11"+
    "\5\1\1\11\2\1\1\11\1\1\1\0\1\1\1\11"+
    "\13\1\1\11\1\1\1\11\1\1\3\0\3\1\1\0"+
    "\6\1\1\11\20\1\11\11\2\1\5\11\3\1\1\0"+
    "\1\1\1\0\1\11\1\0\17\1\1\0\4\1\1\11"+
    "\25\1\3\0\3\1\1\11\1\1\2\0\42\1\1\11"+
    "\4\0\32\1\1\0\15\1\1\0\10\1\1\0\1\11"+
    "\6\1\1\0\4\1\1\11\3\1\1\11\37\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[343];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */

  /** Origin id for the tokens. */	
  private String originId;
  
  /** String builder used for texts. */
  private final StringBuilder string = new StringBuilder();
  
  /** Builder for template text (text not in the PHP brackets) */
  private final StringBuilder templateText = new StringBuilder();
  
  /** The label for the current here-/nowdoc block. */
  private String heredocLabel;
  
  /** The type of the current here-/nowdoc block. */
  private ETokenType heredocType;
  
  /** Several tokens in this grammer can be multi line. This variable is used to store the start line. */
  private int startLine;
  
  /** Keeps a stack of string states. This is needed due to the inline code for strings being fully recursive.*/
  public Stack<Integer> stateStack = new Stack<>();
  
  private ETokenType lastTokenType;
  
   /**
   * Wrapper to store last token.
   */
  public RubyToken getNextToken() throws java.io.IOException {
  	RubyToken token = internalScan();
  	lastTokenType=token.getType();
  	return token;
  }
 
  /** Resets scanner */   
  @Override 
  public void reset(java.io.Reader reader, String originId) {
    this.originId = originId;
    templateText.setLength(0);
    string.setLength(0);
    startLine=0;
    heredocLabel=null;
    heredocType=null;
    clearQueue();
    yyreset(reader);
  }
  
  /** Begin a string. */
  // TODO (TK) don't push when restarting after stringinlinecode
  private void beginString(int lexerState) {
    stateStack.push(yystate());
  	beginStringNoPush(lexerState);
  }
  
  private void beginStringNoPush(int lexerState) {
  	string.append(yytext());
  	startLine=yyline;
  	yybegin(lexerState);  
  }
  
  
  /** Close string and return token. */
  private RubyToken endString(ETokenType type, int lexerState) {
    return endString(type, lexerState, 0);
  }
  
   /** Close string and return token. */
  private RubyToken endString(ETokenType type, int lexerState, int offset) {
    yybegin(lexerState);
    int startOffset = yychar - string.length();
    string.append(yytext());
    RubyToken token = new RubyToken(type, startOffset, startLine, string.toString().substring(0, string.length()-offset), originId);   
    string.setLength(0); 
    startLine=0;
    return token;
  }
  
  /** Close string and return token. */
  private RubyToken endString(ETokenType type) {
    return endString(type, stateStack.pop());
  }
    
  /** {@inheritDoc} */
  @Override
  public void close() throws java.io.IOException {
    yyclose();
  }
   
  /** Factory method for tokens. */  
  private RubyToken token (ETokenType type) {
	return new RubyToken(type, yychar, yyline, yytext(), originId);
  }

  /** Factory method for tokens. */  
  private RubyToken token (ETokenType type, int offset, int lineNumber, String text) {
	return new RubyToken (type, offset, lineNumber, text, originId);
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  RubyScanner(java.io.Reader in, String originId) {
      this.originId = originId;
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  RubyScanner(java.io.InputStream in, String originId) {
    this(new java.io.InputStreamReader(in), originId);
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2252) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public RubyToken internalScan() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 12: 
          { return token (ETokenType.LPAREN);
          }
        case 106: break;
        case 77: 
          { return token (ETokenType.CASE);
          }
        case 107: break;
        case 59: 
          { return token (ETokenType.LSHIFT);
          }
        case 108: break;
        case 40: 
          { yybegin(STRINGINLINECODE); return new RubyToken(ETokenType.INTERPOLATIONSTART, yychar-1, yyline, "#" + yytext(), originId);
          }
        case 109: break;
        case 43: 
          { return token (ETokenType.IF);
          }
        case 110: break;
        case 96: 
          { return token (ETokenType.RESCUE);
          }
        case 111: break;
        case 56: 
          { if (   lastTokenType==ETokenType.IDENTIFIER 
  		    || lastTokenType==ETokenType.RPAREN
  		    || lastTokenType==ETokenType.RBRACK
  		    || lastTokenType==ETokenType.INTEGER_LITERAL
  		    || lastTokenType==ETokenType.FLOATING_POINT_LITERAL ) {
  				return token(ETokenType.DIVEQ); 
  		} else {
                stateStack.push(yystate()); yybegin(REGEX); string.setLength(0); string.append(yytext());
   		}
          }
        case 112: break;
        case 85: 
          { return token (ETokenType.BEGIN_BLOCK);
          }
        case 113: break;
        case 80: 
          { return token (ETokenType.WHEN);
          }
        case 114: break;
        case 72: 
          { return token (ETokenType.FOR);
          }
        case 115: break;
        case 34: 
          { beginString(BACKTICKSTRING);
          }
        case 116: break;
        case 53: 
          { return token (ETokenType.DOUBLE_COLON);
          }
        case 117: break;
        case 38: 
          { yybegin(stateStack.pop());
                                   return token(ETokenType.UNTERMINATED_REGEX_LITERAL, yychar-string.length()+1, yyline, string.toString());
          }
        case 118: break;
        case 58: 
          { return token (ETokenType.LTEQ);
          }
        case 119: break;
        case 17: 
          { return token (ETokenType.RBRACK);
          }
        case 120: break;
        case 87: 
          { return token (ETokenType.SUPER);
          }
        case 121: break;
        case 1: 
          { return token (ETokenType.ILLEGAL_CHARACTER);
          }
        case 122: break;
        case 20: 
          { return token (ETokenType.MINUS);
          }
        case 123: break;
        case 32: 
          { beginString(DOUBLEQUOTEDSTRING);
          }
        case 124: break;
        case 84: 
          { return token (ETokenType.ELSIF);
          }
        case 125: break;
        case 23: 
          { return token (ETokenType.MULT);
          }
        case 126: break;
        case 86: 
          { return token (ETokenType.ALIAS);
          }
        case 127: break;
        case 62: 
          { return token (ETokenType.OROR);
          }
        case 128: break;
        case 3: 
          { yyline -= 1;
          }
        case 129: break;
        case 25: 
          { return token (ETokenType.MOD);
          }
        case 130: break;
        case 100: 
          { return token (ETokenType.END_OF_FILE);
          }
        case 131: break;
        case 88: 
          { return token (ETokenType.RETRY);
          }
        case 132: break;
        case 22: 
          { return token (ETokenType.COLON);
          }
        case 133: break;
        case 6: 
          { return token (ETokenType.HASH_COMMENT);
          }
        case 134: break;
        case 81: 
          { // we trim to remove the line terminator
                                   heredocLabel = yytext().trim();
                                   heredocLabel = StringUtils.stripPrefix(heredocLabel, "<<");
                                   heredocLabel = StringUtils.stripPrefix(heredocLabel, "-");
                                   heredocType = ETokenType.HEREDOC;
                                   beginString(HEREDOC);
          }
        case 135: break;
        case 73: 
          { return token (ETokenType.ELSE);
          }
        case 136: break;
        case 18: 
          { return token (ETokenType.SEMICOLON);
          }
        case 137: break;
        case 92: 
          { return token (ETokenType.UNTIL);
          }
        case 138: break;
        case 51: 
          { return token (ETokenType.GTEQ);
          }
        case 139: break;
        case 15: 
          { if(yystate() == STRINGINLINECODE) {
  										RubyToken token = token(ETokenType.INTERPOLATIONEND);
									  	beginStringNoPush(stateStack.pop());
									  	// Remove the }
									  	string.setLength(0);
                 						return token;
  									} else {
  										return token (ETokenType.RBRACE);
  									}
          }
        case 140: break;
        case 16: 
          { return token (ETokenType.LBRACK);
          }
        case 141: break;
        case 94: 
          { return token (ETokenType.WHILE);
          }
        case 142: break;
        case 61: 
          { return token (ETokenType.ANDAND);
          }
        case 143: break;
        case 9: 
          { return token (ETokenType.DOT);
          }
        case 144: break;
        case 64: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { stateStack.push(yystate());
  									RubyToken token = endString(ETokenType.STRING_LITERAL, INTERPOLATIONSTART, 1);
  									return token;
          }
        case 145: break;
        case 19: 
          { return token (ETokenType.COMMA);
          }
        case 146: break;
        case 91: 
          { return token (ETokenType.UNDEF);
          }
        case 147: break;
        case 48: 
          { return token (ETokenType.PLUSEQ);
          }
        case 148: break;
        case 28: 
          { return token (ETokenType.AND);
          }
        case 149: break;
        case 37: 
          { return endString(ETokenType.BACKTICK_STRING_LITERAL);
          }
        case 150: break;
        case 97: 
          { return token (ETokenType.RETURN);
          }
        case 151: break;
        case 45: 
          { return token (ETokenType.NOTEQ);
          }
        case 152: break;
        case 65: 
          { if (yytext().trim().equals(heredocLabel)) {
                                     return endString(heredocType);
                                   }
                                   string.append( yytext() );
          }
        case 153: break;
        case 31: 
          { return token(ETokenType.BACKSLASH);
          }
        case 154: break;
        case 71: 
          { return token (ETokenType.END_BLOCK);
          }
        case 155: break;
        case 7: 
          { return token (ETokenType.NOT);
          }
        case 156: break;
        case 8: 
          { return token(ETokenType.INTEGER_LITERAL);
          }
        case 157: break;
        case 60: 
          { return token (ETokenType.EXPONENTIATIONEQ);
          }
        case 158: break;
        case 14: 
          { return token (ETokenType.LBRACE);
          }
        case 159: break;
        case 78: 
          { return token (ETokenType.TRUE);
          }
        case 160: break;
        case 24: 
          { if (   lastTokenType==ETokenType.IDENTIFIER 
  		    || lastTokenType==ETokenType.RPAREN
  		    || lastTokenType==ETokenType.RBRACK
  		    || lastTokenType==ETokenType.INTEGER_LITERAL
  		    || lastTokenType==ETokenType.FLOATING_POINT_LITERAL ) {
  			     return token(ETokenType.DIV);		
  		} else {
                 stateStack.push(yystate()); 
                 yybegin(REGEX); 
                 string.setLength(0); 
                 string.append(yytext());
   		}
          }
        case 161: break;
        case 104: 
          { return token (ETokenType.MULTILINE_COMMENT);
          }
        case 162: break;
        case 36: 
          { return endString(ETokenType.STRING_LITERAL);
          }
        case 163: break;
        case 21: 
          { return token (ETokenType.GT);
          }
        case 164: break;
        case 75: 
          { return token (ETokenType.SELF);
          }
        case 165: break;
        case 69: 
          { return token (ETokenType.DEF);
          }
        case 166: break;
        case 5: 
          { return token (ETokenType.IDENTIFIER);
          }
        case 167: break;
        case 41: 
          { return token (ETokenType.EQEQ);
          }
        case 168: break;
        case 4: 
          { return token (ETokenType.EQ);
          }
        case 169: break;
        case 55: 
          { return token (ETokenType.EXPONENT);
          }
        case 170: break;
        case 10: 
          { return token (ETokenType.PLUS);
          }
        case 171: break;
        case 67: 
          { return token (ETokenType.NIL);
          }
        case 172: break;
        case 103: 
          { return token (ETokenType.LINE_KEYWORD);
          }
        case 173: break;
        case 47: 
          { return token (ETokenType.DOUBLE_DOT);
          }
        case 174: break;
        case 57: 
          { return token (ETokenType.MODEQ);
          }
        case 175: break;
        case 44: 
          { return token (ETokenType.DO);
          }
        case 176: break;
        case 74: 
          { return token (ETokenType.NEXT);
          }
        case 177: break;
        case 101: 
          { return token (ETokenType.DEFINED);
          }
        case 178: break;
        case 50: 
          { return token (ETokenType.ARROW);
          }
        case 179: break;
        case 26: 
          { return token (ETokenType.LT);
          }
        case 180: break;
        case 66: 
          { return token (ETokenType.END);
          }
        case 181: break;
        case 33: 
          { beginString(SINGLEQUOTEDSTRING);
          }
        case 182: break;
        case 27: 
          { return token (ETokenType.XOR);
          }
        case 183: break;
        case 82: 
          { return token (ETokenType.BEGIN);
          }
        case 184: break;
        case 54: 
          { return token (ETokenType.MULTEQ);
          }
        case 185: break;
        case 79: 
          { return token (ETokenType.THEN);
          }
        case 186: break;
        case 39: 
          { yybegin(stateStack.pop()); string.append(yytext());
  								  RubyToken token = token(ETokenType.REGEX_LITERAL, yychar-string.length()+yytext().length(), yyline, string.toString());
  								  string.setLength(0);
                                   return token;
          }
        case 187: break;
        case 89: 
          { return token (ETokenType.CLASS);
          }
        case 188: break;
        case 42: 
          { return token (ETokenType.IN);
          }
        case 189: break;
        case 102: 
          { return token (ETokenType.FILE);
          }
        case 190: break;
        case 13: 
          { return token (ETokenType.RPAREN);
          }
        case 191: break;
        case 70: 
          { return token (ETokenType.TRIPLE_DOT);
          }
        case 192: break;
        case 52: 
          { return token (ETokenType.RSHIFT);
          }
        case 193: break;
        case 29: 
          { return token (ETokenType.OR);
          }
        case 194: break;
        case 49: 
          { return token (ETokenType.MINUSEQ);
          }
        case 195: break;
        case 2: 
          { /* ignore */
          }
        case 196: break;
        case 30: 
          { return token (ETokenType.COMP);
          }
        case 197: break;
        case 68: 
          { return token (ETokenType.NOT_KEYWORD);
          }
        case 198: break;
        case 35: 
          { string.append( yytext() );
          }
        case 199: break;
        case 63: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { string.append( yytext() );
          }
        case 200: break;
        case 98: 
          { return token (ETokenType.UNLESS);
          }
        case 201: break;
        case 90: 
          { return token (ETokenType.FALSE);
          }
        case 202: break;
        case 105: 
          { return token (ETokenType.ENCODING);
          }
        case 203: break;
        case 76: 
          { return token (ETokenType.REDO);
          }
        case 204: break;
        case 93: 
          { return token (ETokenType.YIELD);
          }
        case 205: break;
        case 95: 
          { return token (ETokenType.ENSURE);
          }
        case 206: break;
        case 46: 
          { return token(ETokenType.FLOATING_POINT_LITERAL);
          }
        case 207: break;
        case 99: 
          { return token (ETokenType.MODULE);
          }
        case 208: break;
        case 83: 
          { return token (ETokenType.BREAK);
          }
        case 209: break;
        case 11: 
          { return token (ETokenType.QUESTION);
          }
        case 210: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case DOUBLEQUOTEDSTRING: {
              yybegin(YYINITIAL);
                                   return new RubyToken(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()+1, yyline, string.toString(), originId);
            }
            case 344: break;
            case REGEX: {
              yybegin(stateStack.pop());
                                   return token(ETokenType.UNTERMINATED_REGEX_LITERAL, yychar-string.length()+1, yyline, string.toString());
            }
            case 345: break;
            case BACKTICKSTRING: {
              yybegin(YYINITIAL);
                                   return new RubyToken(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()+1, yyline, string.toString(), originId);
            }
            case 346: break;
            case HEREDOC: {
              yybegin(YYINITIAL);
                                   return new RubyToken(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()+1, yyline, string.toString(), originId);
            }
            case 347: break;
            case SINGLEQUOTEDSTRING: {
              yybegin(YYINITIAL);
                                   return new RubyToken(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()+1, yyline, string.toString(), originId);
            }
            case 348: break;
            default:
              {
                return token (ETokenType.EOF);
              }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
