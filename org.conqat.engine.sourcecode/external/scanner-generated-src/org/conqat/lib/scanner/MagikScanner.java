/* The following code was generated by JFlex 1.4.2 on {{TIMESTAMP}} */

package org.conqat.lib.scanner;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on {{TIMESTAMP}} from the specification file
 * <tt>/home/freakout/cqse/repositories/conqat/trunk/lib/org.conqat.lib.scanner/grammars/magik.flex</tt>
 */
class MagikScanner implements ILenientScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int SINGLE_QUOTE_STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int IDENTIFIER_ESCAPE = 8;
  public static final int IDENTIFIER = 6;
  public static final int DOUBLE_QUOTE_STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\22\1\2\1\0\1\23\1\1\22\0\1\22\1\3\1\74"+
    "\1\21\1\61\1\17\1\14\1\20\1\24\1\25\1\43\1\42\1\32"+
    "\1\7\1\13\1\44\12\5\1\34\1\33\1\51\1\52\1\53\1\3"+
    "\1\35\4\12\1\15\14\12\1\10\10\12\1\26\1\4\1\27\1\62"+
    "\1\6\1\0\1\57\1\63\1\54\1\45\1\16\1\55\1\72\1\67"+
    "\1\46\1\12\1\66\1\64\1\50\1\37\1\40\1\71\1\12\1\11"+
    "\1\56\1\41\1\65\1\47\1\73\1\60\1\70\1\12\1\30\1\75"+
    "\1\31\1\36\53\0\1\3\12\0\1\3\4\0\1\3\5\0\27\3"+
    "\1\0\7\3\30\3\1\0\10\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\2\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\2\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\2\3\1\3\1\3\1\3\1\3\3\3\2\3"+
    "\1\3\1\3\1\3\2\3\1\3\3\3\2\3\4\3\1\3\2\3"+
    "\1\3\3\3\3\3\2\3\1\3\2\3\1\3\1\3\1\3\1\3"+
    "\1\3\2\3\1\3\1\3\2\3\1\3\1\3\2\3\1\3\3\3"+
    "\1\3\1\3\1\3\2\3\2\3\1\0\1\3\3\3\4\0\1\3"+
    "\1\0\1\3\1\3\1\0\1\3\1\3\1\0\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\2\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\2\3\1\3\1\0\1\3\1\3\1\3\3\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\7\3\2\3\1\3\2\3"+
    "\2\3\1\3\1\3\4\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\105\3\1\0\44\3\7\0\2\3\36\0\5\3\140\0"+
    "\1\3\52\0\1\3\1\3\1\3\1\3\2\0\1\3\1\3\2\0"+
    "\4\3\10\0\1\3\1\0\3\3\1\0\1\3\1\0\2\3\1\3"+
    "\21\3\1\0\11\3\43\3\1\3\2\3\3\3\3\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\5\3\1\3\1\3\1\0\1\3\1\3\2\3\2\3\63\3"+
    "\60\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\10\0\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\2\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\2\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\11\0\46\3\12\0\47\3\u0b18\0\46\3\u0c3a\0\300\3"+
    "\100\0\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\11\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\11\3\10\3"+
    "\6\3\2\0\6\3\2\0\10\3\10\3\10\3\10\3\6\3\2\0"+
    "\6\3\2\0\10\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\1\3\10\3\10\3\16\3\2\0\10\3\10\0\10\3\10\0\10\3"+
    "\10\0\5\3\1\0\2\3\4\3\2\0\1\3\3\0\3\3\1\0"+
    "\2\3\4\3\4\0\4\3\2\0\2\3\4\3\4\0\10\3\5\3"+
    "\5\0\3\3\1\0\2\3\4\3\224\0\5\3\155\0\1\3\4\0"+
    "\1\3\2\0\1\3\3\3\2\3\3\3\1\3\1\0\1\3\3\0"+
    "\5\3\6\0\1\3\1\0\1\3\1\0\1\3\1\0\4\3\1\0"+
    "\1\3\4\3\1\3\4\0\1\3\2\0\2\3\2\3\5\0\1\3"+
    "\4\3\4\0\1\3\21\0\20\3\20\3\3\0\1\3\1\3\u0331\0"+
    "\32\3\32\3\u0716\0\57\3\1\0\57\3\1\0\1\3\1\3\3\3"+
    "\2\3\1\3\1\3\1\3\1\3\1\3\1\3\4\3\1\3\1\3"+
    "\2\3\1\3\10\3\3\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\2\3\6\0\1\3\1\3\1\3\1\3\21\0\46\3"+
    "\u791a\0\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\22\0\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\212\0\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\3\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3\12\3\1\3"+
    "\1\3\1\3\1\3\2\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\1\3\3\0\1\3\1\3\1\3\1\3\1\0\1\3"+
    "\1\3\16\0\1\3\1\3\1\3\1\3\1\3\1\3\1\3\1\3"+
    "\1\3\1\3\120\0\1\3\u5305\0\7\3\14\0\5\3\u0409\0\32\3"+
    "\6\0\32\3\245\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\1\1\4\1\3\1\5"+
    "\1\6\1\1\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\1\1\35\1\36\1\37\2\40\1\41\1\37\1\42"+
    "\1\43\1\1\1\44\1\45\1\46\1\47\1\0\1\50"+
    "\1\0\24\47\1\0\2\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\0\1\60\1\43\1\61\1\4\1\50"+
    "\5\0\1\62\10\0\1\63\1\64\4\0\1\65\27\0"+
    "\1\66\1\67\1\4\6\0\1\70\4\0\1\71\3\0"+
    "\1\72\5\0\1\73\4\0\1\74\5\0\1\75\2\0"+
    "\1\76\27\0\1\77\1\100\1\0\1\101\1\102\1\0"+
    "\1\103\1\0\1\104\2\0\1\105\1\0\1\106\6\0"+
    "\1\107\7\0\1\110\1\0\1\111\3\0\1\112\5\0"+
    "\1\113\1\114\3\0\1\115\7\0\1\116\6\0\1\117"+
    "\1\120\2\0\1\121\1\122\2\0\1\123\1\124\1\0"+
    "\1\125\1\0\1\126\7\0\1\127\1\0\1\130\6\0"+
    "\1\131\3\0\1\132\1\133\13\0\1\134\1\0\1\135"+
    "\1\136\4\0\1\137\1\140\1\0\1\141\2\0\1\142"+
    "\2\0\1\143\1\144\3\0\1\145\1\0\1\146\1\147"+
    "\1\150\2\0\1\151\1\152\1\0\1\153\1\0\1\154"+
    "\1\155\1\156\1\0\1\157\1\160\1\0\1\161\1\162"+
    "\4\0\1\163\1\164\1\165\1\166";

  private static int [] zzUnpackAction() {
    int [] result = new int[353];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0136\0\u0364"+
    "\0\u03a2\0\u0136\0\u0136\0\u0136\0\u0136\0\u0136\0\u0136\0\u0136"+
    "\0\u0136\0\u0136\0\u0136\0\u0136\0\u03e0\0\u02aa\0\u041e\0\u0136"+
    "\0\u045c\0\u0136\0\u049a\0\u0136\0\u04d8\0\u0136\0\u0136\0\u0516"+
    "\0\u0554\0\u0136\0\u0136\0\u0136\0\u0136\0\u0592\0\u05d0\0\u0136"+
    "\0\u0136\0\u060e\0\u0136\0\u064c\0\u068a\0\u06c8\0\u0706\0\u0744"+
    "\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a\0\u08b8\0\u08f6\0\u0934"+
    "\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24"+
    "\0\u0b62\0\u0ba0\0\u02e8\0\u0136\0\u0bde\0\u0136\0\u0136\0\u0136"+
    "\0\u0136\0\u0136\0\u0136\0\u0c1c\0\u0136\0\u0c5a\0\u0136\0\u0c98"+
    "\0\u0cd6\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a"+
    "\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u0136"+
    "\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u0136\0\u1170\0\u11ae"+
    "\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e"+
    "\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e"+
    "\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4\0\u0136\0\u0136\0\u1702"+
    "\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u0136\0\u18b4"+
    "\0\u18f2\0\u1930\0\u196e\0\u0136\0\u19ac\0\u19ea\0\u1a28\0\u0136"+
    "\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u0136\0\u1b9c\0\u1bda"+
    "\0\u1c18\0\u1c56\0\u0136\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c"+
    "\0\u1dca\0\u1e08\0\u1e46\0\u0136\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e"+
    "\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e"+
    "\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u231e"+
    "\0\u235c\0\u239a\0\u23d8\0\u0136\0\u0136\0\u2416\0\u0136\0\u0136"+
    "\0\u2454\0\u0136\0\u2492\0\u0136\0\u24d0\0\u250e\0\u0136\0\u254c"+
    "\0\u0136\0\u258a\0\u25c8\0\u2606\0\u2644\0\u2682\0\u26c0\0\u0136"+
    "\0\u26fe\0\u273c\0\u277a\0\u27b8\0\u27f6\0\u2834\0\u2872\0\u28b0"+
    "\0\u28ee\0\u292c\0\u296a\0\u29a8\0\u29e6\0\u0136\0\u2a24\0\u2a62"+
    "\0\u2aa0\0\u2ade\0\u2b1c\0\u0136\0\u0136\0\u2b5a\0\u2b98\0\u2bd6"+
    "\0\u0136\0\u2c14\0\u2c52\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88"+
    "\0\u0136\0\u2dc6\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc\0\u0136"+
    "\0\u0136\0\u2f3a\0\u2f78\0\u0136\0\u0136\0\u2fb6\0\u2ff4\0\u0136"+
    "\0\u0136\0\u3032\0\u0136\0\u3070\0\u0136\0\u30ae\0\u30ec\0\u312a"+
    "\0\u3168\0\u31a6\0\u31e4\0\u3222\0\u0136\0\u3260\0\u0136\0\u329e"+
    "\0\u32dc\0\u331a\0\u3358\0\u3396\0\u33d4\0\u0136\0\u3412\0\u3450"+
    "\0\u348e\0\u0136\0\u0136\0\u34cc\0\u350a\0\u3548\0\u3586\0\u35c4"+
    "\0\u3602\0\u3640\0\u367e\0\u36bc\0\u36fa\0\u3738\0\u0136\0\u3776"+
    "\0\u0136\0\u0136\0\u37b4\0\u37f2\0\u3830\0\u386e\0\u0136\0\u0136"+
    "\0\u38ac\0\u0136\0\u38ea\0\u3928\0\u0136\0\u3966\0\u39a4\0\u0136"+
    "\0\u0136\0\u39e2\0\u3a20\0\u3a5e\0\u0136\0\u3a9c\0\u3ada\0\u0136"+
    "\0\u0136\0\u3b18\0\u3b56\0\u0136\0\u0136\0\u3b94\0\u0136\0\u3bd2"+
    "\0\u0136\0\u0136\0\u0136\0\u3c10\0\u0136\0\u0136\0\u3c4e\0\u0136"+
    "\0\u0136\0\u3c8c\0\u3cca\0\u3d08\0\u3d46\0\u0136\0\u0136\0\u0136"+
    "\0\u0136";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[353];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\2\7\1\10\1\11\1\12\1\13\1\14\3\10"+
    "\1\15\1\6\2\10\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\3\10\1\36\1\37\1\40\4\10"+
    "\1\41\1\42\1\43\5\10\1\44\1\45\11\10\1\46"+
    "\1\47\1\50\1\51\1\52\15\50\1\53\53\50\1\54"+
    "\2\50\1\51\1\52\15\50\1\54\53\50\1\55\1\50"+
    "\3\6\1\56\1\57\2\56\1\6\3\56\2\6\2\56"+
    "\20\6\3\56\3\6\4\56\3\6\5\56\2\6\11\56"+
    "\1\6\1\60\2\61\1\6\72\61\1\62\77\0\2\7"+
    "\76\0\4\63\1\0\3\63\2\0\2\63\20\0\3\63"+
    "\3\0\4\63\3\0\5\63\2\0\11\63\1\0\1\63"+
    "\2\10\1\0\73\10\5\0\1\12\2\0\2\64\1\0"+
    "\1\65\3\66\62\0\4\63\1\0\1\63\1\67\1\63"+
    "\2\0\1\63\1\70\20\0\1\71\1\72\1\73\3\0"+
    "\1\74\1\75\1\63\1\76\3\0\1\77\1\100\1\101"+
    "\1\102\1\103\2\0\1\104\1\105\1\106\1\63\1\107"+
    "\1\63\1\110\1\111\1\112\1\0\1\63\5\0\1\12"+
    "\5\0\1\113\67\0\1\65\70\0\2\114\1\0\2\114"+
    "\1\115\2\114\3\115\2\114\2\115\20\114\3\115\3\114"+
    "\4\115\3\114\5\115\2\114\11\115\2\114\1\20\2\0"+
    "\73\20\22\0\1\21\125\0\1\116\66\0\1\117\103\0"+
    "\1\120\1\121\1\116\74\0\1\122\1\123\73\0\1\124"+
    "\24\0\1\50\2\0\15\50\1\0\53\50\1\0\1\50"+
    "\2\0\1\52\76\0\1\56\1\125\2\56\1\0\3\56"+
    "\2\0\2\56\20\0\3\56\3\0\4\56\3\0\5\56"+
    "\2\0\11\56\1\0\1\125\2\126\1\0\73\126\3\0"+
    "\4\127\1\0\3\127\2\0\2\127\20\0\3\127\3\0"+
    "\4\127\3\0\5\127\2\0\11\127\1\0\1\127\5\0"+
    "\1\130\2\0\3\130\2\0\2\130\20\0\3\130\3\0"+
    "\4\130\3\0\5\130\2\0\11\130\7\0\1\65\6\0"+
    "\3\66\64\0\1\131\1\0\1\132\32\0\1\132\51\0"+
    "\1\133\116\0\1\134\24\0\1\135\51\0\1\136\46\0"+
    "\1\137\35\0\1\140\21\0\1\141\15\0\1\142\55\0"+
    "\1\143\54\0\1\144\21\0\1\145\46\0\1\146\6\0"+
    "\1\147\4\0\1\150\1\151\35\0\1\152\21\0\1\153"+
    "\16\0\1\154\56\0\1\155\14\0\1\156\1\0\1\157"+
    "\4\0\1\160\51\0\1\161\5\0\1\162\10\0\1\163"+
    "\34\0\1\164\35\0\1\165\10\0\1\166\47\0\1\167"+
    "\23\0\1\170\1\171\51\0\1\172\121\0\1\173\27\0"+
    "\1\174\21\0\1\175\74\0\1\176\115\0\1\177\27\0"+
    "\1\200\45\0\1\201\75\0\1\202\4\0\1\203\57\0"+
    "\1\204\20\0\1\205\13\0\1\115\2\0\3\115\2\0"+
    "\2\115\20\0\3\115\3\0\4\115\3\0\5\115\2\0"+
    "\11\115\53\0\1\206\27\0\4\207\1\0\3\207\2\0"+
    "\2\207\20\0\3\207\3\0\4\207\3\0\5\207\2\0"+
    "\11\207\1\0\1\207\5\0\1\130\2\0\3\130\1\65"+
    "\1\66\2\210\20\0\3\130\3\0\4\130\3\0\5\130"+
    "\2\0\11\130\7\0\1\131\131\0\1\211\12\0\1\212"+
    "\66\0\1\213\76\0\1\214\7\0\1\215\25\0\1\216"+
    "\32\0\1\217\102\0\1\220\45\0\1\221\120\0\1\222"+
    "\121\0\1\223\2\0\1\224\16\0\1\225\4\0\1\226"+
    "\27\0\1\227\76\0\1\230\65\0\1\231\54\0\1\232"+
    "\150\0\1\233\43\0\1\234\77\0\1\235\101\0\1\236"+
    "\120\0\1\237\44\0\1\240\77\0\1\241\74\0\1\242"+
    "\46\0\1\243\123\0\1\244\122\0\1\245\75\0\1\246"+
    "\70\0\1\247\107\0\1\250\51\0\1\251\106\0\1\252"+
    "\103\0\1\253\22\0\1\254\124\0\1\255\114\0\1\256"+
    "\56\0\1\257\13\0\1\260\77\0\1\261\56\0\1\262"+
    "\76\0\1\263\5\0\1\264\10\0\1\265\72\0\1\266"+
    "\62\0\1\267\74\0\1\270\76\0\1\271\52\0\1\272"+
    "\64\0\1\130\1\0\1\132\3\130\1\65\1\66\2\210"+
    "\20\0\3\130\1\132\2\0\4\130\3\0\5\130\2\0"+
    "\11\130\67\0\1\273\75\0\1\274\51\0\1\275\4\0"+
    "\1\276\1\0\1\277\3\0\1\300\6\0\1\301\1\302"+
    "\4\0\1\303\61\0\1\304\36\0\1\305\152\0\1\306"+
    "\57\0\1\307\31\0\1\310\132\0\1\311\45\0\1\312"+
    "\117\0\1\313\74\0\1\314\114\0\1\315\76\0\1\316"+
    "\27\0\1\317\124\0\1\320\76\0\1\321\123\0\1\322"+
    "\71\0\1\223\53\0\1\323\14\0\1\324\73\0\1\325"+
    "\60\0\1\326\115\0\1\327\74\0\1\223\74\0\1\330"+
    "\61\0\1\331\52\0\1\332\125\0\1\333\70\0\1\334"+
    "\45\0\1\335\140\0\1\336\70\0\1\337\117\0\1\340"+
    "\63\0\1\341\6\0\1\342\25\0\1\343\124\0\1\344"+
    "\71\0\1\345\12\0\1\346\70\0\1\347\120\0\1\350"+
    "\71\0\1\351\76\0\1\352\71\0\1\353\101\0\1\354"+
    "\45\0\1\355\47\0\1\356\75\0\1\357\75\0\1\360"+
    "\141\0\1\361\36\0\1\362\136\0\1\363\102\0\1\364"+
    "\51\0\1\365\46\0\1\366\143\0\1\367\56\0\1\370"+
    "\130\0\1\371\43\0\1\372\104\0\1\373\36\0\1\374"+
    "\124\0\1\375\103\0\1\376\70\0\1\377\123\0\1\u0100"+
    "\24\0\1\u0101\143\0\1\u0102\52\0\1\u0103\45\0\1\u0104"+
    "\141\0\1\u0105\31\0\1\u0106\102\0\1\u0107\145\0\1\u0108"+
    "\25\0\1\u0109\142\0\1\u010a\76\0\1\u010b\57\0\1\u010c"+
    "\70\0\1\u010d\120\0\1\u010e\27\0\1\u010f\136\0\1\u0110"+
    "\66\0\1\u0111\104\0\1\u0112\34\0\1\u0113\136\0\1\u0114"+
    "\55\0\1\u0115\114\0\1\u0116\107\0\1\u0117\46\0\1\u0118"+
    "\75\0\1\u0119\74\0\1\u011a\75\0\1\u011b\13\0\1\u011c"+
    "\61\0\1\u011d\125\0\1\u011e\44\0\1\u011f\125\0\1\u0120"+
    "\54\0\1\u0121\70\0\1\u0122\101\0\1\u0123\67\0\1\u0124"+
    "\115\0\1\u0125\102\0\1\u0126\27\0\1\u0127\136\0\1\u0128"+
    "\74\0\1\u0129\57\0\1\u012a\74\0\1\u012b\104\0\1\u012c"+
    "\103\0\1\u012d\62\0\1\u012e\113\0\1\u012f\110\0\1\u0130"+
    "\14\0\1\u0131\150\0\1\u0132\57\0\1\u0133\116\0\1\u0134"+
    "\62\0\1\u0135\75\0\1\u0136\112\0\1\u0137\72\0\1\u0138"+
    "\50\0\1\u0139\12\0\1\u013a\100\0\1\u013b\27\0\1\u013c"+
    "\140\0\1\u013d\106\0\1\u013e\47\0\1\u013f\126\0\1\u0140"+
    "\16\0\1\u0141\140\0\1\u0142\106\0\1\u0143\55\0\1\u0144"+
    "\122\0\1\u0145\42\0\1\u0146\77\0\1\u0147\52\0\1\u0148"+
    "\75\0\1\u0149\126\0\1\u014a\66\0\1\u014b\124\0\1\u014c"+
    "\74\0\1\u014d\25\0\1\u014e\143\0\1\u014f\27\0\1\u0150"+
    "\75\0\1\u0151\120\0\1\u0152\75\0\1\u0153\120\0\1\u0154"+
    "\101\0\1\u0155\77\0\1\u0156\51\0\1\u0157\45\0\1\u0158"+
    "\124\0\1\u0159\104\0\1\u015a\100\0\1\u015b\57\0\1\u015c"+
    "\74\0\1\u015d\76\0\1\u015e\101\0\1\u015f\106\0\1\u0160"+
    "\56\0\1\u0161\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15748];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\10\1\1\11\2\1\13\11\3\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\2\11\2\1\4\11"+
    "\2\1\2\11\1\1\1\11\1\0\1\1\1\0\24\1"+
    "\1\0\1\11\1\1\6\11\1\0\1\11\1\1\1\11"+
    "\2\1\5\0\1\1\10\0\1\11\1\1\4\0\1\11"+
    "\27\0\2\11\1\1\6\0\1\11\4\0\1\11\3\0"+
    "\1\11\5\0\1\11\4\0\1\11\5\0\1\1\2\0"+
    "\1\11\27\0\2\11\1\0\2\11\1\0\1\11\1\0"+
    "\1\11\2\0\1\11\1\0\1\11\6\0\1\11\7\0"+
    "\1\1\1\0\1\1\3\0\1\11\5\0\2\11\3\0"+
    "\1\11\7\0\1\11\6\0\2\11\2\0\2\11\2\0"+
    "\2\11\1\0\1\11\1\0\1\11\7\0\1\11\1\0"+
    "\1\11\6\0\1\11\3\0\2\11\13\0\1\11\1\0"+
    "\2\11\4\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\2\11\3\0\1\11\1\0\1\1\2\11\2\0\2\11"+
    "\1\0\1\11\1\0\3\11\1\0\2\11\1\0\2\11"+
    "\4\0\4\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[353];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	private StringBuilder string = new StringBuilder();
	private StringBuilder identifier = new StringBuilder();

    /** Identifier for the tokens' origin. */
  	private String originId;
  
  	/** {@inheritDoc} */
  	@Override  
  	public void reset(java.io.Reader reader, String originId) {
    	this.originId = originId;
    	yyreset(reader);
  	}
  
  	/** {@inheritDoc} */
  	@Override
  	public void close() throws java.io.IOException {
    	yyclose();
  	}
  
	/** Factory method for tokens. */  
	private MagikToken token (ETokenType type, int offset, int lineNumber, String text) {
		return new MagikToken (type, offset, lineNumber, text, originId);
	}
	
	/** Factory method for tokens. */  
	private MagikToken token (ETokenType type) {
		return token (type, yychar, yyline, yytext());
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MagikScanner(java.io.Reader in, String originId) {
  	this.originId = originId;
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  MagikScanner(java.io.InputStream in, String originId) {
    this(new java.io.InputStreamReader(in), originId);
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2626) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public MagikToken getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 18: 
          { return token(ETokenType.SEMICOLON);
          }
        case 119: break;
        case 14: 
          { return token(ETokenType.RBRACK);
          }
        case 120: break;
        case 88: 
          { return token(ETokenType.ENDTRY);
          }
        case 121: break;
        case 41: 
          { return token(ETokenType.CHARACTER_LITERAL);
          }
        case 122: break;
        case 90: 
          { return token(ETokenType.IMPORT);
          }
        case 123: break;
        case 38: 
          { yybegin(YYINITIAL); identifier.append(yytext()); 
								return token(ETokenType.IDENTIFIER, yychar-identifier.length()+1, yyline, identifier.toString());
          }
        case 124: break;
        case 62: 
          { return token(ETokenType.XOR);
          }
        case 125: break;
        case 109: 
          { return token(ETokenType.CONSTANT);
          }
        case 126: break;
        case 23: 
          { return token(ETokenType.MULT);
          }
        case 127: break;
        case 66: 
          { return token(ETokenType.OVER);
          }
        case 128: break;
        case 73: 
          { return token(ETokenType.LOCK);
          }
        case 129: break;
        case 118: 
          { return token(ETokenType.PROTECTED);
          }
        case 130: break;
        case 84: 
          { return token(ETokenType.LEAVE);
          }
        case 131: break;
        case 64: 
          { return token(ETokenType.ELSE);
          }
        case 132: break;
        case 78: 
          { return token(ETokenType.THROW);
          }
        case 133: break;
        case 29: 
          { yybegin(DOUBLE_QUOTE_STRING); string.setLength(0); string.append(yytext());
          }
        case 134: break;
        case 10: 
          { yyline -= 1;
          }
        case 135: break;
        case 16: 
          { return token(ETokenType.RBRACE);
          }
        case 136: break;
        case 106: 
          { return token(ETokenType.END_BLOCK);
          }
        case 137: break;
        case 98: 
          { return token(ETokenType.DYNAMIC);
          }
        case 138: break;
        case 116: 
          { return token(ETokenType.THIS_THREAD);
          }
        case 139: break;
        case 35: 
          { yybegin(YYINITIAL); identifier.append(yytext()); 
								return token(ETokenType.IDENTIFIER, yychar-identifier.length()+yytext().length(), yyline, identifier.toString());
          }
        case 140: break;
        case 46: 
          { return token(ETokenType.GTEQ);
          }
        case 141: break;
        case 107: 
          { return token(ETokenType.OPTIONAL);
          }
        case 142: break;
        case 13: 
          { return token(ETokenType.LBRACK);
          }
        case 143: break;
        case 72: 
          { return token(ETokenType.LOOP);
          }
        case 144: break;
        case 89: 
          { return token(ETokenType.NO_WAY);
          }
        case 145: break;
        case 67: 
          { return token(ETokenType.BOOLEAN_LITERAL);
          }
        case 146: break;
        case 103: 
          { return token(ETokenType.PRIVATE);
          }
        case 147: break;
        case 102: 
          { return token(ETokenType.PROTECT);
          }
        case 148: break;
        case 99: 
          { return token(ETokenType.FINALLY);
          }
        case 149: break;
        case 34: 
          { yybegin(YYINITIAL); string.append(yytext()); 
                                   return token(ETokenType.STRING_LITERAL, yychar-string.length()+1, yyline, string.toString());
          }
        case 150: break;
        case 104: 
          { return token(ETokenType.PACKAGE);
          }
        case 151: break;
        case 65: 
          { return token(ETokenType.ORIF);
          }
        case 152: break;
        case 77: 
          { return token(ETokenType.END_IF);
          }
        case 153: break;
        case 3: 
          { return token(ETokenType.IDENTIFIER);
          }
        case 154: break;
        case 114: 
          { return token(ETokenType.ENDMETHOD);
          }
        case 155: break;
        case 87: 
          { return token(ETokenType.RETURN);
          }
        case 156: break;
        case 75: 
          { return token(ETokenType.WITH);
          }
        case 157: break;
        case 70: 
          { return token(ETokenType.IS_NOT);
          }
        case 158: break;
        case 27: 
          { return token(ETokenType.GT);
          }
        case 159: break;
        case 94: 
          { return token(ETokenType.GLOBAL);
          }
        case 160: break;
        case 1: 
          { return token(ETokenType.ILLEGAL_CHARACTER);
          }
        case 161: break;
        case 20: 
          { return token(ETokenType.AT_OPERATOR);
          }
        case 162: break;
        case 115: 
          { return token(ETokenType.END_PROTECT);
          }
        case 163: break;
        case 100: 
          { return token(ETokenType.SCATTER);
          }
        case 164: break;
        case 108: 
          { return token(ETokenType.CONTINUE);
          }
        case 165: break;
        case 32: 
          { yybegin(YYINITIAL);
                                   return token(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length(), yyline, string.toString());
          }
        case 166: break;
        case 26: 
          { return token(ETokenType.EQ);
          }
        case 167: break;
        case 15: 
          { return token(ETokenType.LBRACE);
          }
        case 168: break;
        case 95: 
          { return token(ETokenType.ENDLOOP);
          }
        case 169: break;
        case 43: 
          { return token(ETokenType.EXPONENTIATION);
          }
        case 170: break;
        case 60: 
          { return token(ETokenType.FOR);
          }
        case 171: break;
        case 52: 
          { return token(ETokenType.IS);
          }
        case 172: break;
        case 71: 
          { return token(ETokenType.SELF);
          }
        case 173: break;
        case 105: 
          { return token(ETokenType.ENDCATCH);
          }
        case 174: break;
        case 85: 
          { return token(ETokenType.LOCAL);
          }
        case 175: break;
        case 30: 
          { yybegin(IDENTIFIER_ESCAPE); identifier.setLength(0); identifier.append(yytext());
          }
        case 176: break;
        case 117: 
          { return token(ETokenType.ALL);
          }
        case 177: break;
        case 22: 
          { return token(ETokenType.PLUS);
          }
        case 178: break;
        case 68: 
          { return token(ETokenType.THEN);
          }
        case 179: break;
        case 25: 
          { return token(ETokenType.LT);
          }
        case 180: break;
        case 31: 
          { string.append(yytext());
          }
        case 181: break;
        case 58: 
          { return token(ETokenType.DIVIDE);
          }
        case 182: break;
        case 4: 
          { return token(ETokenType.INTEGER_LITERAL);
          }
        case 183: break;
        case 110: 
          { return token(ETokenType.ABSTRACT);
          }
        case 184: break;
        case 82: 
          { return token(ETokenType.ANDIF);
          }
        case 185: break;
        case 113: 
          { return token(ETokenType.RECURSIVE);
          }
        case 186: break;
        case 24: 
          { return token(ETokenType.DIV);
          }
        case 187: break;
        case 111: 
          { return token(ETokenType.LOOP_BODY);
          }
        case 188: break;
        case 59: 
          { return token(ETokenType.MOD);
          }
        case 189: break;
        case 12: 
          { return token(ETokenType.RPAREN);
          }
        case 190: break;
        case 7: 
          { yybegin(SINGLE_QUOTE_STRING); string.setLength(0); string.append(yytext());
          }
        case 191: break;
        case 36: 
          { yybegin(IDENTIFIER_ESCAPE); identifier.append(yytext());
          }
        case 192: break;
        case 81: 
          { return token(ETokenType.SUPER);
          }
        case 193: break;
        case 97: 
          { return token(ETokenType.END_PROC);
          }
        case 194: break;
        case 86: 
          { return token(ETokenType.UNSET);
          }
        case 195: break;
        case 5: 
          { return token(ETokenType.MINUS);
          }
        case 196: break;
        case 50: 
          { return token(ETokenType.OR);
          }
        case 197: break;
        case 101: 
          { return token(ETokenType.LOCKING);
          }
        case 198: break;
        case 57: 
          { return token(ETokenType.TRY);
          }
        case 199: break;
        case 91: 
          { return token(ETokenType.METHOD);
          }
        case 200: break;
        case 83: 
          { return token(ETokenType.BLOCK);
          }
        case 201: break;
        case 42: 
          { return token(ETokenType.NEQ);
          }
        case 202: break;
        case 33: 
          { yybegin(YYINITIAL); string.append(yytext());
                                   return token(ETokenType.STRING_LITERAL, yychar-string.length()+1, yyline, string.toString());
          }
        case 203: break;
        case 8: 
          { return token(ETokenType.END_OF_LINE_COMMENT);
          }
        case 204: break;
        case 74: 
          { return token(ETokenType.PROC);
          }
        case 205: break;
        case 19: 
          { return token(ETokenType.COLON);
          }
        case 206: break;
        case 44: 
          { return token(ETokenType.ASSIGN);
          }
        case 207: break;
        case 54: 
          { return token(ETokenType.BOOT_ASSIGN);
          }
        case 208: break;
        case 6: 
          { return token(ETokenType.DOT);
          }
        case 209: break;
        case 53: 
          { return token(ETokenType.COMP);
          }
        case 210: break;
        case 11: 
          { return token(ETokenType.LPAREN);
          }
        case 211: break;
        case 61: 
          { return token(ETokenType.AND);
          }
        case 212: break;
        case 112: 
          { return token(ETokenType.HANDLE);
          }
        case 213: break;
        case 2: 
          { return token(ETokenType.EOL);
          }
        case 214: break;
        case 37: 
          { identifier.append(yytext());
          }
        case 215: break;
        case 48: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { identifier.append(yytext());
          }
        case 216: break;
        case 55: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { identifier.append(yytext());
          }
        case 217: break;
        case 28: 
          { return token(ETokenType.TERMINATE);
          }
        case 218: break;
        case 93: 
          { return token(ETokenType.GATHER);
          }
        case 219: break;
        case 49: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(IDENTIFIER); identifier.append(yytext());
          }
        case 220: break;
        case 47: 
          { return token(ETokenType.RESULT);
          }
        case 221: break;
        case 9: 
          { /* ignore */
          }
        case 222: break;
        case 51: 
          { return token(ETokenType.IF);
          }
        case 223: break;
        case 63: 
          { return token(ETokenType.ELIF);
          }
        case 224: break;
        case 21: 
          { return token(ETokenType.NOT);
          }
        case 225: break;
        case 79: 
          { return token(ETokenType.CATCH);
          }
        case 226: break;
        case 17: 
          { return token(ETokenType.COMMA);
          }
        case 227: break;
        case 80: 
          { return token(ETokenType.CLONE);
          }
        case 228: break;
        case 39: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { yybegin(IDENTIFIER); identifier.setLength(0); identifier.append(yytext());
          }
        case 229: break;
        case 40: 
          { return token(ETokenType.FLOATING_POINT_LITERAL);
          }
        case 230: break;
        case 76: 
          { return token(ETokenType.WHEN);
          }
        case 231: break;
        case 69: 
          { return token(ETokenType.ITERATE);
          }
        case 232: break;
        case 56: 
          { return token(ETokenType.NOT_KEYWORD);
          }
        case 233: break;
        case 96: 
          { return token(ETokenType.END_LOCK);
          }
        case 234: break;
        case 92: 
          { return token(ETokenType.PRAGMA);
          }
        case 235: break;
        case 45: 
          { return token(ETokenType.LTEQ);
          }
        case 236: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case SINGLE_QUOTE_STRING: {
              yybegin(YYINITIAL);
                                   return token(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length(), yyline, string.toString());
            }
            case 354: break;
            case IDENTIFIER_ESCAPE: {
              yybegin(YYINITIAL);
                                  return token(ETokenType.ILLEGAL_ESCAPE_SEQUENCE, yychar-identifier.length(), yyline, identifier.toString());
            }
            case 355: break;
            case DOUBLE_QUOTE_STRING: {
              yybegin(YYINITIAL);
                                   return token(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length(), yyline, string.toString());
            }
            case 356: break;
            default:
              {
                return token(ETokenType.EOF);
              }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
