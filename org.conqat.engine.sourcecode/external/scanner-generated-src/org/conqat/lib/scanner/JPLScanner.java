/* The following code was generated by JFlex 1.4.2 on {{TIMESTAMP}} */

package org.conqat.lib.scanner;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on {{TIMESTAMP}} from the specification file
 * <tt>/home/freakout/cqse/repositories/conqat/trunk/lib/org.conqat.lib.scanner/grammars/jpl.flex</tt>
 */
class JPLScanner implements ILenientScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int DOUBLESTRING = 4;
  public static final int SINGLESTRING = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\4\1\1\22\0\1\3\1\64\1\77"+
    "\1\7\1\12\1\76\1\66\1\100\1\51\1\52\1\6\1\47\1\60"+
    "\1\13\1\14\1\5\1\15\1\24\2\20\4\21\2\11\1\46\1\57"+
    "\1\63\1\50\1\62\1\0\1\10\1\17\1\43\1\17\1\42\2\17"+
    "\6\12\1\44\5\12\1\45\4\12\1\16\2\12\1\55\1\101\1\56"+
    "\1\61\1\22\1\0\1\26\1\23\1\25\1\70\1\30\1\32\1\73"+
    "\1\41\1\35\2\12\1\27\1\75\1\72\1\33\1\36\1\12\1\34"+
    "\1\31\1\71\1\74\1\37\1\40\1\16\2\12\1\53\1\67\1\54"+
    "\1\65\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\7\1\11\1\10\10\7\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\1\1\37\2\40\1\41\1\1\1\37"+
    "\1\42\1\0\1\6\1\43\3\7\1\0\1\10\1\0"+
    "\1\10\1\0\3\7\1\44\4\7\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\0\1\34\2\55"+
    "\1\56\2\37\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\0\3\7\1\70\3\10\2\7"+
    "\1\71\4\7\1\34\1\37\1\72\1\7\1\73\1\7"+
    "\1\10\1\74\1\75\1\76\1\77\1\7\1\100\1\7"+
    "\1\101\1\10\1\102\1\7\1\10\1\103\34\10";

  private static int [] zzUnpackAction() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u0108\0\u0108"+
    "\0\u018c\0\u0108\0\u01ce\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318"+
    "\0\u035a\0\u039c\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528"+
    "\0\u056a\0\u02d6\0\u05ac\0\u0108\0\u0108\0\u0108\0\u0108\0\u0108"+
    "\0\u0108\0\u0108\0\u0108\0\u0108\0\u05ee\0\u0630\0\u0672\0\u0108"+
    "\0\u06b4\0\u06f6\0\u0738\0\u0108\0\u0108\0\u077a\0\u07bc\0\u07fe"+
    "\0\u0108\0\u0108\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948\0\u0948"+
    "\0\u098a\0\u09cc\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16\0\u0b58"+
    "\0\u0b9a\0\u0bdc\0\u0c1e\0\u0294\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26"+
    "\0\u0108\0\u0108\0\u0108\0\u0108\0\u0108\0\u0108\0\u0108\0\u0108"+
    "\0\u0d68\0\u0daa\0\u0dec\0\u0108\0\u0108\0\u0e2e\0\u0e70\0\u0108"+
    "\0\u0108\0\u0108\0\u0108\0\u0108\0\u0108\0\u0108\0\u0108\0\u0108"+
    "\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u0a50\0\u0ad4\0\u0b58\0\u0fba"+
    "\0\u0ffc\0\u103e\0\u0294\0\u1080\0\u10c2\0\u1104\0\u1146\0\u0d68"+
    "\0\u0108\0\u0108\0\u1188\0\u0294\0\u11ca\0\u120c\0\u0294\0\u0294"+
    "\0\u0294\0\u0294\0\u124e\0\u0294\0\u1290\0\u0294\0\u12d2\0\u0294"+
    "\0\u1314\0\u1356\0\u0294\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0"+
    "\0\u14e2\0\u1524\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0"+
    "\0\u16f2\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0"+
    "\0\u1902\0\u1944\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u0108";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\2\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\16\1\20\2\16\2\15\2\16"+
    "\1\15\1\21\2\16\1\22\1\16\1\23\2\16\1\24"+
    "\1\25\1\26\1\27\1\16\1\30\3\16\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\6\16\1\53\1\54\1\55\1\56\102\5\1\57\1\60"+
    "\1\61\74\57\1\62\1\57\1\63\1\64\1\60\1\61"+
    "\75\64\1\62\1\63\104\0\1\7\104\0\1\65\1\66"+
    "\73\0\1\67\2\0\4\67\1\70\72\67\11\0\2\16"+
    "\1\0\13\16\1\71\1\16\1\72\14\16\22\0\1\73"+
    "\5\16\15\0\1\15\2\0\1\74\1\15\2\0\2\15"+
    "\2\0\1\15\66\0\2\16\1\0\32\16\22\0\6\16"+
    "\15\0\1\15\3\0\1\15\2\0\2\15\2\0\1\15"+
    "\66\0\1\15\2\0\1\74\1\75\1\76\1\0\2\75"+
    "\1\77\1\100\1\75\16\0\1\100\47\0\2\16\1\0"+
    "\12\16\1\101\17\16\22\0\6\16\15\0\2\16\1\0"+
    "\13\16\1\102\16\16\22\0\6\16\15\0\2\16\1\0"+
    "\17\16\1\103\12\16\22\0\6\16\15\0\2\16\1\0"+
    "\16\16\1\104\13\16\22\0\6\16\15\0\2\16\1\0"+
    "\20\16\1\105\11\16\22\0\6\16\15\0\2\16\1\0"+
    "\12\16\1\106\17\16\22\0\6\16\15\0\2\16\1\0"+
    "\25\16\1\107\4\16\22\0\6\16\15\0\2\16\1\0"+
    "\27\16\1\110\2\16\22\0\6\16\53\0\1\111\1\112"+
    "\101\0\1\113\101\0\1\114\101\0\1\115\101\0\1\116"+
    "\117\0\1\117\102\0\1\120\26\0\1\121\53\0\2\122"+
    "\11\0\1\123\1\124\77\0\1\57\2\0\74\57\1\0"+
    "\1\57\3\0\1\61\77\0\2\125\1\0\12\125\1\126"+
    "\2\125\1\126\2\127\1\130\1\126\5\125\1\131\1\125"+
    "\1\132\11\125\1\133\22\125\1\134\1\135\4\125\1\136"+
    "\1\137\1\140\1\64\2\0\75\64\2\0\1\65\2\0"+
    "\77\65\6\66\1\141\73\66\1\67\2\0\77\67\11\0"+
    "\2\16\1\0\14\16\1\142\15\16\22\0\6\16\15\0"+
    "\2\16\1\0\32\16\22\0\4\16\1\143\1\16\15\0"+
    "\2\16\1\0\12\16\1\144\17\16\22\0\6\16\15\0"+
    "\1\145\3\0\1\145\2\0\2\145\2\0\1\145\66\0"+
    "\1\15\2\0\1\74\1\75\2\0\2\75\1\77\1\0"+
    "\1\75\66\0\1\146\3\0\1\146\1\0\10\146\1\0"+
    "\1\146\1\0\1\146\7\0\2\146\24\0\1\146\26\0"+
    "\1\77\2\0\3\77\1\0\1\77\72\0\1\147\4\0"+
    "\1\150\1\0\1\150\66\0\2\16\1\0\13\16\1\151"+
    "\16\16\22\0\6\16\15\0\2\16\1\0\15\16\1\152"+
    "\14\16\22\0\6\16\15\0\2\16\1\0\20\16\1\153"+
    "\11\16\22\0\6\16\15\0\2\16\1\0\17\16\1\154"+
    "\12\16\22\0\6\16\15\0\2\16\1\0\20\16\1\155"+
    "\11\16\22\0\6\16\15\0\2\16\1\0\21\16\1\156"+
    "\10\16\22\0\6\16\15\0\2\16\1\0\30\16\1\157"+
    "\1\16\22\0\6\16\74\0\1\160\25\0\1\121\53\0"+
    "\1\122\13\0\1\124\114\0\1\127\2\0\3\127\1\0"+
    "\1\127\72\0\1\161\2\0\3\161\1\0\1\161\55\0"+
    "\5\66\1\162\1\141\73\66\11\0\2\16\1\0\32\16"+
    "\22\0\2\16\1\163\3\16\15\0\2\16\1\0\32\16"+
    "\22\0\5\16\1\164\15\0\2\16\1\0\32\16\22\0"+
    "\1\16\1\165\4\16\21\0\1\166\4\0\1\166\1\0"+
    "\1\166\66\0\2\16\1\0\13\16\1\167\16\16\22\0"+
    "\6\16\15\0\2\16\1\0\14\16\1\170\15\16\22\0"+
    "\6\16\15\0\2\16\1\0\11\16\1\171\20\16\22\0"+
    "\6\16\15\0\2\16\1\0\15\16\1\172\14\16\22\0"+
    "\6\16\15\0\2\16\1\0\13\16\1\173\16\16\22\0"+
    "\6\16\15\0\2\16\1\0\31\16\1\174\22\0\6\16"+
    "\15\0\2\16\1\0\32\16\22\0\3\16\1\175\2\16"+
    "\15\0\2\16\1\0\14\16\1\176\15\16\22\0\6\16"+
    "\21\0\1\177\4\0\1\177\1\0\1\177\66\0\2\16"+
    "\1\0\14\16\1\200\15\16\22\0\6\16\15\0\2\16"+
    "\1\0\32\16\22\0\1\16\1\201\4\16\21\0\1\202"+
    "\4\0\1\202\1\0\1\202\66\0\2\16\1\0\25\16"+
    "\1\203\4\16\22\0\6\16\21\0\1\204\4\0\1\204"+
    "\1\0\1\204\72\0\1\205\4\0\1\205\1\0\1\205"+
    "\72\0\1\206\4\0\1\206\1\0\1\206\72\0\1\207"+
    "\4\0\1\207\1\0\1\207\72\0\1\210\4\0\1\210"+
    "\1\0\1\210\72\0\1\211\4\0\1\211\1\0\1\211"+
    "\72\0\1\212\4\0\1\212\1\0\1\212\72\0\1\213"+
    "\4\0\1\213\1\0\1\213\72\0\1\214\4\0\1\214"+
    "\1\0\1\214\72\0\1\215\4\0\1\215\1\0\1\215"+
    "\72\0\1\216\4\0\1\216\1\0\1\216\72\0\1\217"+
    "\4\0\1\217\1\0\1\217\72\0\1\220\4\0\1\220"+
    "\1\0\1\220\72\0\1\221\4\0\1\221\1\0\1\221"+
    "\72\0\1\222\4\0\1\222\1\0\1\222\72\0\1\223"+
    "\4\0\1\223\1\0\1\223\72\0\1\224\4\0\1\224"+
    "\1\0\1\224\72\0\1\225\4\0\1\225\1\0\1\225"+
    "\72\0\1\226\4\0\1\226\1\0\1\226\72\0\1\227"+
    "\4\0\1\227\1\0\1\227\72\0\1\230\4\0\1\230"+
    "\1\0\1\230\72\0\1\231\4\0\1\231\1\0\1\231"+
    "\72\0\1\232\4\0\1\232\1\0\1\232\72\0\1\233"+
    "\4\0\1\233\1\0\1\233\72\0\1\234\4\0\1\234"+
    "\1\0\1\234\72\0\1\235\4\0\1\235\1\0\1\235"+
    "\72\0\1\236\4\0\1\236\1\0\1\236\72\0\1\237"+
    "\4\0\1\237\1\0\1\237\55\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6798];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\2\11\1\1\1\11\21\1\11\11"+
    "\3\1\1\11\3\1\2\11\3\1\2\11\3\1\1\0"+
    "\5\1\1\0\1\1\1\0\1\1\1\0\10\1\10\11"+
    "\1\0\2\1\2\11\2\1\11\11\1\0\17\1\2\11"+
    "\54\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  private StringBuffer string = new StringBuffer();

  private String originId;
  
  /** 
   * Resets scanner.
   */    
  public void reset(java.io.Reader reader, String originId) {
    this.originId = originId;
    yyreset(reader);
  } 
  
  /**
   * {@inheritDoc}
   */
  public void close() throws java.io.IOException {
    yyclose();
  }
  
  /** Factory method for tokens. */  
  private JPLToken token (ETokenType type) {
	return new JPLToken(type, yychar, yyline, yytext(), originId);
  }
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  JPLScanner(java.io.Reader in, String originId) {
  	this.originId = originId;
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  JPLScanner(java.io.InputStream in, String originId) {
    this(new java.io.InputStreamReader(in), originId);
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public JPLToken getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 39: 
          { return token(ETokenType.EQEQ);
          }
        case 68: break;
        case 2: 
          { /* ignore */
          }
        case 69: break;
        case 48: 
          { string.append( "\\f" );
          }
        case 70: break;
        case 37: 
          { return token(ETokenType.COLON_PLUS);
          }
        case 71: break;
        case 62: 
          { return token(ETokenType.PROC);
          }
        case 72: break;
        case 17: 
          { return token(ETokenType.LBRACK);
          }
        case 73: break;
        case 22: 
          { return token(ETokenType.GT);
          }
        case 74: break;
        case 29: 
          { yybegin(DOUBLESTRING); string.setLength(0); string.append(yytext());
          }
        case 75: break;
        case 47: 
          { string.append( "\\b" );
          }
        case 76: break;
        case 34: 
          { return token(ETokenType.END_OF_LINE_COMMENT);
          }
        case 77: break;
        case 40: 
          { return token(ETokenType.GTEQ);
          }
        case 78: break;
        case 23: 
          { return token(ETokenType.LT);
          }
        case 79: break;
        case 13: 
          { return token(ETokenType.LPAREN);
          }
        case 80: break;
        case 30: 
          { yybegin(SINGLESTRING); string.setLength(0); string.append(yytext());
          }
        case 81: break;
        case 46: 
          { return token(ETokenType.ILLEGAL_ESCAPE_SEQUENCE);
          }
        case 82: break;
        case 33: 
          { yybegin(YYINITIAL); string.append(yytext());
                                   return new JPLToken(ETokenType.STRING_LITERAL, yychar-string.length()+1, yyline, string.toString(), originId);
          }
        case 83: break;
        case 59: 
          { return token(ETokenType.AT_SUM);
          }
        case 84: break;
        case 51: 
          { string.append( "\\t" );
          }
        case 85: break;
        case 35: 
          { return token(ETokenType.CONCATENATION);
          }
        case 86: break;
        case 63: 
          { return token(ETokenType.VARS);
          }
        case 87: break;
        case 7: 
          { return token(ETokenType.IDENTIFIER);
          }
        case 88: break;
        case 10: 
          { return token(ETokenType.COLON);
          }
        case 89: break;
        case 16: 
          { return token(ETokenType.RBRACE);
          }
        case 90: break;
        case 50: 
          { string.append( "\\:");
          }
        case 91: break;
        case 66: 
          { return token(ETokenType.WHILE);
          }
        case 92: break;
        case 11: 
          { return token(ETokenType.PLUS);
          }
        case 93: break;
        case 56: 
          { return token(ETokenType.FLOATING_POINT_LITERAL);
          }
        case 94: break;
        case 43: 
          { return token(ETokenType.ANDAND);
          }
        case 95: break;
        case 32: 
          { yybegin(YYINITIAL);
                                   return new JPLToken(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()+1, yyline, string.toString(), originId);
          }
        case 96: break;
        case 67: 
          { return token(ETokenType.AT_LENGTH);
          }
        case 97: break;
        case 58: 
          { return token(ETokenType.TRADITIONAL_COMMENT);
          }
        case 98: break;
        case 24: 
          { return token(ETokenType.NOT);
          }
        case 99: break;
        case 26: 
          { return token(ETokenType.AND);
          }
        case 100: break;
        case 61: 
          { return token(ETokenType.ELSE);
          }
        case 101: break;
        case 4: 
          { return token(ETokenType.DIV);
          }
        case 102: break;
        case 54: 
          { string.append( "\\'");
          }
        case 103: break;
        case 5: 
          { return token(ETokenType.MULT);
          }
        case 104: break;
        case 9: 
          { return token(ETokenType.MINUS);
          }
        case 105: break;
        case 28: 
          { return token(ETokenType.FORMAT);
          }
        case 106: break;
        case 36: 
          { return token(ETokenType.IF);
          }
        case 107: break;
        case 18: 
          { return token(ETokenType.RBRACK);
          }
        case 108: break;
        case 64: 
          { return token(ETokenType.DBMS);
          }
        case 109: break;
        case 42: 
          { return token(ETokenType.NOTEQ);
          }
        case 110: break;
        case 1: 
          { return token(ETokenType.ILLEGAL_CHARACTER);
          }
        case 111: break;
        case 19: 
          { return token(ETokenType.SEMICOLON);
          }
        case 112: break;
        case 27: 
          { return token(ETokenType.OR);
          }
        case 113: break;
        case 12: 
          { return token(ETokenType.EQ);
          }
        case 114: break;
        case 14: 
          { return token(ETokenType.RPAREN);
          }
        case 115: break;
        case 20: 
          { return token(ETokenType.COMMA);
          }
        case 116: break;
        case 65: 
          { return token(ETokenType.AT_DATE);
          }
        case 117: break;
        case 41: 
          { return token(ETokenType.LTEQ);
          }
        case 118: break;
        case 60: 
          { return token(ETokenType.CALL);
          }
        case 119: break;
        case 38: 
          { return token(ETokenType.COLON_EQ);
          }
        case 120: break;
        case 6: 
          { return token(ETokenType.HASH_COMMENT);
          }
        case 121: break;
        case 49: 
          { string.append( "\\r" );
          }
        case 122: break;
        case 15: 
          { return token(ETokenType.LBRACE);
          }
        case 123: break;
        case 53: 
          { string.append( "\\\"" );
          }
        case 124: break;
        case 44: 
          { return token(ETokenType.OROR);
          }
        case 125: break;
        case 57: 
          { return token(ETokenType.FOR);
          }
        case 126: break;
        case 45: 
          { /* Ignore this */
          }
        case 127: break;
        case 52: 
          { string.append( "\\n" );
          }
        case 128: break;
        case 25: 
          { return token(ETokenType.COMP);
          }
        case 129: break;
        case 31: 
          { string.append( yytext() );
          }
        case 130: break;
        case 3: 
          { yyline -= 1;
          }
        case 131: break;
        case 8: 
          { return token(ETokenType.INTEGER_LITERAL);
          }
        case 132: break;
        case 21: 
          { return token(ETokenType.XOR);
          }
        case 133: break;
        case 55: 
          { string.append( "\\\\" );
          }
        case 134: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case DOUBLESTRING: {
              yybegin(YYINITIAL);
                                   return new JPLToken(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()+1, yyline, string.toString(), originId);
            }
            case 160: break;
            case SINGLESTRING: {
              yybegin(YYINITIAL);
                                   return new JPLToken(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()+1, yyline, string.toString(), originId);
            }
            case 161: break;
            default:
              {
                return token(ETokenType.EOF);
              }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
