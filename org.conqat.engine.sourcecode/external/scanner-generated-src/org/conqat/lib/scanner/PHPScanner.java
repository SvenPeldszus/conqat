/* The following code was generated by JFlex 1.4.2 on {{TIMESTAMP}} */

/* This grammar is based on the book O'Reilly Book "Programming PHP" and http://www.php.net/manual/en/langref.php 
 *
 * Notes: In this grammar the term heredoc refers to heredoc as well as nowdoc blocks.
 */

package org.conqat.lib.scanner;
import org.conqat.lib.commons.string.StringUtils;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on {{TIMESTAMP}} from the specification file
 * <tt>/home/freakout/cqse/repositories/conqat/trunk/lib/org.conqat.lib.scanner/grammars/php.flex</tt>
 */
class PHPScanner extends QueuedScannerBase<PHPToken> {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int DOUBLEQUOTEDSTRING = 6;
  public static final int YYINITIAL = 0;
  public static final int BACKTICKSTRING = 8;
  public static final int HEREDOC = 10;
  public static final int PHP = 2;
  public static final int SINGLEQUOTEDSTRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\11\1\3\1\2\1\0\1\4\1\1\16\11\4\0\1\3\1\74"+
    "\1\102\1\7\1\23\1\72\1\75\1\103\1\60\1\61\1\6\1\22"+
    "\1\67\1\70\1\20\1\5\1\12\3\16\4\17\2\13\1\71\1\66"+
    "\1\27\1\73\1\33\1\30\1\101\1\37\1\40\1\42\1\44\1\21"+
    "\1\15\1\53\1\32\1\35\1\25\1\45\1\46\1\54\1\43\1\47"+
    "\1\31\1\57\1\41\1\36\1\34\1\50\1\56\1\51\1\14\1\52"+
    "\1\25\1\64\1\105\1\65\1\77\1\55\1\104\1\37\1\40\1\42"+
    "\1\44\1\21\1\15\1\53\1\32\1\35\1\25\1\45\1\46\1\54"+
    "\1\43\1\47\1\31\1\57\1\41\1\36\1\34\1\50\1\56\1\51"+
    "\1\14\1\52\1\25\1\62\1\76\1\63\1\100\41\26\2\24\4\25"+
    "\4\24\1\25\2\24\1\26\7\24\1\25\4\24\1\25\5\24\27\25"+
    "\1\24\37\25\1\24\10\25\u01c2\10\4\0\14\10\16\0\5\10\7\0"+
    "\1\10\1\0\1\10\21\0\160\11\5\10\1\0\2\10\2\0\4\10"+
    "\10\0\1\10\1\0\3\10\1\0\1\10\1\0\24\10\1\0\123\10"+
    "\1\0\213\10\1\0\5\11\2\0\236\10\11\0\46\10\2\0\1\10"+
    "\7\0\47\10\11\0\55\11\1\0\1\11\1\0\2\11\1\0\2\11"+
    "\1\0\1\11\10\0\33\10\5\0\3\10\15\0\4\11\7\0\1\10"+
    "\4\0\13\11\5\0\53\10\37\11\4\0\2\10\1\11\143\10\1\0"+
    "\1\10\10\11\1\0\6\11\2\10\2\11\1\0\4\11\2\10\12\11"+
    "\3\10\2\0\1\10\17\0\1\11\1\10\1\11\36\10\33\11\2\0"+
    "\131\10\13\11\1\10\16\0\12\11\41\10\11\11\2\10\4\0\1\10"+
    "\5\0\26\10\4\11\1\10\11\11\1\10\3\11\1\10\5\11\22\0"+
    "\31\10\3\11\244\0\4\11\66\10\3\11\1\10\22\11\1\10\7\11"+
    "\12\10\2\11\2\0\12\11\1\0\7\10\1\0\7\10\1\0\3\11"+
    "\1\0\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0\1\10"+
    "\3\0\4\10\2\0\1\11\1\10\7\11\2\0\2\11\2\0\3\11"+
    "\1\10\10\0\1\11\4\0\2\10\1\0\3\10\2\11\2\0\12\11"+
    "\4\10\7\0\1\10\5\0\3\11\1\0\6\10\4\0\2\10\2\0"+
    "\26\10\1\0\7\10\1\0\2\10\1\0\2\10\1\0\2\10\2\0"+
    "\1\11\1\0\5\11\4\0\2\11\2\0\3\11\3\0\1\11\7\0"+
    "\4\10\1\0\1\10\7\0\14\11\3\10\1\11\13\0\3\11\1\0"+
    "\11\10\1\0\3\10\1\0\26\10\1\0\7\10\1\0\2\10\1\0"+
    "\5\10\2\0\1\11\1\10\10\11\1\0\3\11\1\0\3\11\2\0"+
    "\1\10\17\0\2\10\2\11\2\0\12\11\1\0\1\10\17\0\3\11"+
    "\1\0\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10"+
    "\1\0\5\10\2\0\1\11\1\10\7\11\2\0\2\11\2\0\3\11"+
    "\10\0\2\11\4\0\2\10\1\0\3\10\2\11\2\0\12\11\1\0"+
    "\1\10\20\0\1\11\1\10\1\0\6\10\3\0\3\10\1\0\4\10"+
    "\3\0\2\10\1\0\1\10\1\0\2\10\3\0\2\10\3\0\3\10"+
    "\3\0\14\10\4\0\5\11\3\0\3\11\1\0\4\11\2\0\1\10"+
    "\6\0\1\11\16\0\12\11\11\0\1\10\7\0\3\11\1\0\10\10"+
    "\1\0\3\10\1\0\27\10\1\0\12\10\1\0\5\10\3\0\1\10"+
    "\7\11\1\0\3\11\1\0\4\11\7\0\2\11\1\0\2\10\6\0"+
    "\2\10\2\11\2\0\12\11\22\0\2\11\1\0\10\10\1\0\3\10"+
    "\1\0\27\10\1\0\12\10\1\0\5\10\2\0\1\11\1\10\7\11"+
    "\1\0\3\11\1\0\4\11\7\0\2\11\7\0\1\10\1\0\2\10"+
    "\2\11\2\0\12\11\1\0\2\10\17\0\2\11\1\0\10\10\1\0"+
    "\3\10\1\0\51\10\2\0\1\10\7\11\1\0\3\11\1\0\4\11"+
    "\1\10\10\0\1\11\10\0\2\10\2\11\2\0\12\11\12\0\6\10"+
    "\2\0\2\11\1\0\22\10\3\0\30\10\1\0\11\10\1\0\1\10"+
    "\2\0\7\10\3\0\1\11\4\0\6\11\1\0\1\11\1\0\10\11"+
    "\22\0\2\11\15\0\60\10\1\11\2\10\7\11\4\0\10\10\10\11"+
    "\1\0\12\11\47\0\2\10\1\0\1\10\2\0\2\10\1\0\1\10"+
    "\2\0\1\10\6\0\4\10\1\0\7\10\1\0\3\10\1\0\1\10"+
    "\1\0\1\10\2\0\2\10\1\0\4\10\1\11\2\10\6\11\1\0"+
    "\2\11\1\10\2\0\5\10\1\0\1\10\1\0\6\11\2\0\12\11"+
    "\2\0\2\10\42\0\1\10\27\0\2\11\6\0\12\11\13\0\1\11"+
    "\1\0\1\11\1\0\1\11\4\0\2\11\10\10\1\0\44\10\4\0"+
    "\24\11\1\0\2\11\5\10\13\11\1\0\44\11\11\0\1\11\71\0"+
    "\53\10\24\11\1\10\12\11\6\0\6\10\4\11\4\10\3\11\1\10"+
    "\3\11\2\10\7\11\3\10\4\11\15\10\14\11\1\10\17\11\2\0"+
    "\46\10\12\0\53\10\1\0\1\10\3\0\u0149\10\1\0\4\10\2\0"+
    "\7\10\1\0\1\10\1\0\4\10\2\0\51\10\1\0\4\10\2\0"+
    "\41\10\1\0\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0"+
    "\17\10\1\0\71\10\1\0\4\10\2\0\103\10\2\0\3\11\40\0"+
    "\20\10\20\0\125\10\14\0\u026c\10\2\0\21\10\1\0\32\10\5\0"+
    "\113\10\3\0\3\10\17\0\15\10\1\0\4\10\3\11\13\0\22\10"+
    "\3\11\13\0\22\10\2\11\14\0\15\10\1\0\3\10\1\0\2\11"+
    "\14\0\64\10\40\11\3\0\1\10\3\0\2\10\1\11\2\0\12\11"+
    "\41\0\3\11\2\0\12\11\6\0\130\10\10\0\51\10\1\11\1\10"+
    "\5\0\106\10\12\0\35\10\3\0\14\11\4\0\14\11\12\0\12\11"+
    "\36\10\2\0\5\10\13\0\54\10\4\0\21\11\7\10\2\11\6\0"+
    "\12\11\46\0\27\10\5\11\4\0\65\10\12\11\1\0\35\11\2\0"+
    "\13\11\6\0\12\11\15\0\1\10\130\0\5\11\57\10\21\11\7\10"+
    "\4\0\12\11\21\0\11\11\14\0\3\11\36\10\12\11\3\0\2\10"+
    "\12\11\6\0\46\10\16\11\14\0\44\10\24\11\10\0\12\11\3\0"+
    "\3\10\12\11\44\10\122\0\3\11\1\0\25\11\4\10\1\11\4\10"+
    "\1\11\15\0\300\10\47\11\25\0\4\11\u0116\10\2\0\6\10\2\0"+
    "\46\10\2\0\6\10\2\0\10\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\37\10\2\0\65\10\1\0\7\10\1\0\1\10\3\0"+
    "\3\10\1\0\7\10\3\0\4\10\2\0\6\10\4\0\15\10\5\0"+
    "\3\10\1\0\7\10\16\0\5\11\32\0\5\11\20\0\2\10\23\0"+
    "\1\10\13\0\5\11\5\0\6\11\1\0\1\10\15\0\1\10\20\0"+
    "\15\10\3\0\32\10\26\0\15\11\4\0\1\11\3\0\14\11\21\0"+
    "\1\10\4\0\1\10\2\0\12\10\1\0\1\10\3\0\5\10\6\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\4\10\1\0\13\10\2\0"+
    "\4\10\5\0\5\10\4\0\1\10\21\0\51\10\u0a77\0\57\10\1\0"+
    "\57\10\1\0\205\10\6\0\4\10\3\11\16\0\46\10\12\0\66\10"+
    "\11\0\1\10\17\0\1\11\27\10\11\0\7\10\1\0\7\10\1\0"+
    "\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0"+
    "\7\10\1\0\40\11\57\0\1\10\u01d5\0\3\10\31\0\11\10\6\11"+
    "\1\0\5\10\2\0\5\10\4\0\126\10\2\0\2\11\2\0\3\10"+
    "\1\0\132\10\1\0\4\10\5\0\51\10\3\0\136\10\21\0\33\10"+
    "\65\0\20\10\u0200\0\u19b6\10\112\0\u51cc\10\64\0\u048d\10\103\0\56\10"+
    "\2\0\u010d\10\3\0\20\10\12\11\2\10\24\0\57\10\1\11\14\0"+
    "\2\11\1\0\31\10\10\0\120\10\2\11\45\0\11\10\2\0\147\10"+
    "\2\0\4\10\1\0\2\10\16\0\12\10\120\0\10\10\1\11\3\10"+
    "\1\11\4\10\1\11\27\10\5\11\20\0\1\10\7\0\64\10\14\0"+
    "\2\11\62\10\21\11\13\0\12\11\6\0\22\11\6\10\3\0\1\10"+
    "\4\0\12\11\34\10\10\11\2\0\27\10\15\11\14\0\35\10\3\0"+
    "\4\11\57\10\16\11\16\0\1\10\12\11\46\0\51\10\16\11\11\0"+
    "\3\10\1\11\10\10\2\11\2\0\12\11\6\0\27\10\3\0\1\10"+
    "\1\11\4\0\60\10\1\11\1\10\3\11\2\10\2\11\5\10\2\11"+
    "\1\10\1\11\1\10\30\0\3\10\43\0\6\10\2\0\6\10\2\0"+
    "\6\10\11\0\7\10\1\0\7\10\221\0\43\10\10\11\1\0\2\11"+
    "\2\0\12\11\6\0\u2ba4\10\14\0\27\10\4\0\61\10\u2104\0\u012e\10"+
    "\2\0\76\10\2\0\152\10\46\0\7\10\14\0\5\10\5\0\1\10"+
    "\1\11\12\10\1\0\15\10\1\0\5\10\1\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\154\10\41\0\u016b\10\22\0\100\10\2\0\66\10"+
    "\50\0\15\10\3\0\20\11\20\0\7\11\14\0\2\10\30\0\3\10"+
    "\31\0\1\10\6\0\5\10\1\0\207\10\2\0\1\11\4\0\1\10"+
    "\13\0\12\11\7\0\32\10\4\0\1\10\1\0\32\10\13\0\131\10"+
    "\3\0\6\10\2\0\6\10\2\0\6\10\2\0\3\10\3\0\2\10"+
    "\3\0\2\10\22\0\3\11\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\2\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\2\11\2\10\1\12\1\10\1\13\1\10\1\14"+
    "\1\15\1\10\1\16\17\10\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\3\44\1\45\1\2\2\44\1\46\3\44\1\47"+
    "\1\50\1\0\1\51\1\52\2\7\1\11\1\53\1\0"+
    "\2\11\1\53\1\0\11\10\1\54\1\55\4\10\1\56"+
    "\1\57\1\60\1\61\2\10\1\62\1\63\2\10\1\64"+
    "\4\10\1\65\13\10\1\66\1\35\6\10\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\57\1\75\1\76\2\77"+
    "\1\0\2\50\2\0\3\11\1\53\1\0\1\36\2\10"+
    "\1\100\6\10\1\0\6\10\1\101\7\10\1\34\11\10"+
    "\1\102\4\10\1\103\4\10\1\104\1\74\3\0\1\105"+
    "\2\11\4\10\1\106\5\10\1\107\1\10\2\0\6\10"+
    "\1\110\13\10\1\111\6\10\1\112\5\10\1\113\1\47"+
    "\1\0\2\11\1\114\4\10\1\115\4\10\1\116\2\117"+
    "\1\0\1\120\3\10\1\121\1\122\10\10\1\123\2\10"+
    "\1\124\1\10\1\125\1\126\1\10\1\127\3\10\1\130"+
    "\1\131\1\10\1\132\2\11\4\10\1\133\3\10\1\134"+
    "\1\0\2\10\1\135\5\10\1\136\1\137\1\10\1\140"+
    "\6\10\1\141\2\11\1\142\1\143\1\10\1\144\4\10"+
    "\2\145\1\146\4\10\1\147\2\10\1\150\3\10\1\151"+
    "\1\152\2\11\1\153\3\10\1\154\6\10\1\155\1\10"+
    "\1\156\1\157\1\10\2\11\1\10\1\160\1\10\1\161"+
    "\1\162\1\163\4\10\1\164\2\11\1\165\1\166\1\167"+
    "\1\10\1\170\1\10\1\11\2\10\1\11\1\171\1\172"+
    "\4\11";

  private static int [] zzUnpackAction() {
    int [] result = new int[413];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\u0230\0\u0230\0\u02bc\0\u0302\0\u0348\0\u038e"+
    "\0\u03d4\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be"+
    "\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee"+
    "\0\u0834\0\u087a\0\u08c0\0\u0906\0\u094c\0\u0992\0\u09d8\0\u0a1e"+
    "\0\u0a64\0\u0aaa\0\u0af0\0\u0230\0\u0230\0\u0230\0\u0230\0\u0230"+
    "\0\u0230\0\u0230\0\u0230\0\u0b36\0\u0b7c\0\u0bc2\0\u0c08\0\u0c4e"+
    "\0\u0c94\0\u0cda\0\u0230\0\u0230\0\u0230\0\u0230\0\u0230\0\u0230"+
    "\0\u0d20\0\u0d66\0\u0230\0\u0230\0\u0dac\0\u0df2\0\u0e38\0\u0230"+
    "\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc\0\u0230\0\u0230"+
    "\0\u1022\0\u0230\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6"+
    "\0\u120c\0\u1252\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6"+
    "\0\u143c\0\u1482\0\u0230\0\u0230\0\u14c8\0\u150e\0\u1554\0\u159a"+
    "\0\u15e0\0\u0230\0\u0230\0\u0230\0\u1626\0\u166c\0\u0230\0\u0230"+
    "\0\u16b2\0\u16f8\0\u038e\0\u173e\0\u1784\0\u17ca\0\u1810\0\u038e"+
    "\0\u1856\0\u189c\0\u18e2\0\u1928\0\u196e\0\u19b4\0\u19fa\0\u1a40"+
    "\0\u1a86\0\u1acc\0\u1b12\0\u038e\0\u038e\0\u1b58\0\u1b9e\0\u1be4"+
    "\0\u1c2a\0\u1c70\0\u1cb6\0\u0230\0\u0230\0\u0230\0\u0230\0\u0230"+
    "\0\u1cfc\0\u1d42\0\u0230\0\u0230\0\u1d88\0\u1dce\0\u1e14\0\u1e5a"+
    "\0\u0230\0\u1ea0\0\u1ee6\0\u10f4\0\u1f2c\0\u1f72\0\u1fb8\0\u1fb8"+
    "\0\u038e\0\u1ffe\0\u2044\0\u208a\0\u20d0\0\u2116\0\u215c\0\u21a2"+
    "\0\u21e8\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346\0\u238c\0\u23d2"+
    "\0\u2418\0\u038e\0\u245e\0\u24a4\0\u24ea\0\u2530\0\u2576\0\u25bc"+
    "\0\u2602\0\u038e\0\u2648\0\u268e\0\u26d4\0\u271a\0\u2760\0\u27a6"+
    "\0\u27ec\0\u2832\0\u2878\0\u038e\0\u28be\0\u2904\0\u294a\0\u2990"+
    "\0\u038e\0\u29d6\0\u2a1c\0\u2a62\0\u2aa8\0\u038e\0\u0230\0\u2aee"+
    "\0\u2b34\0\u2b7a\0\u0230\0\u2bc0\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8"+
    "\0\u2d1e\0\u038e\0\u2d64\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2"+
    "\0\u2f08\0\u2f4e\0\u2f94\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u30f2"+
    "\0\u3138\0\u038e\0\u317e\0\u31c4\0\u320a\0\u3250\0\u3296\0\u32dc"+
    "\0\u3322\0\u3368\0\u33ae\0\u33f4\0\u343a\0\u038e\0\u3480\0\u34c6"+
    "\0\u350c\0\u3552\0\u3598\0\u35de\0\u038e\0\u3624\0\u366a\0\u36b0"+
    "\0\u36f6\0\u373c\0\u038e\0\u0230\0\u3782\0\u37c8\0\u380e\0\u3854"+
    "\0\u389a\0\u38e0\0\u3926\0\u396c\0\u038e\0\u39b2\0\u39f8\0\u3a3e"+
    "\0\u3a84\0\u14c8\0\u3aca\0\u0230\0\u3b10\0\u038e\0\u3b56\0\u3b9c"+
    "\0\u3be2\0\u038e\0\u038e\0\u3c28\0\u3c6e\0\u3cb4\0\u3cfa\0\u3d40"+
    "\0\u3d86\0\u3dcc\0\u3e12\0\u038e\0\u3e58\0\u3e9e\0\u038e\0\u3ee4"+
    "\0\u038e\0\u038e\0\u3f2a\0\u038e\0\u3f70\0\u3fb6\0\u3ffc\0\u038e"+
    "\0\u038e\0\u4042\0\u0230\0\u4088\0\u40ce\0\u4114\0\u415a\0\u41a0"+
    "\0\u41e6\0\u422c\0\u4272\0\u42b8\0\u42fe\0\u038e\0\u4344\0\u438a"+
    "\0\u43d0\0\u038e\0\u4416\0\u445c\0\u44a2\0\u44e8\0\u452e\0\u038e"+
    "\0\u038e\0\u4574\0\u038e\0\u45ba\0\u4600\0\u4646\0\u468c\0\u46d2"+
    "\0\u4718\0\u038e\0\u475e\0\u47a4\0\u038e\0\u038e\0\u47ea\0\u038e"+
    "\0\u4830\0\u4876\0\u48bc\0\u4902\0\u4948\0\u0230\0\u038e\0\u498e"+
    "\0\u49d4\0\u4a1a\0\u4a60\0\u4aa6\0\u4aec\0\u4b32\0\u4b78\0\u4bbe"+
    "\0\u4c04\0\u4c4a\0\u038e\0\u038e\0\u4c90\0\u4cd6\0\u038e\0\u4d1c"+
    "\0\u4d62\0\u4da8\0\u038e\0\u4dee\0\u4e34\0\u4e7a\0\u4ec0\0\u4f06"+
    "\0\u4f4c\0\u038e\0\u4f92\0\u038e\0\u038e\0\u4fd8\0\u501e\0\u5064"+
    "\0\u50aa\0\u038e\0\u50f0\0\u038e\0\u038e\0\u038e\0\u5136\0\u517c"+
    "\0\u51c2\0\u5208\0\u038e\0\u0230\0\u524e\0\u038e\0\u038e\0\u038e"+
    "\0\u5294\0\u038e\0\u52da\0\u5320\0\u5366\0\u53ac\0\u53f2\0\u038e"+
    "\0\u038e\0\u5438\0\u547e\0\u54c4\0\u10ae";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[413];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\27\7\1\10\56\7\1\11\1\12\2\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\11\1\21\1\22\1\23\1\24"+
    "\2\22\1\25\1\26\1\27\1\30\1\11\1\20\1\11"+
    "\1\31\1\32\1\33\1\20\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\2\20\1\46"+
    "\1\47\1\50\1\51\1\52\2\20\1\53\1\20\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\11\1\101\1\102\1\103"+
    "\100\101\1\104\1\101\1\105\1\106\1\102\1\103\77\106"+
    "\1\104\2\106\1\105\1\107\1\102\1\103\101\107\1\110"+
    "\1\105\1\111\1\112\1\113\103\111\27\7\1\0\56\7"+
    "\30\0\1\114\165\0\1\13\110\0\1\115\1\116\64\0"+
    "\1\117\105\0\1\120\12\0\1\17\1\121\1\122\103\17"+
    "\10\0\10\20\1\0\1\20\1\0\1\20\1\0\2\20"+
    "\2\0\2\20\1\0\24\20\40\0\1\123\1\124\1\125"+
    "\1\0\1\126\1\127\1\130\1\131\76\0\2\22\2\0"+
    "\2\22\1\130\1\131\74\0\10\20\1\0\1\20\1\0"+
    "\1\20\1\0\2\20\2\0\2\20\1\0\13\20\1\132"+
    "\10\20\36\0\10\20\1\0\1\20\1\0\1\20\1\0"+
    "\2\20\2\0\2\20\1\0\1\20\1\133\1\20\1\134"+
    "\7\20\1\135\1\136\7\20\40\0\2\130\2\0\2\130"+
    "\76\0\4\20\1\137\3\20\1\0\1\20\1\0\1\20"+
    "\1\0\2\20\2\0\2\20\1\0\6\20\1\140\1\141"+
    "\2\20\1\142\11\20\50\0\1\143\50\0\1\144\22\0"+
    "\4\20\2\145\2\20\1\0\1\145\1\0\1\146\1\147"+
    "\2\145\2\0\2\145\1\0\1\150\23\145\55\0\1\151"+
    "\3\0\1\152\37\0\1\153\45\0\1\154\62\0\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\2\20\2\0\2\20"+
    "\1\0\5\20\1\155\6\20\1\156\7\20\61\0\1\157"+
    "\37\0\1\160\22\0\10\20\1\0\1\20\1\0\1\20"+
    "\1\0\2\20\2\0\1\20\1\161\1\0\5\20\1\162"+
    "\16\20\36\0\5\20\1\163\2\20\1\0\1\20\1\0"+
    "\1\20\1\0\2\20\2\0\2\20\1\0\7\20\1\164"+
    "\10\20\1\165\3\20\36\0\10\20\1\0\1\20\1\0"+
    "\1\20\1\0\2\20\2\0\2\20\1\0\1\166\14\20"+
    "\1\167\6\20\36\0\10\20\1\0\1\20\1\0\1\20"+
    "\1\0\2\20\2\0\2\20\1\0\2\20\1\170\1\20"+
    "\1\171\2\20\1\172\14\20\36\0\10\20\1\0\1\20"+
    "\1\0\1\20\1\0\2\20\2\0\2\20\1\0\5\20"+
    "\1\173\16\20\36\0\10\20\1\0\1\174\1\0\1\20"+
    "\1\0\2\20\2\0\2\20\1\0\24\20\36\0\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\2\20\2\0\2\20"+
    "\1\0\3\20\1\175\6\20\1\176\1\177\10\20\36\0"+
    "\10\20\1\0\1\200\1\0\1\20\1\0\2\20\2\0"+
    "\2\20\1\0\3\20\1\201\10\20\1\202\7\20\36\0"+
    "\10\20\1\0\1\203\1\0\1\20\1\0\2\20\2\0"+
    "\2\20\1\0\13\20\1\204\10\20\36\0\10\20\1\0"+
    "\1\20\1\0\1\20\1\0\2\20\2\0\2\20\1\0"+
    "\5\20\1\205\16\20\36\0\10\20\1\0\1\20\1\0"+
    "\1\20\1\0\2\20\2\0\2\20\1\0\2\20\1\206"+
    "\21\20\36\0\10\20\1\0\1\20\1\0\1\20\1\0"+
    "\2\20\2\0\1\20\1\207\1\0\24\20\36\0\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\2\20\2\0\2\20"+
    "\1\0\1\20\1\210\22\20\36\0\10\20\1\0\1\20"+
    "\1\0\1\20\1\0\2\20\2\0\2\20\1\0\12\20"+
    "\1\211\1\212\10\20\36\0\10\20\1\0\1\20\1\0"+
    "\1\20\1\0\2\20\2\0\2\20\1\0\3\20\1\213"+
    "\20\20\61\0\1\214\34\0\1\215\2\0\1\216\103\0"+
    "\1\217\107\0\1\220\45\0\1\214\37\0\1\221\105\0"+
    "\1\222\107\0\1\223\106\0\1\224\7\0\1\101\2\0"+
    "\100\101\1\0\1\101\3\0\1\103\103\0\2\103\1\0"+
    "\103\103\1\106\2\0\77\106\1\0\2\106\1\0\1\107"+
    "\2\0\101\107\2\0\2\111\1\0\105\111\1\113\11\111"+
    "\2\225\3\111\1\225\2\111\3\225\2\111\2\225\1\111"+
    "\24\225\26\111\14\0\2\226\3\0\1\226\2\0\3\226"+
    "\2\0\2\226\1\0\24\226\57\0\1\227\54\0\1\115"+
    "\1\230\1\231\103\115\6\232\1\233\77\232\2\0\1\122"+
    "\115\0\1\123\1\124\2\0\1\126\1\127\1\130\1\131"+
    "\76\0\2\124\2\0\2\124\1\130\1\131\76\0\1\234"+
    "\1\235\1\0\3\235\1\0\1\235\15\0\2\235\1\0"+
    "\1\235\1\0\1\235\53\0\1\127\1\124\2\0\2\127"+
    "\1\130\1\131\76\0\1\236\1\124\2\0\2\236\1\130"+
    "\1\131\76\0\2\130\2\0\2\130\1\0\1\131\76\0"+
    "\2\237\2\0\2\237\2\0\1\240\45\0\1\240\25\0"+
    "\10\20\1\0\1\20\1\0\1\20\1\0\2\20\2\0"+
    "\2\20\1\0\5\20\1\241\16\20\36\0\10\20\1\0"+
    "\1\20\1\0\1\20\1\0\2\20\2\0\2\20\1\0"+
    "\7\20\1\242\14\20\36\0\10\20\1\0\1\20\1\0"+
    "\1\20\1\0\2\20\2\0\2\20\1\0\12\20\1\243"+
    "\11\20\36\0\10\20\1\0\1\20\1\0\1\20\1\0"+
    "\2\20\2\0\2\20\1\0\5\20\1\244\16\20\36\0"+
    "\10\20\1\0\1\20\1\0\1\20\1\0\2\20\2\0"+
    "\2\20\1\0\7\20\1\245\14\20\36\0\10\20\1\0"+
    "\1\20\1\0\1\20\1\0\2\20\2\0\2\20\1\0"+
    "\1\246\23\20\36\0\10\20\1\0\1\20\1\0\1\20"+
    "\1\0\2\20\2\0\1\20\1\247\1\0\24\20\36\0"+
    "\10\20\1\0\1\20\1\0\1\20\1\0\2\20\2\0"+
    "\2\20\1\0\10\20\1\250\13\20\36\0\10\20\1\0"+
    "\1\20\1\0\1\20\1\0\2\20\2\0\2\20\1\0"+
    "\2\20\1\251\21\20\36\0\2\20\6\145\1\0\1\145"+
    "\1\0\1\20\1\147\2\145\2\0\2\145\1\0\24\145"+
    "\36\0\4\20\2\145\2\20\1\0\1\145\1\0\1\146"+
    "\1\147\2\145\2\0\2\145\1\0\24\145\40\0\6\147"+
    "\1\0\1\147\2\0\3\147\2\0\2\147\1\0\24\147"+
    "\36\0\2\20\6\145\1\0\1\145\1\0\1\20\1\147"+
    "\2\145\2\0\1\145\1\252\1\0\24\145\55\0\1\253"+
    "\66\0\10\20\1\0\1\20\1\0\1\20\1\0\2\20"+
    "\2\0\2\20\1\0\1\20\1\254\11\20\1\255\10\20"+
    "\36\0\10\20\1\0\1\20\1\0\1\20\1\0\2\20"+
    "\2\0\2\20\1\0\4\20\1\256\17\20\36\0\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\2\20\2\0\2\20"+
    "\1\0\5\20\1\257\16\20\36\0\10\20\1\0\1\20"+
    "\1\0\1\20\1\0\2\20\2\0\2\20\1\0\3\20"+
    "\1\260\10\20\1\261\1\20\1\262\5\20\36\0\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\2\20\2\0\2\20"+
    "\1\0\1\263\1\20\1\264\3\20\1\265\15\20\36\0"+
    "\10\20\1\0\1\20\1\0\1\20\1\0\2\20\2\0"+
    "\1\266\1\20\1\0\24\20\36\0\10\20\1\0\1\20"+
    "\1\0\1\20\1\0\2\20\2\0\2\20\1\0\3\20"+
    "\1\267\20\20\36\0\10\20\1\0\1\20\1\0\1\20"+
    "\1\0\2\20\2\0\2\20\1\0\1\20\1\270\22\20"+
    "\36\0\10\20\1\0\1\20\1\0\1\20\1\0\2\20"+
    "\2\0\2\20\1\0\2\20\1\271\21\20\36\0\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\2\20\2\0\2\20"+
    "\1\0\10\20\1\272\13\20\36\0\10\20\1\0\1\273"+
    "\1\0\1\20\1\0\2\20\2\0\2\20\1\0\24\20"+
    "\36\0\10\20\1\0\1\20\1\0\1\20\1\0\2\20"+
    "\2\0\2\20\1\0\1\274\22\20\1\275\36\0\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\2\20\2\0\2\20"+
    "\1\0\1\276\1\20\1\277\7\20\1\300\11\20\36\0"+
    "\10\20\1\0\1\20\1\0\1\20\1\0\2\20\2\0"+
    "\2\20\1\0\3\20\1\301\7\20\1\302\10\20\36\0"+
    "\10\20\1\0\1\20\1\0\1\20\1\0\2\20\2\0"+
    "\2\20\1\0\7\20\1\303\14\20\36\0\10\20\1\0"+
    "\1\20\1\0\1\20\1\0\2\20\2\0\2\20\1\0"+
    "\15\20\1\304\6\20\36\0\10\20\1\0\1\20\1\0"+
    "\1\20\1\0\2\20\2\0\2\20\1\0\20\20\1\305"+
    "\3\20\36\0\10\20\1\0\1\20\1\0\1\20\1\0"+
    "\2\20\2\0\2\20\1\0\12\20\1\306\11\20\36\0"+
    "\5\20\1\307\2\20\1\0\1\20\1\0\1\20\1\0"+
    "\2\20\2\0\2\20\1\0\6\20\1\310\15\20\36\0"+
    "\10\20\1\0\1\311\1\0\1\20\1\0\2\20\2\0"+
    "\2\20\1\0\24\20\36\0\10\20\1\0\1\20\1\0"+
    "\1\20\1\0\2\20\2\0\2\20\1\0\1\20\1\312"+
    "\22\20\36\0\10\20\1\0\1\313\1\0\1\20\1\0"+
    "\2\20\2\0\2\20\1\0\24\20\36\0\10\20\1\0"+
    "\1\20\1\0\1\20\1\0\2\20\2\0\2\20\1\0"+
    "\13\20\1\314\10\20\36\0\10\20\1\0\1\20\1\0"+
    "\1\20\1\0\2\20\2\0\2\20\1\0\1\315\23\20"+
    "\36\0\10\20\1\0\1\20\1\0\1\20\1\0\2\20"+
    "\2\0\2\20\1\0\5\20\1\316\16\20\121\0\1\317"+
    "\105\0\1\152\12\0\2\111\1\0\7\111\6\225\1\111"+
    "\1\225\2\111\3\225\2\111\2\225\1\111\24\225\26\111"+
    "\12\0\6\226\1\0\1\226\2\0\3\226\2\0\2\226"+
    "\1\0\24\226\60\0\1\320\55\0\1\231\103\0\6\232"+
    "\1\321\77\232\5\322\1\323\1\233\77\322\12\0\2\324"+
    "\1\0\3\324\1\0\1\324\15\0\2\324\1\0\1\324"+
    "\1\0\1\324\53\0\1\325\1\124\2\0\2\325\1\130"+
    "\1\131\76\0\2\237\2\0\2\237\76\0\10\20\1\0"+
    "\1\20\1\0\1\20\1\0\2\20\2\0\2\20\1\0"+
    "\3\20\1\326\20\20\36\0\10\20\1\0\1\20\1\0"+
    "\1\20\1\0\2\20\2\0\2\20\1\0\2\20\1\261"+
    "\21\20\36\0\10\20\1\0\1\327\1\0\1\20\1\0"+
    "\2\20\2\0\2\20\1\0\24\20\36\0\10\20\1\0"+
    "\1\20\1\0\1\20\1\0\2\20\2\0\2\20\1\0"+
    "\6\20\1\330\15\20\36\0\10\20\1\0\1\331\1\0"+
    "\1\20\1\0\2\20\2\0\2\20\1\0\24\20\36\0"+
    "\10\20\1\0\1\20\1\0\1\20\1\0\2\20\2\0"+
    "\2\20\1\0\13\20\1\332\10\20\36\0\5\20\1\333"+
    "\2\20\1\0\1\20\1\0\1\20\1\0\2\20\2\0"+
    "\2\20\1\0\1\20\1\334\1\335\5\20\1\336\4\20"+
    "\1\337\6\20\36\0\10\20\1\0\1\340\1\0\1\20"+
    "\1\0\2\20\2\0\2\20\1\0\24\20\36\0\2\20"+
    "\6\145\1\0\1\145\1\0\1\20\1\147\2\145\2\0"+
    "\2\145\1\0\1\145\1\341\22\145\42\0\2\342\3\0"+
    "\1\342\2\0\3\342\2\0\2\342\1\0\24\342\23\0"+
    "\1\343\12\0\10\20\1\0\1\20\1\0\1\20\1\0"+
    "\2\20\2\0\2\20\1\0\7\20\1\344\12\20\1\345"+
    "\1\20\36\0\10\20\1\0\1\20\1\0\1\20\1\0"+
    "\2\20\2\0\2\20\1\0\1\346\23\20\36\0\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\2\20\2\0\2\20"+
    "\1\0\12\20\1\347\11\20\36\0\10\20\1\0\1\20"+
    "\1\0\1\20\1\0\2\20\2\0\2\20\1\0\13\20"+
    "\1\350\10\20\36\0\10\20\1\0\1\20\1\0\1\20"+
    "\1\0\2\20\2\0\2\20\1\0\1\20\1\351\22\20"+
    "\36\0\10\20\1\0\1\352\1\0\1\20\1\0\2\20"+
    "\2\0\2\20\1\0\24\20\36\0\10\20\1\0\1\353"+
    "\1\0\1\20\1\0\2\20\2\0\2\20\1\0\24\20"+
    "\36\0\10\20\1\0\1\20\1\0\1\20\1\0\2\20"+
    "\2\0\2\20\1\0\1\354\23\20\36\0\10\20\1\0"+
    "\1\20\1\0\1\20\1\0\2\20\2\0\2\20\1\0"+
    "\12\20\1\355\11\20\36\0\10\20\1\0\1\20\1\0"+
    "\1\20\1\0\2\20\2\0\2\20\1\0\12\20\1\356"+
    "\11\20\36\0\10\20\1\0\1\20\1\0\1\20\1\0"+
    "\2\20\2\0\2\20\1\0\1\357\23\20\36\0\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\2\20\2\0\2\20"+
    "\1\0\1\360\23\20\36\0\10\20\1\0\1\20\1\0"+
    "\1\20\1\0\2\20\2\0\2\20\1\0\1\361\23\20"+
    "\36\0\10\20\1\0\1\20\1\0\1\20\1\0\2\20"+
    "\2\0\2\20\1\0\3\20\1\362\20\20\36\0\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\2\20\2\0\2\20"+
    "\1\0\14\20\1\363\7\20\36\0\10\20\1\0\1\20"+
    "\1\0\1\20\1\0\2\20\2\0\2\20\1\0\14\20"+
    "\1\364\7\20\36\0\10\20\1\0\1\20\1\0\1\20"+
    "\1\0\2\20\2\0\2\20\1\0\6\20\1\365\15\20"+
    "\36\0\10\20\1\0\1\366\1\0\1\20\1\0\2\20"+
    "\2\0\2\20\1\0\24\20\36\0\10\20\1\0\1\20"+
    "\1\0\1\20\1\0\2\20\2\0\2\20\1\0\12\20"+
    "\1\367\11\20\36\0\10\20\1\0\1\20\1\0\1\20"+
    "\1\0\2\20\2\0\2\20\1\0\2\20\1\370\21\20"+
    "\36\0\10\20\1\0\1\20\1\0\1\20\1\0\2\20"+
    "\2\0\2\20\1\0\7\20\1\371\14\20\36\0\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\2\20\2\0\2\20"+
    "\1\0\1\372\1\20\1\373\21\20\36\0\10\20\1\0"+
    "\1\374\1\0\1\20\1\0\2\20\2\0\2\20\1\0"+
    "\24\20\36\0\10\20\1\0\1\20\1\0\1\20\1\0"+
    "\2\20\2\0\2\20\1\0\12\20\1\375\11\20\36\0"+
    "\10\20\1\0\1\20\1\0\1\20\1\0\2\20\2\0"+
    "\2\20\1\0\3\20\1\376\20\20\36\0\10\20\1\0"+
    "\1\20\1\0\1\20\1\0\2\20\2\0\2\20\1\0"+
    "\12\20\1\377\11\20\36\0\10\20\1\0\1\20\1\0"+
    "\1\20\1\0\2\20\2\0\2\20\1\0\12\20\1\u0100"+
    "\11\20\36\0\10\20\1\0\1\20\1\0\1\20\1\0"+
    "\2\20\2\0\2\20\1\0\12\20\1\u0101\11\20\36\0"+
    "\10\20\1\0\1\20\1\0\1\20\1\0\2\20\2\0"+
    "\2\20\1\0\4\20\1\u0102\17\20\36\0\10\20\1\0"+
    "\1\20\1\0\1\20\1\0\2\20\2\0\2\20\1\0"+
    "\13\20\1\u0103\10\20\57\0\1\u0104\54\0\5\232\1\323"+
    "\1\321\77\232\6\322\1\u0105\77\322\12\0\2\u0106\1\0"+
    "\3\u0106\1\0\1\u0106\15\0\2\u0106\1\0\1\u0106\1\0"+
    "\1\u0106\53\0\1\u0107\1\124\2\0\2\u0107\1\130\1\131"+
    "\74\0\10\20\1\0\1\20\1\0\1\20\1\0\2\20"+
    "\2\0\2\20\1\0\12\20\1\u0108\11\20\36\0\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\2\20\2\0\2\20"+
    "\1\0\3\20\1\u0109\20\20\36\0\10\20\1\0\1\20"+
    "\1\0\1\20\1\0\2\20\2\0\2\20\1\0\1\u010a"+
    "\23\20\36\0\10\20\1\0\1\20\1\0\1\20\1\0"+
    "\2\20\2\0\2\20\1\0\7\20\1\u010b\14\20\36\0"+
    "\10\20\1\0\1\20\1\0\1\20\1\0\2\20\2\0"+
    "\2\20\1\0\13\20\1\u010c\10\20\36\0\5\20\1\u010d"+
    "\2\20\1\0\1\20\1\0\1\20\1\0\2\20\2\0"+
    "\2\20\1\0\24\20\36\0\10\20\1\0\1\20\1\0"+
    "\1\20\1\0\2\20\2\0\2\20\1\0\15\20\1\u010e"+
    "\6\20\36\0\10\20\1\0\1\u010f\1\0\1\20\1\0"+
    "\2\20\2\0\2\20\1\0\24\20\36\0\10\20\1\0"+
    "\1\20\1\0\1\20\1\0\2\20\2\0\1\20\1\u0110"+
    "\1\0\24\20\36\0\10\20\1\0\1\20\1\0\1\20"+
    "\1\0\2\20\2\0\2\20\1\0\1\20\1\u0111\22\20"+
    "\36\0\2\20\6\145\1\0\1\145\1\0\1\20\1\147"+
    "\2\145\2\0\2\145\1\0\2\145\1\u0112\21\145\27\0"+
    "\1\u0113\1\u0114\7\0\6\342\1\0\1\342\2\0\3\342"+
    "\2\0\2\342\1\0\24\342\42\0\2\u0115\3\0\1\u0115"+
    "\2\0\3\u0115\2\0\2\u0115\1\0\24\u0115\36\0\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\2\20\2\0\2\20"+
    "\1\0\1\u0116\23\20\36\0\10\20\1\0\1\20\1\0"+
    "\1\20\1\0\2\20\2\0\2\20\1\0\3\20\1\u0117"+
    "\20\20\36\0\10\20\1\0\1\u0118\1\0\1\20\1\0"+
    "\2\20\2\0\2\20\1\0\24\20\36\0\10\20\1\0"+
    "\1\20\1\0\1\20\1\0\2\20\2\0\2\20\1\0"+
    "\1\20\1\u0119\22\20\36\0\10\20\1\0\1\20\1\0"+
    "\1\20\1\0\2\20\2\0\2\20\1\0\15\20\1\u011a"+
    "\6\20\36\0\10\20\1\0\1\20\1\0\1\20\1\0"+
    "\2\20\2\0\2\20\1\0\1\u011b\23\20\36\0\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\2\20\2\0\2\20"+
    "\1\0\5\20\1\u011c\16\20\36\0\10\20\1\0\1\u011d"+
    "\1\0\1\20\1\0\2\20\2\0\2\20\1\0\3\20"+
    "\1\u011e\20\20\36\0\10\20\1\0\1\20\1\0\1\20"+
    "\1\0\2\20\2\0\2\20\1\0\14\20\1\u011f\7\20"+
    "\36\0\10\20\1\0\1\u0120\1\0\1\20\1\0\2\20"+
    "\2\0\2\20\1\0\24\20\36\0\10\20\1\0\1\20"+
    "\1\0\1\20\1\0\2\20\2\0\2\20\1\0\1\20"+
    "\1\u0121\22\20\36\0\10\20\1\0\1\20\1\0\1\20"+
    "\1\0\2\20\2\0\2\20\1\0\6\20\1\u0122\15\20"+
    "\36\0\10\20\1\0\1\20\1\0\1\20\1\0\2\20"+
    "\2\0\2\20\1\0\5\20\1\u0123\16\20\36\0\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\2\20\2\0\2\20"+
    "\1\0\11\20\1\u0124\12\20\36\0\10\20\1\0\1\20"+
    "\1\0\1\20\1\0\2\20\2\0\2\20\1\0\5\20"+
    "\1\u0125\16\20\36\0\10\20\1\0\1\20\1\0\1\20"+
    "\1\0\2\20\2\0\2\20\1\0\1\20\1\u0126\22\20"+
    "\36\0\10\20\1\0\1\20\1\0\1\20\1\0\2\20"+
    "\2\0\1\20\1\u0127\1\0\24\20\36\0\10\20\1\0"+
    "\1\20\1\0\1\20\1\0\2\20\2\0\2\20\1\0"+
    "\3\20\1\u0128\20\20\36\0\10\20\1\0\1\20\1\0"+
    "\1\20\1\0\2\20\2\0\2\20\1\0\2\20\1\u0129"+
    "\21\20\36\0\10\20\1\0\1\u012a\1\0\1\20\1\0"+
    "\2\20\2\0\2\20\1\0\24\20\36\0\10\20\1\0"+
    "\1\20\1\0\1\20\1\0\2\20\2\0\2\20\1\0"+
    "\1\20\1\u012b\22\20\36\0\10\20\1\0\1\20\1\0"+
    "\1\20\1\0\2\20\2\0\2\20\1\0\1\u012c\23\20"+
    "\36\0\10\20\1\0\1\20\1\0\1\20\1\0\2\20"+
    "\2\0\2\20\1\0\2\20\1\u012d\21\20\36\0\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\2\20\2\0\2\20"+
    "\1\0\14\20\1\u012e\7\20\36\0\10\20\1\0\1\20"+
    "\1\0\1\20\1\0\2\20\2\0\2\20\1\0\3\20"+
    "\1\u012f\20\20\36\0\10\20\1\0\1\u0130\1\0\1\20"+
    "\1\0\2\20\2\0\2\20\1\0\24\20\36\0\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\2\20\2\0\2\20"+
    "\1\0\10\20\1\u0131\13\20\36\0\10\20\1\0\1\20"+
    "\1\0\1\20\1\0\2\20\2\0\2\20\1\0\3\20"+
    "\1\u0132\20\20\26\0\5\322\1\u0133\1\u0105\77\322\12\0"+
    "\2\u0134\1\0\3\u0134\1\0\1\u0134\15\0\2\u0134\1\0"+
    "\1\u0134\1\0\1\u0134\53\0\1\u0135\1\124\2\0\2\u0135"+
    "\1\130\1\131\74\0\10\20\1\0\1\20\1\0\1\20"+
    "\1\0\2\20\2\0\2\20\1\0\12\20\1\u0136\11\20"+
    "\36\0\10\20\1\0\1\20\1\0\1\20\1\0\2\20"+
    "\2\0\2\20\1\0\6\20\1\u0137\15\20\36\0\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\2\20\2\0\2\20"+
    "\1\0\1\20\1\u0138\22\20\36\0\10\20\1\0\1\20"+
    "\1\0\1\20\1\0\2\20\2\0\2\20\1\0\10\20"+
    "\1\u0139\13\20\36\0\10\20\1\0\1\20\1\0\1\20"+
    "\1\0\2\20\2\0\2\20\1\0\5\20\1\u013a\16\20"+
    "\36\0\10\20\1\0\1\20\1\0\1\20\1\0\2\20"+
    "\2\0\2\20\1\0\1\20\1\u013b\22\20\36\0\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\2\20\2\0\2\20"+
    "\1\0\6\20\1\u013c\15\20\36\0\10\20\1\0\1\20"+
    "\1\0\1\20\1\0\2\20\2\0\2\20\1\0\1\20"+
    "\1\u013d\22\20\36\0\5\20\1\u013e\2\20\1\0\1\20"+
    "\1\0\1\20\1\0\2\20\2\0\2\20\1\0\24\20"+
    "\30\0\1\u0114\115\0\6\u0115\1\0\1\u0115\2\0\3\u0115"+
    "\2\0\2\u0115\1\0\24\u0115\23\0\1\u013f\12\0\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\2\20\2\0\2\20"+
    "\1\0\1\u0140\23\20\36\0\10\20\1\0\1\20\1\0"+
    "\1\20\1\0\2\20\2\0\2\20\1\0\6\20\1\u0141"+
    "\15\20\36\0\10\20\1\0\1\20\1\0\1\20\1\0"+
    "\2\20\2\0\2\20\1\0\6\20\1\u0142\15\20\36\0"+
    "\5\20\1\u0143\2\20\1\0\1\20\1\0\1\20\1\0"+
    "\2\20\2\0\2\20\1\0\24\20\36\0\10\20\1\0"+
    "\1\20\1\0\1\20\1\0\2\20\2\0\2\20\1\0"+
    "\3\20\1\u0144\20\20\36\0\10\20\1\0\1\20\1\0"+
    "\1\20\1\0\2\20\2\0\2\20\1\0\7\20\1\u0145"+
    "\14\20\36\0\10\20\1\0\1\20\1\0\1\20\1\0"+
    "\2\20\2\0\2\20\1\0\10\20\1\u0146\13\20\36\0"+
    "\10\20\1\0\1\20\1\0\1\20\1\0\2\20\2\0"+
    "\2\20\1\0\20\20\1\u0147\3\20\36\0\10\20\1\0"+
    "\1\20\1\0\1\20\1\0\2\20\2\0\2\20\1\0"+
    "\6\20\1\u0148\15\20\36\0\10\20\1\0\1\20\1\0"+
    "\1\20\1\0\2\20\2\0\1\20\1\u0149\1\0\24\20"+
    "\36\0\10\20\1\0\1\20\1\0\1\20\1\0\2\20"+
    "\2\0\2\20\1\0\3\20\1\u014a\20\20\36\0\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\2\20\2\0\2\20"+
    "\1\0\7\20\1\u014b\14\20\36\0\10\20\1\0\1\20"+
    "\1\0\1\20\1\0\2\20\2\0\2\20\1\0\5\20"+
    "\1\u014c\16\20\36\0\10\20\1\0\1\20\1\0\1\20"+
    "\1\0\2\20\2\0\2\20\1\0\4\20\1\u014d\17\20"+
    "\36\0\10\20\1\0\1\20\1\0\1\20\1\0\2\20"+
    "\2\0\2\20\1\0\7\20\1\u014e\14\20\36\0\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\2\20\2\0\1\u014f"+
    "\1\20\1\0\24\20\36\0\10\20\1\0\1\20\1\0"+
    "\1\20\1\0\2\20\2\0\2\20\1\0\12\20\1\u0150"+
    "\11\20\36\0\10\20\1\0\1\20\1\0\1\20\1\0"+
    "\2\20\2\0\2\20\1\0\5\20\1\u0151\16\20\36\0"+
    "\10\20\1\0\1\20\1\0\1\20\1\0\2\20\2\0"+
    "\2\20\1\0\12\20\1\u0152\11\20\40\0\2\u0153\1\0"+
    "\3\u0153\1\0\1\u0153\15\0\2\u0153\1\0\1\u0153\1\0"+
    "\1\u0153\53\0\1\u0154\1\124\2\0\2\u0154\1\130\1\131"+
    "\74\0\10\20\1\0\1\20\1\0\1\20\1\0\2\20"+
    "\2\0\2\20\1\0\16\20\1\u0155\5\20\36\0\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\2\20\2\0\1\20"+
    "\1\u0156\1\0\24\20\36\0\10\20\1\0\1\20\1\0"+
    "\1\20\1\0\2\20\2\0\2\20\1\0\13\20\1\u0157"+
    "\10\20\36\0\10\20\1\0\1\20\1\0\1\20\1\0"+
    "\2\20\2\0\2\20\1\0\2\20\1\u0158\21\20\36\0"+
    "\10\20\1\0\1\u0159\1\0\1\20\1\0\2\20\2\0"+
    "\2\20\1\0\24\20\36\0\10\20\1\0\1\20\1\0"+
    "\1\20\1\0\2\20\2\0\2\20\1\0\1\u015a\23\20"+
    "\36\0\10\20\1\0\1\20\1\0\1\20\1\0\2\20"+
    "\2\0\2\20\1\0\12\20\1\u015b\11\20\36\0\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\2\20\2\0\2\20"+
    "\1\0\12\20\1\u015c\11\20\27\0\1\u015d\1\u015e\113\0"+
    "\10\20\1\0\1\u015f\1\0\1\20\1\0\2\20\2\0"+
    "\2\20\1\0\24\20\36\0\10\20\1\0\1\20\1\0"+
    "\1\20\1\0\2\20\2\0\2\20\1\0\1\u0160\23\20"+
    "\36\0\10\20\1\0\1\20\1\0\1\20\1\0\2\20"+
    "\2\0\2\20\1\0\3\20\1\u0161\20\20\36\0\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\2\20\2\0\2\20"+
    "\1\0\10\20\1\u0162\13\20\36\0\10\20\1\0\1\20"+
    "\1\0\1\20\1\0\2\20\2\0\2\20\1\0\6\20"+
    "\1\u0163\15\20\36\0\10\20\1\0\1\u0164\1\0\1\20"+
    "\1\0\2\20\2\0\2\20\1\0\24\20\36\0\10\20"+
    "\1\0\1\u0165\1\0\1\20\1\0\2\20\2\0\2\20"+
    "\1\0\24\20\36\0\10\20\1\0\1\20\1\0\1\20"+
    "\1\0\2\20\2\0\2\20\1\0\6\20\1\u0166\15\20"+
    "\36\0\10\20\1\0\1\u0167\1\0\1\20\1\0\2\20"+
    "\2\0\2\20\1\0\24\20\36\0\10\20\1\0\1\20"+
    "\1\0\1\20\1\0\2\20\2\0\2\20\1\0\12\20"+
    "\1\u0168\11\20\36\0\10\20\1\0\1\20\1\0\1\20"+
    "\1\0\2\20\2\0\2\20\1\0\14\20\1\u0169\7\20"+
    "\36\0\10\20\1\0\1\20\1\0\1\20\1\0\2\20"+
    "\2\0\2\20\1\0\3\20\1\u016a\20\20\36\0\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\2\20\2\0\2\20"+
    "\1\0\1\u016b\23\20\36\0\10\20\1\0\1\u016c\1\0"+
    "\1\20\1\0\2\20\2\0\2\20\1\0\24\20\40\0"+
    "\2\u016d\1\0\3\u016d\1\0\1\u016d\15\0\2\u016d\1\0"+
    "\1\u016d\1\0\1\u016d\53\0\1\u016e\1\124\2\0\2\u016e"+
    "\1\130\1\131\74\0\10\20\1\0\1\20\1\0\1\20"+
    "\1\0\2\20\2\0\2\20\1\0\7\20\1\u016f\14\20"+
    "\36\0\10\20\1\0\1\20\1\0\1\20\1\0\2\20"+
    "\2\0\2\20\1\0\3\20\1\u0170\20\20\36\0\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\2\20\2\0\2\20"+
    "\1\0\6\20\1\u0171\15\20\36\0\10\20\1\0\1\20"+
    "\1\0\1\20\1\0\2\20\2\0\2\20\1\0\3\20"+
    "\1\u0172\20\20\36\0\10\20\1\0\1\u0173\1\0\1\20"+
    "\1\0\2\20\2\0\2\20\1\0\24\20\30\0\1\u015e"+
    "\113\0\10\20\1\0\1\u0174\1\0\1\20\1\0\2\20"+
    "\2\0\2\20\1\0\24\20\36\0\10\20\1\0\1\20"+
    "\1\0\1\20\1\0\2\20\2\0\2\20\1\0\6\20"+
    "\1\u0175\15\20\36\0\10\20\1\0\1\20\1\0\1\20"+
    "\1\0\2\20\2\0\2\20\1\0\13\20\1\u0176\10\20"+
    "\36\0\10\20\1\0\1\u0177\1\0\1\20\1\0\2\20"+
    "\2\0\2\20\1\0\24\20\36\0\10\20\1\0\1\20"+
    "\1\0\1\20\1\0\2\20\2\0\2\20\1\0\21\20"+
    "\1\u0178\2\20\36\0\10\20\1\0\1\20\1\0\1\20"+
    "\1\0\2\20\2\0\2\20\1\0\7\20\1\u0179\14\20"+
    "\36\0\10\20\1\0\1\20\1\0\1\20\1\0\2\20"+
    "\2\0\2\20\1\0\1\u017a\23\20\36\0\10\20\1\0"+
    "\1\20\1\0\1\20\1\0\2\20\2\0\2\20\1\0"+
    "\21\20\1\u017b\2\20\36\0\10\20\1\0\1\u017c\1\0"+
    "\1\20\1\0\2\20\2\0\2\20\1\0\24\20\36\0"+
    "\10\20\1\0\1\u017d\1\0\1\20\1\0\2\20\2\0"+
    "\2\20\1\0\24\20\36\0\10\20\1\0\1\20\1\0"+
    "\1\20\1\0\2\20\2\0\2\20\1\0\6\20\1\u017e"+
    "\15\20\40\0\2\u017f\1\0\3\u017f\1\0\1\u017f\15\0"+
    "\2\u017f\1\0\1\u017f\1\0\1\u017f\53\0\1\u0180\1\124"+
    "\2\0\2\u0180\1\130\1\131\74\0\10\20\1\0\1\20"+
    "\1\0\1\20\1\0\2\20\2\0\2\20\1\0\6\20"+
    "\1\u0181\15\20\36\0\10\20\1\0\1\20\1\0\1\20"+
    "\1\0\2\20\2\0\1\20\1\u0182\1\0\24\20\36\0"+
    "\10\20\1\0\1\20\1\0\1\20\1\0\2\20\2\0"+
    "\2\20\1\0\5\20\1\u0183\16\20\36\0\10\20\1\0"+
    "\1\20\1\0\1\20\1\0\2\20\2\0\2\20\1\0"+
    "\10\20\1\u0184\13\20\36\0\10\20\1\0\1\u0185\1\0"+
    "\1\20\1\0\2\20\2\0\2\20\1\0\24\20\36\0"+
    "\5\20\1\u0186\2\20\1\0\1\20\1\0\1\20\1\0"+
    "\2\20\2\0\2\20\1\0\24\20\36\0\10\20\1\0"+
    "\1\20\1\0\1\20\1\0\2\20\2\0\2\20\1\0"+
    "\13\20\1\u0187\10\20\36\0\10\20\1\0\1\20\1\0"+
    "\1\20\1\0\2\20\2\0\2\20\1\0\13\20\1\u0188"+
    "\10\20\36\0\10\20\1\0\1\20\1\0\1\20\1\0"+
    "\2\20\2\0\2\20\1\0\1\u0189\23\20\36\0\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\2\20\2\0\2\20"+
    "\1\0\13\20\1\u018a\10\20\36\0\10\20\1\0\1\u018b"+
    "\1\0\1\20\1\0\2\20\2\0\2\20\1\0\24\20"+
    "\40\0\2\u018c\1\0\3\u018c\1\0\1\u018c\15\0\2\u018c"+
    "\1\0\1\u018c\1\0\1\u018c\53\0\1\u018d\1\124\2\0"+
    "\2\u018d\1\130\1\131\74\0\10\20\1\0\1\20\1\0"+
    "\1\20\1\0\2\20\2\0\1\20\1\u018e\1\0\24\20"+
    "\36\0\10\20\1\0\1\u018f\1\0\1\20\1\0\2\20"+
    "\2\0\2\20\1\0\24\20\36\0\5\20\1\u0190\2\20"+
    "\1\0\1\20\1\0\1\20\1\0\2\20\2\0\2\20"+
    "\1\0\24\20\36\0\10\20\1\0\1\20\1\0\1\20"+
    "\1\0\2\20\2\0\2\20\1\0\7\20\1\u0191\14\20"+
    "\36\0\10\20\1\0\1\20\1\0\1\20\1\0\2\20"+
    "\2\0\2\20\1\0\2\20\1\u0192\21\20\36\0\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\2\20\2\0\2\20"+
    "\1\0\7\20\1\u0193\14\20\40\0\1\u0194\1\124\2\0"+
    "\2\u0194\1\130\1\131\74\0\10\20\1\0\1\20\1\0"+
    "\1\20\1\0\2\20\2\0\2\20\1\0\6\20\1\u0195"+
    "\15\20\36\0\10\20\1\0\1\20\1\0\1\20\1\0"+
    "\2\20\2\0\2\20\1\0\6\20\1\u0196\15\20\40\0"+
    "\1\u0197\1\124\2\0\2\u0197\1\130\1\131\74\0\10\20"+
    "\1\0\1\u0198\1\0\1\20\1\0\2\20\2\0\2\20"+
    "\1\0\24\20\36\0\10\20\1\0\1\u0199\1\0\1\20"+
    "\1\0\2\20\2\0\2\20\1\0\24\20\40\0\1\u019a"+
    "\1\124\2\0\2\u019a\1\130\1\131\76\0\1\u019b\1\124"+
    "\2\0\2\u019b\1\130\1\131\76\0\1\u019c\1\124\2\0"+
    "\2\u019c\1\130\1\131\76\0\1\u019d\1\124\2\0\2\u019d"+
    "\1\130\1\131\64\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21770];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\2\1\1\11\1\1\2\11\37\1\10\11\7\1"+
    "\6\11\2\1\2\11\3\1\1\11\5\1\1\0\2\11"+
    "\1\1\1\11\2\1\1\0\3\1\1\0\11\1\2\11"+
    "\5\1\3\11\2\1\2\11\33\1\5\11\2\1\2\11"+
    "\2\1\1\0\1\1\1\11\2\0\4\1\1\0\12\1"+
    "\1\0\43\1\1\11\3\0\1\11\16\1\2\0\40\1"+
    "\1\11\1\0\16\1\1\11\1\0\35\1\1\11\13\1"+
    "\1\0\36\1\1\11\55\1\1\11\21\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[413];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */

  /** Origin id for the tokens. */	
  private String originId;
  
  /** String builder used for texts. */
  private final StringBuilder string = new StringBuilder();
  
  /** Builder for template text (text not in the PHP brackets) */
  private final StringBuilder templateText = new StringBuilder();
  
  /** The label for the current here-/nowdoc block. */
  private String heredocLabel;
  
  /** The type of the current here-/nowdoc block. */
  private ETokenType heredocType;
  
  /** Several tokens in this grammer can be multi line. This variable is used to store the start line. */
  private int startLine;
 
  /** Resets scanner */   
  @Override 
  public void reset(java.io.Reader reader, String originId) {
    this.originId = originId;
    templateText.setLength(0);
    string.setLength(0);
    startLine=0;
    heredocLabel=null;
    heredocType=null;
    clearQueue();
    yyreset(reader);
  }
  
  /** Begin a string. */
  private void beginString(int lexerState) {
  	string.append(yytext());
  	startLine=yyline;
  	yybegin(lexerState);  
  }
  
  /** Close string and return token. */
  private PHPToken endString(ETokenType type) {
    yybegin(PHP);
    int startOffset = yychar - string.length();
    string.append(yytext());
    PHPToken token = new PHPToken(type, startOffset, startLine, string.toString(), originId);   
    string.setLength(0); 
    startLine=0;
    return token;
  }
  
  /**
   * If there's no template text, the provided token is emitted directly. Otherwise, the template text
   * token is emitted first. 
   *
   * @param type the type of token to emit after the template text.
   */
  private PHPToken handleTemplateText(ETokenType type) {
    if (templateText.length() == 0 ) {
  		return token (type);                                   	
	}                          	
		
	pushToken (token(type));                                   	
    String text = templateText.toString(); 
    templateText.setLength(0);
    PHPToken result =  new PHPToken(ETokenType.TEMPLATE_TEXT, yychar-text.length(), startLine, text, originId);
    startLine=0;
    return result;
  }
    
  /** {@inheritDoc} */
  @Override
  public void close() throws java.io.IOException {
    yyclose();
  }
   
  /** Factory method for tokens. */  
  private PHPToken token (ETokenType type) {
	return new PHPToken(type, yychar, yyline, yytext(), originId);
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PHPScanner(java.io.Reader in, String originId) {
      this.originId = originId;
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  PHPScanner(java.io.InputStream in, String originId) {
    this(new java.io.InputStreamReader(in), originId);
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2270) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public PHPToken internalScan() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 15: 
          { return token (ETokenType.LPAREN);
          }
        case 123: break;
        case 73: 
          { return token (ETokenType.CASE);
          }
        case 124: break;
        case 46: 
          { return token (ETokenType.LSHIFT);
          }
        case 125: break;
        case 52: 
          { return token (ETokenType.IF);
          }
        case 126: break;
        case 92: 
          { return token (ETokenType.ELSEIF);
          }
        case 127: break;
        case 122: 
          { return token (ETokenType.REQUIRE_ONCE);
          }
        case 128: break;
        case 64: 
          { return token (ETokenType.FOR);
          }
        case 129: break;
        case 35: 
          { beginString(BACKTICKSTRING);
          }
        case 130: break;
        case 69: 
          { return token (ETokenType.TRADITIONAL_COMMENT);
          }
        case 131: break;
        case 58: 
          { return token (ETokenType.DOUBLE_COLON);
          }
        case 132: break;
        case 76: 
          { return token (ETokenType.FINAL);
          }
        case 133: break;
        case 48: 
          { return token (ETokenType.LTEQ);
          }
        case 134: break;
        case 20: 
          { return token (ETokenType.RBRACK);
          }
        case 135: break;
        case 2: 
          { return token (ETokenType.ILLEGAL_CHARACTER);
          }
        case 136: break;
        case 23: 
          { return token (ETokenType.MINUS);
          }
        case 137: break;
        case 33: 
          { beginString(DOUBLEQUOTEDSTRING);
          }
        case 138: break;
        case 66: 
          { return token (ETokenType.NEW);
          }
        case 139: break;
        case 101: 
          { // we trim to remove the line terminator
                                   heredocLabel = yytext().trim();
                                   heredocLabel = StringUtils.stripPrefix(heredocLabel, "<<<'");
                                   heredocLabel = StringUtils.stripSuffix(heredocLabel, "'");
                                   heredocType = ETokenType.NOWDOC;
                                   beginString(HEREDOC);
          }
        case 140: break;
        case 6: 
          { return token (ETokenType.MULT);
          }
        case 141: break;
        case 63: 
          { if (yytext().trim().equals(heredocLabel)) {
                                     return endString(heredocType);
                                   }
                                   string.append( yytext() );
          }
        case 142: break;
        case 5: 
          { return token (ETokenType.DIV);
          }
        case 143: break;
        case 115: 
          { return token (ETokenType.INSTEADOF);
          }
        case 144: break;
        case 121: 
          { return token (ETokenType.INCLUDE_ONCE);
          }
        case 145: break;
        case 62: 
          { return token (ETokenType.OROR);
          }
        case 146: break;
        case 4: 
          { yyline -= 1;
          }
        case 147: break;
        case 25: 
          { return token (ETokenType.MOD);
          }
        case 148: break;
        case 24: 
          { return token (ETokenType.COLON);
          }
        case 149: break;
        case 7: 
          { return token (ETokenType.HASH_COMMENT);
          }
        case 150: break;
        case 71: 
          { return token (ETokenType.ELSE);
          }
        case 151: break;
        case 113: 
          { return token (ETokenType.PROTECTED);
          }
        case 152: break;
        case 77: 
          { return token (ETokenType.ENDIF);
          }
        case 153: break;
        case 65: 
          { return token (ETokenType.TRY);
          }
        case 154: break;
        case 56: 
          { return token (ETokenType.MINUSMINUS);
          }
        case 155: break;
        case 21: 
          { return token (ETokenType.SEMICOLON);
          }
        case 156: break;
        case 18: 
          { return token (ETokenType.RBRACE);
          }
        case 157: break;
        case 107: 
          { return token (ETokenType.FUNCTION);
          }
        case 158: break;
        case 51: 
          { return token (ETokenType.GTEQ);
          }
        case 159: break;
        case 40: 
          { return token (ETokenType.END_OF_LINE_COMMENT);
          }
        case 160: break;
        case 19: 
          { return token (ETokenType.LBRACK);
          }
        case 161: break;
        case 70: 
          { return token (ETokenType.ECHO);
          }
        case 162: break;
        case 88: 
          { return token (ETokenType.WHILE);
          }
        case 163: break;
        case 104: 
          { return token (ETokenType.REQUIRE);
          }
        case 164: break;
        case 61: 
          { return token (ETokenType.ANDAND);
          }
        case 165: break;
        case 110: 
          { return token (ETokenType.CALLABLE);
          }
        case 166: break;
        case 10: 
          { return token (ETokenType.DOT);
          }
        case 167: break;
        case 32: 
          { return token (ETokenType.AT);
          }
        case 168: break;
        case 84: 
          { return token (ETokenType.CATCH);
          }
        case 169: break;
        case 82: 
          { return token (ETokenType.TRAIT);
          }
        case 170: break;
        case 22: 
          { return token (ETokenType.COMMA);
          }
        case 171: break;
        case 45: 
          { return token (ETokenType.PLUSEQ);
          }
        case 172: break;
        case 100: 
          { return token (ETokenType.EXTENDS);
          }
        case 173: break;
        case 53: 
          { return token (ETokenType.AS);
          }
        case 174: break;
        case 114: 
          { return token (ETokenType.INTERFACE);
          }
        case 175: break;
        case 28: 
          { return token (ETokenType.AND);
          }
        case 176: break;
        case 38: 
          { return endString(ETokenType.BACKTICK_STRING_LITERAL);
          }
        case 177: break;
        case 86: 
          { return token (ETokenType.CLONE);
          }
        case 178: break;
        case 96: 
          { return token (ETokenType.RETURN);
          }
        case 179: break;
        case 47: 
          { return token (ETokenType.NOTEQ);
          }
        case 180: break;
        case 97: 
          { return token (ETokenType.GLOBAL);
          }
        case 181: break;
        case 49: 
          { yybegin(YYINITIAL);
   								   startLine=yyline;
                                   return token (ETokenType.TEMPLATE_CODE_END);
          }
        case 182: break;
        case 27: 
          { return token (ETokenType.NOT);
          }
        case 183: break;
        case 120: 
          { return token (ETokenType.IMPLEMENTS);
          }
        case 184: break;
        case 106: 
          { return token (ETokenType.DECLARE);
          }
        case 185: break;
        case 43: 
          { return token (ETokenType.FLOATING_POINT_LITERAL);
          }
        case 186: break;
        case 17: 
          { return token (ETokenType.LBRACE);
          }
        case 187: break;
        case 37: 
          { return endString(ETokenType.STRING_LITERAL);
          }
        case 188: break;
        case 14: 
          { return token (ETokenType.GT);
          }
        case 189: break;
        case 94: 
          { return token (ETokenType.STATIC);
          }
        case 190: break;
        case 8: 
          { return token (ETokenType.IDENTIFIER);
          }
        case 191: break;
        case 60: 
          { return token (ETokenType.EQEQ);
          }
        case 192: break;
        case 26: 
          { return token (ETokenType.EQ);
          }
        case 193: break;
        case 11: 
          { return token (ETokenType.PLUS);
          }
        case 194: break;
        case 44: 
          { return token (ETokenType.PLUSPLUS);
          }
        case 195: break;
        case 108: 
          { return token (ETokenType.ENDWHILE);
          }
        case 196: break;
        case 59: 
          { return token (ETokenType.MODEQ);
          }
        case 197: break;
        case 54: 
          { return token (ETokenType.DO);
          }
        case 198: break;
        case 118: 
          { return token (ETokenType.ENDDECLARE);
          }
        case 199: break;
        case 93: 
          { return token (ETokenType.PUBLIC);
          }
        case 200: break;
        case 55: 
          { return token (ETokenType.ARROW);
          }
        case 201: break;
        case 78: 
          { return token (ETokenType.THIS);
          }
        case 202: break;
        case 74: 
          { return token (ETokenType.NULL_LITERAL);
          }
        case 203: break;
        case 116: 
          { return token (ETokenType.NAMESPACE);
          }
        case 204: break;
        case 72: 
          { return token (ETokenType.BOOLEAN_LITERAL);
          }
        case 205: break;
        case 12: 
          { return token (ETokenType.LT);
          }
        case 206: break;
        case 81: 
          { return token (ETokenType.THROW);
          }
        case 207: break;
        case 34: 
          { beginString(SINGLEQUOTEDSTRING);
          }
        case 208: break;
        case 30: 
          { return token (ETokenType.XOR);
          }
        case 209: break;
        case 111: 
          { return token (ETokenType.CONTINUE);
          }
        case 210: break;
        case 68: 
          { return token (ETokenType.VAR);
          }
        case 211: break;
        case 109: 
          { return token (ETokenType.ABSTRACT);
          }
        case 212: break;
        case 42: 
          { return token (ETokenType.MULTEQ);
          }
        case 213: break;
        case 75: 
          { return token (ETokenType.GOTO);
          }
        case 214: break;
        case 102: 
          { return token (ETokenType.PRIVATE);
          }
        case 215: break;
        case 105: 
          { return token (ETokenType.DEFAULT);
          }
        case 216: break;
        case 67: 
          { return token (ETokenType.USE);
          }
        case 217: break;
        case 87: 
          { return token (ETokenType.CONST);
          }
        case 218: break;
        case 80: 
          { return token (ETokenType.PRINT);
          }
        case 219: break;
        case 98: 
          { return token (ETokenType.FINALLY);
          }
        case 220: break;
        case 85: 
          { return token (ETokenType.CLASS);
          }
        case 221: break;
        case 16: 
          { return token (ETokenType.RPAREN);
          }
        case 222: break;
        case 99: 
          { return token (ETokenType.FOREACH);
          }
        case 223: break;
        case 50: 
          { return token (ETokenType.RSHIFT);
          }
        case 224: break;
        case 103: 
          { return token (ETokenType.INCLUDE);
          }
        case 225: break;
        case 112: 
          { return token (ETokenType.ENDSWITCH);
          }
        case 226: break;
        case 29: 
          { return token (ETokenType.OR);
          }
        case 227: break;
        case 1: 
          { templateText.append( yytext() );
          }
        case 228: break;
        case 57: 
          { return token (ETokenType.MINUSEQ);
          }
        case 229: break;
        case 39: 
          { yybegin(PHP);
                                   return handleTemplateText(ETokenType.TEMPLATE_CODE_BEGIN);
          }
        case 230: break;
        case 3: 
          { /* ignore */
          }
        case 231: break;
        case 31: 
          { return token (ETokenType.COMP);
          }
        case 232: break;
        case 119: 
          { return token (ETokenType.INSTANCEOF);
          }
        case 233: break;
        case 36: 
          { string.append( yytext() );
          }
        case 234: break;
        case 91: 
          { return token (ETokenType.ENDFOR);
          }
        case 235: break;
        case 41: 
          { return token (ETokenType.DIVEQ);
          }
        case 236: break;
        case 89: 
          { return token (ETokenType.YIELD);
          }
        case 237: break;
        case 90: 
          { return token (ETokenType.DOCUMENTATION_COMMENT);
          }
        case 238: break;
        case 79: 
          { // we trim to remove the line terminator
                                   heredocLabel = StringUtils.stripPrefix(yytext().trim(), "<<<");
                                   heredocType = ETokenType.HEREDOC;
                                   beginString(HEREDOC);
          }
        case 239: break;
        case 117: 
          { return token (ETokenType.ENDFOREACH);
          }
        case 240: break;
        case 9: 
          { return token (ETokenType.INTEGER_LITERAL);
          }
        case 241: break;
        case 83: 
          { return token (ETokenType.BREAK);
          }
        case 242: break;
        case 95: 
          { return token (ETokenType.SWITCH);
          }
        case 243: break;
        case 13: 
          { return token (ETokenType.QUESTION);
          }
        case 244: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case DOUBLEQUOTEDSTRING: {
              yybegin(YYINITIAL);
                                   return new PHPToken(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()+1, yyline, string.toString(), originId);
            }
            case 414: break;
            case YYINITIAL: {
              return handleTemplateText(ETokenType.EOF);
            }
            case 415: break;
            case BACKTICKSTRING: {
              yybegin(YYINITIAL);
                                   return new PHPToken(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()+1, yyline, string.toString(), originId);
            }
            case 416: break;
            case HEREDOC: {
              yybegin(YYINITIAL);
                                   return new PHPToken(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()+1, yyline, string.toString(), originId);
            }
            case 417: break;
            case SINGLEQUOTEDSTRING: {
              yybegin(YYINITIAL);
                                   return new PHPToken(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()+1, yyline, string.toString(), originId);
            }
            case 418: break;
            default:
              {
                return token (ETokenType.EOF);
              }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
