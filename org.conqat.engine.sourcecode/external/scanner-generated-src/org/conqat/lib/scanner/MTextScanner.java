/* The following code was generated by JFlex 1.4.2 on {{TIMESTAMP}} */

package org.conqat.lib.scanner;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on {{TIMESTAMP}} from the specification file
 * <tt>/home/freakout/cqse/repositories/conqat/trunk/lib/org.conqat.lib.scanner/grammars/mtext.flex</tt>
 */
class MTextScanner implements ILenientScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\3\1\0\1\4\1\2\22\0\1\26\1\74\1\100"+
    "\1\53\1\1\3\0\1\103\1\104\1\54\1\0\1\73\1\101\1\5"+
    "\1\102\1\55\6\45\3\55\1\77\1\76\1\60\1\56\1\57\1\75"+
    "\1\0\1\17\1\42\1\10\1\6\1\14\1\30\1\24\1\27\1\20"+
    "\1\47\1\43\1\16\1\22\1\21\1\23\1\12\1\52\1\41\1\7"+
    "\1\44\1\25\1\40\1\50\1\15\1\13\1\51\3\0\1\0\1\46"+
    "\1\0\1\63\1\67\1\71\1\105\1\34\1\36\1\72\1\105\1\61"+
    "\2\105\1\33\1\64\1\35\1\37\1\65\1\105\1\70\1\62\1\31"+
    "\1\66\3\105\1\32\1\105\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\5\1\1\6"+
    "\1\7\1\1\1\10\1\11\1\12\2\1\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\26\0\1\25\1\12\1\26\1\27\1\11\2\1\1\7"+
    "\2\30\1\1\1\0\2\1\50\0\1\31\1\0\1\31"+
    "\23\0\1\32\1\1\2\33\6\1\1\34\10\0\1\31"+
    "\1\0\1\35\1\36\11\0\1\31\3\0\7\1\2\34"+
    "\4\0\1\31\10\0\7\1\7\34\6\0\1\31\1\0"+
    "\1\1\1\37\3\1\1\40\1\41\7\34\11\0\1\42"+
    "\1\43\1\1\1\44\1\45\2\34\7\0\1\46\2\34"+
    "\4\0\5\34\3\0\5\34\2\0\5\34\1\0\4\34"+
    "\1\0\3\34\1\0\3\34\1\0\4\34";

  private static int [] zzUnpackAction() {
    int [] result = new int[290];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\322\0\u0118\0\322\0\u015e"+
    "\0\u01a4\0\u01ea\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\106"+
    "\0\u038e\0\u03d4\0\u041a\0\u0460\0\322\0\322\0\322\0\322"+
    "\0\322\0\106\0\322\0\322\0\322\0\322\0\u04a6\0\u04ec"+
    "\0\u0532\0\u0578\0\u05be\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c"+
    "\0\u0762\0\u07a8\0\u07ee\0\u0834\0\u087a\0\u08c0\0\u0906\0\u094c"+
    "\0\u0992\0\u09d8\0\u0a1e\0\u0a64\0\106\0\106\0\106\0\106"+
    "\0\106\0\u0aaa\0\u0af0\0\u0b36\0\u0348\0\u0b7c\0\u0bc2\0\u0c08"+
    "\0\u0c4e\0\u0c94\0\u0cda\0\u0d20\0\u0d66\0\u0dac\0\u0df2\0\u0e38"+
    "\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068"+
    "\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298"+
    "\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6\0\u143c\0\u1482\0\u14c8"+
    "\0\u150e\0\u1554\0\u159a\0\u15e0\0\u1626\0\u166c\0\u16b2\0\u16f8"+
    "\0\u173e\0\u1784\0\322\0\u17ca\0\u0f0a\0\u1810\0\u1856\0\u189c"+
    "\0\u18e2\0\u1928\0\u196e\0\u19b4\0\u19fa\0\u1a40\0\u1a86\0\u1acc"+
    "\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc"+
    "\0\106\0\u1d42\0\106\0\322\0\u1d88\0\u1dce\0\u1e14\0\u1e5a"+
    "\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\u208a"+
    "\0\u20d0\0\u2116\0\u215c\0\u21a2\0\u21e8\0\322\0\322\0\u222e"+
    "\0\u2274\0\u22ba\0\u2300\0\u2346\0\u238c\0\u23d2\0\u2418\0\u245e"+
    "\0\u24a4\0\u24ea\0\u2530\0\u2576\0\u25bc\0\u2602\0\u2648\0\u268e"+
    "\0\u26d4\0\u271a\0\u2760\0\u27a6\0\u27ec\0\u2832\0\u2878\0\u28be"+
    "\0\u2904\0\u294a\0\u2990\0\u29d6\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee"+
    "\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8\0\u2d1e"+
    "\0\u2d64\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2\0\u2f08\0\u2f4e"+
    "\0\u2f94\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u30f2\0\u3138\0\u317e"+
    "\0\u31c4\0\106\0\u320a\0\u3250\0\u3296\0\106\0\106\0\u32dc"+
    "\0\u3322\0\u3368\0\u33ae\0\u33f4\0\u343a\0\u3480\0\u34c6\0\u350c"+
    "\0\u3552\0\u3598\0\u35de\0\u3624\0\u366a\0\u36b0\0\u36f6\0\106"+
    "\0\106\0\u373c\0\106\0\u3782\0\u37c8\0\u380e\0\u3854\0\u389a"+
    "\0\u38e0\0\u3926\0\u396c\0\u39b2\0\u39f8\0\106\0\u3a3e\0\u3a84"+
    "\0\u3aca\0\u3b10\0\u3b56\0\u3b9c\0\u3be2\0\u3c28\0\u3c6e\0\u3cb4"+
    "\0\u3cfa\0\u3d40\0\u3d86\0\u3dcc\0\u3e12\0\u3e58\0\u3e9e\0\u3ee4"+
    "\0\u3f2a\0\u3f70\0\u3fb6\0\u3ffc\0\u4042\0\u4088\0\u40ce\0\u4114"+
    "\0\u415a\0\u41a0\0\u41e6\0\u422c\0\u4272\0\u42b8\0\u42fe\0\u4344"+
    "\0\u438a\0\u43d0\0\u4416\0\u445c\0\u44a2\0\u44e8\0\u452e\0\u4574"+
    "\0\u45ba\0\u4600";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[290];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\3\2\1\7\2\2"+
    "\1\10\1\2\1\11\2\2\1\12\2\2\1\13\1\2"+
    "\1\7\6\2\1\14\7\2\1\15\5\2\1\16\1\17"+
    "\1\15\1\20\1\21\1\22\1\23\1\24\10\2\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\3\2\4\0\3\2\1\0\14\2\1\0\44\2"+
    "\5\0\1\2\4\0\1\2\3\0\1\4\216\0\1\37"+
    "\1\40\1\41\1\0\1\42\1\0\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\0"+
    "\1\55\1\56\10\0\1\57\1\60\1\61\1\62\3\0"+
    "\1\63\1\64\34\0\2\2\4\0\3\2\1\0\14\2"+
    "\1\0\23\2\1\20\20\2\5\0\1\2\4\0\3\2"+
    "\4\0\3\2\1\0\2\2\1\65\11\2\1\0\15\2"+
    "\1\66\26\2\5\0\1\2\4\0\3\2\4\0\3\2"+
    "\1\0\2\2\1\67\1\2\1\70\7\2\1\0\1\65"+
    "\43\2\5\0\1\2\4\0\3\2\4\0\3\2\1\0"+
    "\2\2\1\70\11\2\1\0\15\2\1\71\26\2\5\0"+
    "\1\2\4\0\3\2\4\0\3\2\1\0\14\2\1\0"+
    "\10\2\1\72\26\2\1\73\4\2\5\0\1\2\4\0"+
    "\3\2\4\0\3\2\1\0\14\2\1\0\16\2\1\15"+
    "\7\2\1\15\15\2\5\0\1\2\4\0\2\2\1\16"+
    "\4\0\3\16\1\0\14\16\1\0\24\16\2\2\1\16"+
    "\3\2\12\16\5\0\1\2\1\74\3\0\1\16\1\2"+
    "\1\75\4\0\3\75\1\0\14\75\1\0\24\75\2\2"+
    "\1\75\3\2\12\75\5\0\1\2\1\76\3\0\1\75"+
    "\2\2\4\0\3\2\1\0\14\2\1\0\27\2\1\70"+
    "\14\2\5\0\1\2\4\0\3\2\4\0\3\77\1\0"+
    "\14\77\1\0\17\77\1\2\4\77\2\2\1\77\1\65"+
    "\1\67\1\2\12\77\5\0\1\2\2\100\2\0\1\77"+
    "\2\2\4\0\3\2\1\0\14\2\1\0\33\2\1\101"+
    "\10\2\5\0\1\2\4\0\3\2\4\0\3\2\1\0"+
    "\14\2\1\0\2\2\1\102\41\2\5\0\1\2\4\0"+
    "\1\2\7\0\1\103\4\0\1\104\3\0\1\105\2\0"+
    "\1\106\1\0\1\107\14\0\1\110\1\0\1\105\47\0"+
    "\1\111\3\0\1\112\1\113\1\114\1\0\1\113\1\0"+
    "\1\115\4\0\1\116\16\0\1\117\3\0\1\120\1\0"+
    "\1\121\47\0\1\122\1\0\1\123\1\124\3\0\1\125"+
    "\3\0\1\126\10\0\1\121\54\0\1\127\6\0\1\130"+
    "\1\131\1\0\1\132\1\0\1\133\1\123\1\134\2\0"+
    "\1\121\10\0\1\135\6\0\1\136\44\0\1\134\1\137"+
    "\4\0\1\107\1\140\2\0\1\141\1\0\1\142\15\0"+
    "\1\121\2\0\1\143\53\0\1\144\107\0\1\113\2\0"+
    "\1\145\1\113\1\111\1\0\1\146\70\0\1\147\3\0"+
    "\1\105\3\0\1\150\2\0\1\151\17\0\1\152\1\133"+
    "\55\0\1\153\6\0\1\152\1\154\5\0\1\155\63\0"+
    "\1\144\5\0\1\156\6\0\2\134\70\0\1\157\7\0"+
    "\1\143\1\0\1\134\1\0\1\160\1\0\1\144\70\0"+
    "\1\144\30\0\1\155\60\0\1\134\6\0\1\134\15\0"+
    "\1\161\53\0\1\162\1\134\103\0\1\121\4\0\1\107"+
    "\110\0\1\163\1\0\1\164\2\0\1\165\15\0\1\123"+
    "\2\0\1\113\3\0\1\141\60\0\1\156\1\116\70\0"+
    "\1\123\1\161\6\0\1\166\3\0\1\167\15\0\1\170"+
    "\60\0\1\171\100\0\1\107\1\156\3\0\1\172\1\173"+
    "\1\0\1\174\3\0\1\175\15\0\1\134\63\0\1\176"+
    "\1\177\6\0\1\200\101\0\1\113\62\0\2\2\4\0"+
    "\3\2\1\0\14\2\1\0\2\2\1\201\41\2\5\0"+
    "\1\2\4\0\3\2\4\0\3\2\1\0\14\2\1\0"+
    "\35\2\1\202\6\2\5\0\1\2\4\0\1\2\1\0"+
    "\1\74\4\0\3\74\1\0\14\74\1\0\24\74\2\0"+
    "\1\74\3\0\12\74\6\0\1\74\3\0\1\74\1\0"+
    "\1\76\4\0\3\76\1\0\14\76\1\0\24\76\2\0"+
    "\1\76\3\0\12\76\6\0\1\76\3\0\1\76\2\2"+
    "\4\0\3\77\1\0\14\77\1\0\17\77\1\2\4\77"+
    "\2\2\1\77\1\2\1\203\1\2\12\77\5\0\1\2"+
    "\2\100\2\0\1\77\6\0\3\100\1\0\14\100\1\0"+
    "\17\100\1\0\4\100\2\0\1\100\1\0\1\204\1\0"+
    "\12\100\6\0\2\100\2\0\1\100\2\2\4\0\1\205"+
    "\2\2\1\0\2\2\1\206\4\2\1\207\4\2\1\0"+
    "\1\2\1\210\13\2\1\211\26\2\5\0\1\2\4\0"+
    "\3\2\4\0\3\2\1\0\14\2\1\0\41\2\1\212"+
    "\2\2\5\0\1\2\4\0\1\2\10\0\1\213\105\0"+
    "\1\153\31\0\1\214\103\0\1\153\66\0\1\215\76\0"+
    "\1\153\111\0\1\153\22\0\1\153\63\0\1\153\76\0"+
    "\1\153\5\0\1\216\110\0\1\153\74\0\1\217\30\0"+
    "\1\220\2\0\1\153\62\0\1\153\27\0\1\153\76\0"+
    "\1\153\56\0\1\221\10\0\1\153\3\0\1\153\10\0"+
    "\1\153\1\0\1\153\62\0\1\222\126\0\1\153\62\0"+
    "\1\144\2\0\1\153\106\0\1\153\72\0\1\223\7\0"+
    "\1\153\75\0\1\153\2\0\1\153\3\0\1\153\2\0"+
    "\1\224\1\153\126\0\1\153\113\0\1\153\53\0\1\225"+
    "\112\0\1\153\14\0\1\153\3\0\1\226\105\0\1\227"+
    "\47\0\1\153\142\0\1\153\64\0\1\153\20\0\1\153"+
    "\47\0\1\153\11\0\1\153\115\0\1\153\12\0\1\153"+
    "\51\0\1\153\6\0\1\153\75\0\1\153\146\0\1\153"+
    "\53\0\1\153\106\0\1\153\102\0\1\230\26\0\1\153"+
    "\53\0\1\153\13\0\1\153\23\0\1\153\43\0\1\153"+
    "\10\0\1\153\106\0\1\153\73\0\1\153\12\0\1\153"+
    "\74\0\1\153\114\0\1\231\4\0\1\153\131\0\1\153"+
    "\61\0\1\153\16\0\1\153\50\0\1\232\31\0\1\153"+
    "\75\0\1\153\71\0\1\133\115\0\1\153\75\0\1\233"+
    "\1\234\111\0\1\153\17\0\1\235\53\0\1\236\113\0"+
    "\1\153\26\0\1\153\55\0\1\237\104\0\1\153\107\0"+
    "\1\240\106\0\1\153\25\0\1\153\3\0\1\153\77\0"+
    "\1\241\51\0\1\242\3\0\1\153\137\0\1\243\105\0"+
    "\1\244\61\0\1\221\65\0\2\2\4\0\3\2\1\0"+
    "\14\2\1\0\5\2\1\245\36\2\5\0\1\2\4\0"+
    "\3\2\4\0\3\2\1\0\14\2\1\0\34\2\1\246"+
    "\7\2\5\0\1\2\4\0\3\2\4\0\3\2\1\0"+
    "\14\2\1\0\35\2\1\247\6\2\5\0\1\2\4\0"+
    "\3\2\4\0\3\2\1\0\14\2\1\0\37\2\1\250"+
    "\4\2\5\0\1\2\4\0\3\2\4\0\3\2\1\0"+
    "\14\2\1\0\4\2\1\251\37\2\5\0\1\2\4\0"+
    "\3\2\4\0\3\2\1\0\14\2\1\0\32\2\1\252"+
    "\11\2\5\0\1\2\4\0\3\2\4\0\3\2\1\0"+
    "\14\2\1\0\32\2\1\253\11\2\5\0\1\2\4\0"+
    "\1\2\2\254\2\0\5\254\1\255\14\254\1\255\57\254"+
    "\25\0\1\163\74\0\1\256\111\0\1\134\131\0\1\257"+
    "\61\0\1\260\103\0\1\236\133\0\1\261\55\0\1\262"+
    "\135\0\1\263\61\0\1\264\110\0\1\265\106\0\1\236"+
    "\75\0\1\144\107\0\1\266\111\0\1\236\77\0\1\267"+
    "\105\0\1\153\110\0\1\126\132\0\1\270\57\0\1\271"+
    "\112\0\1\153\76\0\1\272\120\0\1\153\56\0\2\2"+
    "\4\0\3\2\1\0\14\2\1\0\41\2\1\273\2\2"+
    "\5\0\1\2\4\0\3\2\4\0\3\2\1\0\14\2"+
    "\1\0\2\2\1\274\41\2\5\0\1\2\4\0\3\2"+
    "\4\0\3\2\1\0\14\2\1\0\36\2\1\275\5\2"+
    "\5\0\1\2\4\0\3\2\4\0\3\2\1\0\14\2"+
    "\1\0\35\2\1\276\6\2\5\0\1\2\4\0\3\2"+
    "\4\0\3\2\1\0\14\2\1\0\10\2\1\277\33\2"+
    "\5\0\1\2\4\0\3\2\4\0\3\2\1\0\14\2"+
    "\1\0\35\2\1\300\6\2\5\0\1\2\4\0\3\2"+
    "\4\0\3\2\1\0\14\2\1\0\6\2\1\301\35\2"+
    "\5\0\1\2\4\0\1\2\2\254\2\0\104\254\2\0"+
    "\2\254\1\302\1\303\1\254\1\255\2\254\1\304\1\254"+
    "\1\305\5\254\1\306\1\254\1\255\14\254\1\307\1\310"+
    "\41\254\22\0\1\311\103\0\1\64\104\0\1\144\76\0"+
    "\1\244\143\0\1\312\57\0\1\313\106\0\1\314\111\0"+
    "\1\134\66\0\1\315\116\0\1\261\116\0\1\316\71\0"+
    "\1\317\132\0\1\320\44\0\2\2\4\0\3\2\1\0"+
    "\14\2\1\0\32\2\1\321\11\2\5\0\1\2\4\0"+
    "\3\2\4\0\3\2\1\0\14\2\1\0\5\2\1\322"+
    "\36\2\5\0\1\2\4\0\3\2\4\0\3\2\1\0"+
    "\14\2\1\0\2\2\1\323\41\2\5\0\1\2\4\0"+
    "\3\2\4\0\3\2\1\0\14\2\1\0\40\2\1\324"+
    "\3\2\5\0\1\2\4\0\3\2\4\0\3\2\1\0"+
    "\14\2\1\0\34\2\1\325\7\2\5\0\1\2\4\0"+
    "\3\2\4\0\3\2\1\0\14\2\1\0\5\2\1\326"+
    "\36\2\5\0\1\2\4\0\3\2\4\0\3\2\1\0"+
    "\14\2\1\0\43\2\1\327\5\0\1\2\4\0\1\2"+
    "\2\254\2\0\6\254\1\330\75\254\2\0\10\254\1\331"+
    "\27\254\1\332\43\254\2\0\11\254\1\333\72\254\2\0"+
    "\14\254\1\334\67\254\2\0\21\254\1\335\62\254\2\0"+
    "\10\254\1\330\73\254\2\0\10\254\1\336\71\254\23\0"+
    "\1\337\70\0\1\340\120\0\1\341\130\0\1\342\105\0"+
    "\1\343\102\0\1\344\73\0\1\345\1\346\77\0\1\347"+
    "\63\0\2\2\4\0\3\2\1\0\14\2\1\0\42\2"+
    "\1\350\1\2\5\0\1\2\4\0\3\2\4\0\3\2"+
    "\1\0\14\2\1\0\3\2\1\351\40\2\5\0\1\2"+
    "\4\0\3\2\4\0\3\2\1\0\14\2\1\0\5\2"+
    "\1\352\36\2\5\0\1\2\4\0\3\2\4\0\3\2"+
    "\1\0\14\2\1\0\2\2\1\353\41\2\5\0\1\2"+
    "\4\0\1\2\2\254\2\0\7\254\1\354\74\254\2\0"+
    "\40\254\1\354\43\254\2\0\20\254\1\354\63\254\2\0"+
    "\6\254\1\355\75\254\2\0\36\254\1\354\45\254\2\0"+
    "\14\254\1\356\67\254\2\0\11\254\1\331\70\254\6\0"+
    "\1\357\113\0\1\360\116\0\1\236\74\0\1\361\104\0"+
    "\1\362\111\0\1\234\102\0\1\363\114\0\1\364\101\0"+
    "\1\365\66\0\2\2\4\0\3\2\1\0\14\2\1\0"+
    "\41\2\1\366\2\2\5\0\1\2\4\0\1\2\3\354"+
    "\1\0\102\354\2\254\2\0\12\254\1\367\71\254\2\0"+
    "\22\254\1\370\57\254\14\0\1\371\121\0\1\372\72\0"+
    "\1\134\102\0\1\236\112\0\1\373\111\0\1\374\123\0"+
    "\1\126\44\0\2\254\2\0\13\254\1\375\70\254\2\0"+
    "\3\254\1\376\12\254\1\377\4\254\1\u0100\10\254\1\u0101"+
    "\45\254\16\0\1\u0102\106\0\1\u0103\74\0\1\u0104\143\0"+
    "\1\u0104\41\0\2\254\2\0\14\254\1\u0105\67\254\2\0"+
    "\25\254\1\u0106\56\254\2\0\17\254\1\u0107\64\254\2\0"+
    "\14\254\1\u0108\67\254\2\0\13\254\1\u0109\66\254\23\0"+
    "\1\u010a\107\0\1\u010b\74\0\1\121\71\0\2\254\2\0"+
    "\15\254\1\u010c\66\254\2\0\26\254\1\u010d\55\254\2\0"+
    "\2\254\1\u010e\101\254\2\0\2\254\1\u010f\101\254\2\0"+
    "\35\254\1\u0110\44\254\12\0\1\u0111\111\0\1\134\67\0"+
    "\2\254\2\0\16\254\1\u0112\65\254\2\0\27\254\1\u0113"+
    "\54\254\2\0\10\254\1\u0114\73\254\2\0\10\254\1\354"+
    "\73\254\2\0\14\254\1\u0115\65\254\44\0\1\u0116\41\0"+
    "\2\254\2\0\17\254\1\u0108\64\254\2\0\30\254\1\u0117"+
    "\53\254\2\0\12\254\1\u0118\71\254\2\0\13\254\1\u0119"+
    "\66\254\20\0\1\u011a\65\0\2\254\2\0\14\254\1\u011b"+
    "\67\254\2\0\14\254\1\u011c\67\254\2\0\36\254\1\u011d"+
    "\43\254\23\0\1\u011e\62\0\2\254\2\0\31\254\1\u011f"+
    "\52\254\2\0\15\254\1\u0120\66\254\2\0\12\254\1\u010f"+
    "\67\254\21\0\1\133\64\0\2\254\2\0\32\254\1\u0121"+
    "\51\254\2\0\24\254\1\u0122\57\254\2\0\33\254\1\354"+
    "\50\254\2\0\17\254\1\354\62\254";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17990];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\2\11\1\1\1\11\15\1\5\11\1\1"+
    "\4\11\26\0\13\1\1\0\2\1\50\0\1\11\1\0"+
    "\1\1\23\0\3\1\1\11\7\1\10\0\1\1\1\0"+
    "\2\11\11\0\1\1\3\0\11\1\4\0\1\1\10\0"+
    "\16\1\6\0\1\1\1\0\16\1\11\0\7\1\7\0"+
    "\3\1\4\0\5\1\3\0\5\1\2\0\5\1\1\0"+
    "\4\1\1\0\3\1\1\0\3\1\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[290];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	/**
	 * This comment is needed for the test that checks if all token types
	 * defined in ETokenType are actually used by a scanner. The test checks the
	 * literal occurrence of each token type's name in the source code of the
	 * generated scanners. Since this scanner uses ETokenType.valueOf(...) for
	 * many tokens, the test fails because the token types' names are not found
	 * in this scanner's source code. To fix this, this comment lists all tokens
	 * that may be created using ETokenType.valueOf(...). This comment is copied
	 * to the generated scanner and everybody is happy.
	 *
	 * ABS ADA ADD ALI AND ANN APV ARC BASE BCF BOT BOX BREAK BSM CAA CASE CASE
	 * CASE_DEFAULT CELL CEN CHK CLM COL COM CON CONTINUE COP COS CVR DBL DBR
	 * DEBUG DEC DIV DONEMODELOPTIONS DTV DUP ECF ECK ELL ELS END EOJ ERR EST
	 * ETX EXP FIELDTYPE FIXME FLG FON FOREACH FRM FTN FWD GET GOT GRF HDR HYP
	 * IF IFN IMAGE IMG INC IP KEY LAB LAYOUT LEN LIN LNA LOC LOG LOW MAX MNT
	 * MODEL MOV MSG MSK MUL NDL NEW NGT NOT OCL OR ORN PAG PAR PFR PGM
	 * PLAINTEXT POS PRO PRT PSZ PUT PWD PWI RGB ROW SDA SECTION SERIAL SET SIN
	 * SIZ SLN SPC SPLIT SQR STF STG STK STR STYLE SUB SWITCH SYN TAB TABLE
	 * TABLEFOOTER TABLEHEADER TCW TEXTFRAME TODO TOP TRT TSP TXL TXT TXW UCT
	 * USES WATERMARK WHILE WITH XPL ZON
	 */
	 
    /** Identifier for the tokens' origin. */
  	private String originId;
  
  	/** {@inheritDoc} */
  	@Override  
  	public void reset(java.io.Reader reader, String originId) {
    	this.originId = originId;
    	yyreset(reader);
  	}
  
  	/** {@inheritDoc} */
  	@Override
  	public void close() throws java.io.IOException {
    	yyclose();
  	}
  
  	/** Create a token with the given type from the scanned text. */  
  	private MTextToken createToken (ETokenType type) {
		return new MTextToken(type, yychar, yyline, yytext(), originId);
  	}
  
    /** 
     * Creates a token for a command that has been scanned. The scanned text
     * without the first character (the '.') is used to retrieve the token's
     * type.
     */  
    private MTextToken createCommandToken() {
        String typeName = yytext().substring(1);
        try {
            ETokenType type = ETokenType.valueOf(typeName);
            return createToken(type);
        } catch (IllegalArgumentException e) {
            System.err.println("No value for '" + typeName + "' in ETokenType.");
        }
        return createToken(ETokenType.IDENTIFIER);
    }
  
    /**
     * Creates a token for a DSC command. The text that has been scanned starts
     * with ".DSC" but has more characters after that (otherwise we would not be
     * able to distinguish between comments and commands). This method creates a
     * token for the .DSC part and pushes all other characters back to the
     * stream.
     */  
    private MTextToken createDSCCommandToken() {
        yypushback(yytext().length() - 4);
        return new MTextToken(ETokenType.DSC, yychar, yyline,
            yytext().substring(0, 4), originId);
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MTextScanner(java.io.Reader in, String originId) {
  	this.originId = originId;
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  MTextScanner(java.io.InputStream in, String originId) {
    this(new java.io.InputStreamReader(in), originId);
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public MTextToken getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { return createToken(ETokenType.INTEGER_LITERAL);
          }
        case 39: break;
        case 20: 
          { return createToken(ETokenType.RPAREN);
          }
        case 40: break;
        case 34: 
          { return createToken(ETokenType.NUMERIC);
          }
        case 41: break;
        case 25: 
          { return createCommandToken();
          }
        case 42: break;
        case 23: 
          { return createToken(ETokenType.GTEQ);
          }
        case 43: break;
        case 18: 
          { return createToken(ETokenType.SLASH);
          }
        case 44: break;
        case 28: 
          { return createToken(ETokenType.END_OF_LINE_COMMENT);
          }
        case 45: break;
        case 8: 
          { return createToken(ETokenType.EQ);
          }
        case 46: break;
        case 31: 
          { return createToken(ETokenType.IS_DATE);
          }
        case 47: break;
        case 36: 
          { return createToken(ETokenType.IS_FLOAT);
          }
        case 48: break;
        case 2: 
          { return createToken(ETokenType.EOL);
          }
        case 49: break;
        case 29: 
          { return createToken(ETokenType.PAN);
          }
        case 50: break;
        case 15: 
          { return createToken(ETokenType.COLON);
          }
        case 51: break;
        case 5: 
          { /* Ignore */
          }
        case 52: break;
        case 24: 
          { return createToken(ETokenType.VARIABLE);
          }
        case 53: break;
        case 32: 
          { return createToken(ETokenType.IS_TIME);
          }
        case 54: break;
        case 19: 
          { return createToken(ETokenType.LPAREN);
          }
        case 55: break;
        case 17: 
          { return createToken(ETokenType.MINUS);
          }
        case 56: break;
        case 1: 
          { return createToken(ETokenType.WORD);
          }
        case 57: break;
        case 4: 
          { return createToken(ETokenType.DOT);
          }
        case 58: break;
        case 30: 
          { return createToken(ETokenType.PNN);
          }
        case 59: break;
        case 27: 
          { return createToken(ETokenType.MARKUP);
          }
        case 60: break;
        case 9: 
          { return createToken(ETokenType.GT);
          }
        case 61: break;
        case 22: 
          { return createToken(ETokenType.NOTEQ);
          }
        case 62: break;
        case 10: 
          { return createToken(ETokenType.LT);
          }
        case 63: break;
        case 35: 
          { return createToken(ETokenType.IS_EMPTY);
          }
        case 64: break;
        case 21: 
          { return createToken(ETokenType.LTEQ);
          }
        case 65: break;
        case 16: 
          { return createToken(ETokenType.QUOTE);
          }
        case 66: break;
        case 11: 
          { return createToken(ETokenType.COMMA);
          }
        case 67: break;
        case 7: 
          { return createToken(ETokenType.CALL);
          }
        case 68: break;
        case 37: 
          { return createDSCCommandToken();
          }
        case 69: break;
        case 38: 
          { return createToken(ETokenType.IS_NUMBER);
          }
        case 70: break;
        case 12: 
          { return createToken(ETokenType.EXCLAMATION);
          }
        case 71: break;
        case 33: 
          { return createToken(ETokenType.STRING);
          }
        case 72: break;
        case 26: 
          { return createToken(ETokenType.NOT);
          }
        case 73: break;
        case 3: 
          { yyline -= 1;
          }
        case 74: break;
        case 13: 
          { return createToken(ETokenType.QUESTION);
          }
        case 75: break;
        case 14: 
          { return createToken(ETokenType.SEMICOLON);
          }
        case 76: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return createToken(ETokenType.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
