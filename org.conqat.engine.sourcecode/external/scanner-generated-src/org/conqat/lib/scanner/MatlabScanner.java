/* The following code was generated by JFlex 1.4.2 on {{TIMESTAMP}} */

/*
   This scanner is based on

   - Pramod G. Joisha, Abhay Kanhere, Prithviraj Banerjee, U. Nagaraj Shenoy, Alok Choudhary:
     The Design and Implementation of a Parser and Scanner for the MATLAB Language in the MATCH Compiler
   - The MathWorks: MATLAB 7 Programming Fundamentals
     http://www.mathworks.com/help/techdoc/matlab_product_page2.html
   - own experiments
   - http://de.mathworks.com/help/matlab/index.html

 */

package org.conqat.lib.scanner;

import java.util.EnumSet;
import java.util.Arrays;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on {{TIMESTAMP}} from the specification file
 * <tt>/home/freakout/cqse/repositories/conqat/trunk/lib/org.conqat.lib.scanner/grammars/matlab.flex</tt>
 */
class MatlabScanner implements ILenientScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\16\1\2\1\0\1\17\1\1\22\0\1\16\1\64\3\0"+
    "\1\13\1\61\1\20\1\65\1\66\1\50\1\47\1\71\1\4\1\6"+
    "\1\51\12\3\1\53\1\72\1\55\1\56\1\57\1\0\1\10\3\11"+
    "\2\5\25\11\1\67\1\52\1\70\1\54\1\12\1\0\1\24\1\21"+
    "\1\26\1\33\1\23\1\34\1\43\1\31\1\37\1\7\1\25\1\32"+
    "\1\41\1\36\1\35\1\45\1\11\1\22\1\27\1\30\1\40\1\42"+
    "\1\44\1\63\1\46\1\11\1\14\1\62\1\15\1\60\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\15\5\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\5\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\2\42\1\43\4\0\1\44"+
    "\1\45\2\0\1\46\1\47\1\50\1\51\1\52\4\10"+
    "\16\5\1\53\6\5\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\5\1\41\1\44\1\0\1\13\3\10\3\5"+
    "\1\62\10\5\1\63\1\64\10\5\1\65\1\13\2\0"+
    "\2\5\1\66\2\5\1\67\4\5\1\70\10\5\1\71"+
    "\1\72\4\5\1\73\7\5\1\74\3\5\1\75\1\76"+
    "\1\5\1\77\2\5\1\100\3\5\1\101\2\5\1\102"+
    "\5\5\1\103\3\5\1\104\1\105\1\106\4\5\1\107"+
    "\3\5\1\110\1\111\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\354\0\u0162"+
    "\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\354\0\354\0\354"+
    "\0\354\0\354\0\u02c4\0\u02ff\0\u033a\0\u0375\0\u03b0\0\u03eb"+
    "\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588\0\u019d"+
    "\0\354\0\354\0\354\0\354\0\354\0\u05c3\0\u05fe\0\u0639"+
    "\0\u0674\0\u06af\0\u06ea\0\u0725\0\354\0\354\0\354\0\354"+
    "\0\354\0\354\0\354\0\u0760\0\u079b\0\354\0\u07d6\0\u0811"+
    "\0\354\0\u084c\0\u0887\0\u08c2\0\354\0\u08fd\0\u0938\0\354"+
    "\0\354\0\354\0\354\0\354\0\u0973\0\u09ae\0\354\0\u09e9"+
    "\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1"+
    "\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u01d8\0\u0d5e"+
    "\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\354\0\354\0\354"+
    "\0\354\0\354\0\354\0\u0ec0\0\354\0\u0efb\0\u0f36\0\u0f71"+
    "\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u01d8\0\u110e"+
    "\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u01d8"+
    "\0\u01d8\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448"+
    "\0\u1483\0\u01d8\0\u14be\0\u0fe7\0\u14f9\0\u1534\0\u156f\0\u15aa"+
    "\0\u15e5\0\u1620\0\u01d8\0\u165b\0\u1696\0\u16d1\0\u170c\0\u01d8"+
    "\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4"+
    "\0\354\0\u01d8\0\u191f\0\u195a\0\u1995\0\u19d0\0\u01d8\0\u1a0b"+
    "\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u01d8\0\u1ba8"+
    "\0\u1be3\0\u1c1e\0\u01d8\0\u01d8\0\u1c59\0\u01d8\0\u1c94\0\u1ccf"+
    "\0\u01d8\0\u1d0a\0\u1d45\0\u1d80\0\u01d8\0\u1dbb\0\u1df6\0\u01d8"+
    "\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u01d8\0\u1f58\0\u1f93"+
    "\0\u1fce\0\u01d8\0\u01d8\0\u01d8\0\u2009\0\u2044\0\u207f\0\u20ba"+
    "\0\u01d8\0\u20f5\0\u2130\0\u216b\0\u01d8\0\u01d8\0\u01d8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\12"+
    "\1\14\1\12\1\5\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\2\12\1\26\1\27\1\30"+
    "\3\12\1\31\1\32\1\12\1\33\1\12\1\34\1\12"+
    "\1\35\1\36\1\37\1\12\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\15\64\1\67\52\64\13\0\1\70"+
    "\60\0\1\71\1\72\165\0\1\7\73\0\1\10\1\0"+
    "\1\73\1\74\1\75\13\0\1\73\7\0\1\73\3\0"+
    "\1\75\36\0\1\10\2\0\1\76\67\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\12\6\0\26\12\14\0"+
    "\1\12\12\0\1\74\2\0\1\77\11\0\1\100\27\0"+
    "\1\101\1\102\1\103\1\0\1\104\23\0\1\12\1\0"+
    "\1\12\1\0\1\12\7\0\26\12\14\0\1\12\7\0"+
    "\1\105\1\106\1\107\11\105\1\110\56\105\3\0\1\12"+
    "\1\0\1\12\1\0\1\12\1\0\2\12\6\0\1\12"+
    "\1\111\24\12\14\0\1\12\12\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\0\2\12\6\0\2\12\1\112\23\12"+
    "\14\0\1\12\12\0\1\12\1\0\1\12\1\0\1\12"+
    "\1\0\2\12\6\0\11\12\1\113\3\12\1\114\3\12"+
    "\1\115\4\12\14\0\1\12\12\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\0\2\12\6\0\3\12\1\116\5\12"+
    "\1\117\2\12\1\120\11\12\14\0\1\12\12\0\1\12"+
    "\1\0\1\12\1\0\1\12\1\0\2\12\6\0\23\12"+
    "\1\121\1\122\1\12\14\0\1\12\12\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\12\6\0\1\12\1\123"+
    "\24\12\14\0\1\12\12\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\6\0\14\12\1\124\2\12\1\125"+
    "\6\12\14\0\1\12\12\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\6\0\7\12\1\126\16\12\14\0"+
    "\1\12\12\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\2\12\6\0\13\12\1\127\12\12\14\0\1\12\12\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\2\12\6\0"+
    "\2\12\1\130\23\12\14\0\1\12\12\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\12\6\0\11\12\1\131"+
    "\14\12\14\0\1\12\12\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\6\0\10\12\1\132\15\12\14\0"+
    "\1\12\12\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\2\12\6\0\1\12\1\133\1\134\1\135\22\12\14\0"+
    "\1\12\65\0\1\136\72\0\1\137\72\0\1\140\72\0"+
    "\1\141\75\0\1\142\73\0\1\143\13\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\12\6\0\14\12\1\144"+
    "\11\12\14\0\1\12\7\0\1\64\2\0\15\64\1\0"+
    "\52\64\2\0\1\66\110\0\1\145\52\0\1\70\2\0"+
    "\70\70\1\0\1\71\74\0\1\146\1\147\42\0\1\147"+
    "\26\0\1\74\1\0\1\73\1\0\1\75\13\0\1\73"+
    "\7\0\1\73\3\0\1\75\36\0\1\74\75\0\1\150"+
    "\64\0\1\105\1\106\1\107\70\105\2\0\1\107\70\0"+
    "\1\110\1\151\1\152\10\110\1\153\57\110\3\0\1\12"+
    "\1\0\1\12\1\0\1\12\1\0\2\12\6\0\2\12"+
    "\1\154\23\12\14\0\1\12\12\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\0\2\12\6\0\7\12\1\155\16\12"+
    "\14\0\1\12\12\0\1\12\1\0\1\12\1\0\1\12"+
    "\1\0\2\12\6\0\6\12\1\156\17\12\14\0\1\12"+
    "\12\0\1\12\1\0\1\12\1\0\1\12\1\0\2\12"+
    "\6\0\12\12\1\157\4\12\1\160\6\12\14\0\1\12"+
    "\12\0\1\12\1\0\1\12\1\0\1\12\1\0\2\12"+
    "\6\0\2\12\1\161\23\12\14\0\1\12\12\0\1\12"+
    "\1\0\1\12\1\0\1\12\1\0\2\12\6\0\6\12"+
    "\1\162\1\163\16\12\14\0\1\12\12\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\12\6\0\3\12\1\164"+
    "\22\12\14\0\1\12\12\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\6\0\15\12\1\165\10\12\14\0"+
    "\1\12\12\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\2\12\6\0\16\12\1\166\7\12\14\0\1\12\12\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\2\12\6\0"+
    "\20\12\1\167\5\12\14\0\1\12\12\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\12\6\0\25\12\1\170"+
    "\14\0\1\12\12\0\1\12\1\0\1\12\1\0\1\12"+
    "\1\0\2\12\6\0\1\12\1\171\24\12\14\0\1\12"+
    "\12\0\1\12\1\0\1\12\1\0\1\12\1\0\2\12"+
    "\6\0\15\12\1\172\10\12\14\0\1\12\12\0\1\12"+
    "\1\0\1\12\1\0\1\12\1\0\2\12\6\0\10\12"+
    "\1\173\15\12\14\0\1\12\12\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\0\2\12\6\0\7\12\1\174\16\12"+
    "\14\0\1\12\12\0\1\12\1\0\1\12\1\0\1\12"+
    "\1\0\2\12\6\0\14\12\1\175\11\12\14\0\1\12"+
    "\12\0\1\12\1\0\1\12\1\0\1\12\1\0\2\12"+
    "\6\0\16\12\1\176\7\12\14\0\1\12\12\0\1\12"+
    "\1\0\1\12\1\0\1\12\1\0\2\12\6\0\14\12"+
    "\1\177\11\12\14\0\1\12\12\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\0\2\12\6\0\1\12\1\200\24\12"+
    "\14\0\1\12\12\0\1\12\1\0\1\12\1\0\1\12"+
    "\1\0\2\12\6\0\1\12\1\201\24\12\14\0\1\12"+
    "\12\0\1\12\1\0\1\12\1\0\1\12\1\0\2\12"+
    "\6\0\1\12\1\202\24\12\14\0\1\12\12\0\1\146"+
    "\3\0\1\75\27\0\1\75\36\0\1\146\67\0\1\150"+
    "\1\203\1\20\14\150\1\0\53\150\2\204\1\152\10\204"+
    "\1\205\72\204\1\205\57\204\1\110\1\151\1\152\10\110"+
    "\1\153\1\110\1\105\55\110\3\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\0\2\12\6\0\3\12\1\206\22\12"+
    "\14\0\1\12\12\0\1\12\1\0\1\12\1\0\1\12"+
    "\1\0\2\12\6\0\17\12\1\207\6\12\14\0\1\12"+
    "\12\0\1\12\1\0\1\12\1\0\1\12\1\0\2\12"+
    "\6\0\2\12\1\210\23\12\14\0\1\12\12\0\1\12"+
    "\1\0\1\12\1\0\1\12\1\0\2\12\6\0\20\12"+
    "\1\211\5\12\14\0\1\12\12\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\0\2\12\6\0\15\12\1\212\10\12"+
    "\14\0\1\12\12\0\1\12\1\0\1\12\1\0\1\12"+
    "\1\0\2\12\6\0\2\12\1\213\23\12\14\0\1\12"+
    "\12\0\1\12\1\0\1\12\1\0\1\12\1\0\2\12"+
    "\6\0\5\12\1\214\20\12\14\0\1\12\12\0\1\12"+
    "\1\0\1\12\1\0\1\12\1\0\2\12\6\0\6\12"+
    "\1\215\17\12\14\0\1\12\12\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\0\2\12\6\0\7\12\1\216\16\12"+
    "\14\0\1\12\12\0\1\12\1\0\1\12\1\0\1\12"+
    "\1\0\2\12\6\0\7\12\1\217\16\12\14\0\1\12"+
    "\12\0\1\12\1\0\1\12\1\0\1\12\1\0\2\12"+
    "\6\0\12\12\1\220\13\12\14\0\1\12\12\0\1\12"+
    "\1\0\1\12\1\0\1\12\1\0\2\12\6\0\5\12"+
    "\1\221\20\12\14\0\1\12\12\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\0\2\12\6\0\2\12\1\222\23\12"+
    "\14\0\1\12\12\0\1\12\1\0\1\12\1\0\1\12"+
    "\1\0\2\12\6\0\10\12\1\223\15\12\14\0\1\12"+
    "\12\0\1\12\1\0\1\12\1\0\1\12\1\0\2\12"+
    "\6\0\1\224\25\12\14\0\1\12\12\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\12\6\0\11\12\1\225"+
    "\14\12\14\0\1\12\12\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\6\0\24\12\1\226\1\12\14\0"+
    "\1\12\12\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\2\12\6\0\6\12\1\227\17\12\14\0\1\12\12\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\2\12\6\0"+
    "\13\12\1\230\12\12\14\0\1\12\11\0\1\20\70\0"+
    "\13\204\1\205\1\204\1\231\55\204\3\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\12\6\0\4\12\1\232"+
    "\21\12\14\0\1\12\12\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\6\0\1\12\1\233\24\12\14\0"+
    "\1\12\12\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\2\12\6\0\16\12\1\234\7\12\14\0\1\12\12\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\2\12\6\0"+
    "\2\12\1\235\23\12\14\0\1\12\12\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\12\6\0\7\12\1\236"+
    "\16\12\14\0\1\12\12\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\6\0\10\12\1\237\15\12\14\0"+
    "\1\12\12\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\2\12\6\0\6\12\1\240\17\12\14\0\1\12\12\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\2\12\6\0"+
    "\16\12\1\241\7\12\14\0\1\12\12\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\12\6\0\5\12\1\242"+
    "\20\12\14\0\1\12\12\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\6\0\7\12\1\243\16\12\14\0"+
    "\1\12\12\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\2\12\6\0\1\12\1\244\24\12\14\0\1\12\12\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\2\12\6\0"+
    "\14\12\1\245\11\12\14\0\1\12\12\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\12\6\0\3\12\1\246"+
    "\22\12\14\0\1\12\12\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\6\0\2\12\1\247\23\12\14\0"+
    "\1\12\12\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\2\12\6\0\2\12\1\250\23\12\14\0\1\12\12\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\2\12\6\0"+
    "\16\12\1\251\7\12\14\0\1\12\12\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\12\6\0\14\12\1\252"+
    "\11\12\14\0\1\12\12\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\6\0\15\12\1\253\10\12\14\0"+
    "\1\12\12\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\2\12\6\0\13\12\1\254\12\12\14\0\1\12\12\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\2\12\6\0"+
    "\1\12\1\255\24\12\14\0\1\12\12\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\12\6\0\6\12\1\256"+
    "\17\12\14\0\1\12\12\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\6\0\12\12\1\257\13\12\14\0"+
    "\1\12\12\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\2\12\6\0\15\12\1\260\10\12\14\0\1\12\12\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\2\12\6\0"+
    "\10\12\1\261\15\12\14\0\1\12\12\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\12\6\0\16\12\1\262"+
    "\7\12\14\0\1\12\12\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\6\0\23\12\1\263\2\12\14\0"+
    "\1\12\12\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\2\12\6\0\12\12\1\264\13\12\14\0\1\12\12\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\2\12\6\0"+
    "\11\12\1\265\14\12\14\0\1\12\12\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\12\6\0\1\12\1\266"+
    "\24\12\14\0\1\12\12\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\6\0\6\12\1\267\17\12\14\0"+
    "\1\12\12\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\2\12\6\0\1\12\1\270\24\12\14\0\1\12\12\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\2\12\6\0"+
    "\3\12\1\271\22\12\14\0\1\12\12\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\12\6\0\2\12\1\272"+
    "\23\12\14\0\1\12\12\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\6\0\17\12\1\273\6\12\14\0"+
    "\1\12\12\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\2\12\6\0\14\12\1\274\11\12\14\0\1\12\12\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\2\12\6\0"+
    "\16\12\1\275\7\12\14\0\1\12\12\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\12\6\0\6\12\1\276"+
    "\17\12\14\0\1\12\12\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\6\0\7\12\1\277\16\12\14\0"+
    "\1\12\12\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\2\12\6\0\7\12\1\300\16\12\14\0\1\12\12\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\2\12\6\0"+
    "\7\12\1\301\16\12\14\0\1\12\12\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\12\6\0\13\12\1\302"+
    "\12\12\14\0\1\12\12\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\6\0\2\12\1\303\23\12\14\0"+
    "\1\12\12\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\2\12\6\0\15\12\1\304\10\12\14\0\1\12\12\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\2\12\6\0"+
    "\6\12\1\305\17\12\14\0\1\12\12\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\12\6\0\16\12\1\306"+
    "\7\12\14\0\1\12\12\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\6\0\2\12\1\307\23\12\14\0"+
    "\1\12\12\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\2\12\6\0\16\12\1\310\7\12\14\0\1\12\12\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\2\12\6\0"+
    "\2\12\1\311\23\12\14\0\1\12\12\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\12\6\0\2\12\1\312"+
    "\23\12\14\0\1\12\12\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\6\0\15\12\1\313\10\12\14\0"+
    "\1\12\12\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\2\12\6\0\14\12\1\314\11\12\14\0\1\12\12\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\2\12\6\0"+
    "\6\12\1\315\17\12\14\0\1\12\12\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\12\6\0\7\12\1\316"+
    "\16\12\14\0\1\12\12\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\6\0\15\12\1\317\10\12\14\0"+
    "\1\12\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8614];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\1\11\1\1\1\11\6\1\5\11\16\1"+
    "\5\11\7\1\7\11\2\1\1\11\2\1\1\11\1\1"+
    "\1\0\1\1\1\11\2\0\5\11\2\1\1\11\26\1"+
    "\6\11\1\1\1\11\1\1\1\0\34\1\2\0\23\1"+
    "\1\11\66\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
  /** This set is used to determine if a single quote character starts a string or is a complex
      transpose operator. */
  private static final EnumSet<ETokenType> TRANSPOSE_TYPES = EnumSet
			.copyOf(Arrays.asList(ETokenType.INTEGER_LITERAL,
					ETokenType.FLOATING_POINT_LITERAL,
					ETokenType.IMAGINARY_LITERAL, ETokenType.IDENTIFIER,
					ETokenType.TRANSPOSE, ETokenType.COMPLEX_TRANSPOSE,
					ETokenType.RBRACK, ETokenType.RPAREN));

  private StringBuilder string = new StringBuilder();

  private String originId;

  private ETokenType lastTokenType;

  private int braceDepth;
  
  private int brackDepth;

  private boolean whiteSpaceSinceLastToken=false;

  /**
   * Resets scanner.
   */
  public void reset(java.io.Reader reader, String originId) {
    this.originId = originId;
    lastTokenType = null;
    braceDepth = 0;
    brackDepth = 0;
    whiteSpaceSinceLastToken = false;
    yyreset(reader);
  }

  /**
   * {@inheritDoc}
   */
  public void close() throws java.io.IOException {
    yyclose();
  }

  private MatlabToken token(ETokenType type) {
  	return new MatlabToken(type, yychar, yyline, yytext(), originId);
  }

   /**
   * Wrapper to store last token.
   */
  public MatlabToken getNextToken() throws java.io.IOException {
  	MatlabToken token = yyGetNextToken();
  	lastTokenType=token.getType();
  	whiteSpaceSinceLastToken=false;
  	return token;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MatlabScanner(java.io.Reader in, String originId) {
  	this.originId = originId;
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  MatlabScanner(java.io.InputStream in, String originId) {
    this(new java.io.InputStreamReader(in), originId);
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 138) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public MatlabToken yyGetNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 70: 
          { return token(ETokenType.FUNCTION);
          }
        case 75: break;
        case 63: 
          { return token(ETokenType.EVENTS);
          }
        case 76: break;
        case 53: 
          { return token(ETokenType.XOR);
          }
        case 77: break;
        case 68: 
          { return token(ETokenType.CLASSDEF);
          }
        case 78: break;
        case 39: 
          { return token(ETokenType.MULT);
          }
        case 79: break;
        case 49: 
          { return token(ETokenType.OROR);
          }
        case 80: break;
        case 38: 
          { return token(ETokenType.TRANSPOSE);
          }
        case 81: break;
        case 17: 
          { return token(ETokenType.MATRIX_LEFT_DIV);
          }
        case 82: break;
        case 32: 
          { if (braceDepth > 0 || brackDepth > 0) {
            return token(ETokenType.ARRAY_SEPARATOR); 
        } else {
            return token(ETokenType.SEMICOLON);
        }
          }
        case 83: break;
        case 54: 
          { return token(ETokenType.ELSE);
          }
        case 84: break;
        case 37: 
          { return token(ETokenType.IMAGINARY_LITERAL);
          }
        case 85: break;
        case 67: 
          { return token(ETokenType.METHODS);
          }
        case 86: break;
        case 12: 
          { yyline -= 1;
          }
        case 87: break;
        case 11: 
          { whiteSpaceSinceLastToken=true;
          }
        case 88: break;
        case 34: 
          { yybegin(YYINITIAL);
                                   return new MatlabToken(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()+1, yyline, string.toString(), originId);
          }
        case 89: break;
        case 7: 
          { return token(ETokenType.AT);
          }
        case 90: break;
        case 46: 
          { return token(ETokenType.GTEQ);
          }
        case 91: break;
        case 26: 
          { return token(ETokenType.EXCLAMATION);
          }
        case 92: break;
        case 41: 
          { return token(ETokenType.LEFT_DIV);
          }
        case 93: break;
        case 48: 
          { return token(ETokenType.ANDAND);
          }
        case 94: break;
        case 35: 
          { yybegin(YYINITIAL); string.append(yytext());
                                   return new MatlabToken(ETokenType.STRING_LITERAL, yychar-string.length()+1, yyline, string.toString(), originId);
          }
        case 95: break;
        case 5: 
          { return token(ETokenType.IDENTIFIER);
          }
        case 96: break;
        case 61: 
          { return token(ETokenType.RETURN);
          }
        case 97: break;
        case 9: 
          { braceDepth++;
        return token(ETokenType.LBRACE);
          }
        case 98: break;
        case 22: 
          { return token(ETokenType.GT);
          }
        case 99: break;
        case 65: 
          { return token(ETokenType.GLOBAL);
          }
        case 100: break;
        case 1: 
          { return token(ETokenType.ILLEGAL_CHARACTER);
          }
        case 101: break;
        case 72: 
          { return token(ETokenType.PROPERTIES);
          }
        case 102: break;
        case 69: 
          { return token(ETokenType.CONTINUE);
          }
        case 103: break;
        case 66: 
          { return token(ETokenType.PARFOR);
          }
        case 104: break;
        case 21: 
          { return token(ETokenType.EQ);
          }
        case 105: break;
        case 52: 
          { return token(ETokenType.FOR);
          }
        case 106: break;
        case 57: 
          { return token(ETokenType.TRADITIONAL_COMMENT);
          }
        case 107: break;
        case 45: 
          { return token(ETokenType.EQEQ);
          }
        case 108: break;
        case 58: 
          { return token(ETokenType.BREAK);
          }
        case 109: break;
        case 56: 
          { return token(ETokenType.SPMD);
          }
        case 110: break;
        case 10: 
          { braceDepth--;
        return token(ETokenType.RBRACE);
          }
        case 111: break;
        case 14: 
          { return token(ETokenType.PLUS);
          }
        case 112: break;
        case 20: 
          { return token(ETokenType.LT);
          }
        case 113: break;
        case 50: 
          { if (lastTokenType == ETokenType.EOL || lastTokenType == ETokenType.SEMICOLON )
                         return token(ETokenType.END);
                  else return token(ETokenType.IDENTIFIER);
          }
        case 114: break;
        case 3: 
          { return token(ETokenType.INTEGER_LITERAL);
          }
        case 115: break;
        case 28: 
          { return token(ETokenType.RPAREN);
          }
        case 116: break;
        case 29: 
          { brackDepth++;
        return token(ETokenType.LBRACK);
          }
        case 117: break;
        case 19: 
          { return token(ETokenType.MATRIX_POWER);
          }
        case 118: break;
        case 4: 
          { return token(ETokenType.MINUS);
          }
        case 119: break;
        case 25: 
          { return token(ETokenType.OR);
          }
        case 120: break;
        case 51: 
          { return token(ETokenType.TRY);
          }
        case 121: break;
        case 74: 
          { return token(ETokenType.ENUMERATION);
          }
        case 122: break;
        case 30: 
          { brackDepth--;
        return token(ETokenType.RBRACK);
          }
        case 123: break;
        case 71: 
          { return token(ETokenType.OTHERWISE);
          }
        case 124: break;
        case 8: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 2;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 3;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { return token(ETokenType.END_OF_LINE_COMMENT);
          }
        case 125: break;
        case 18: 
          { return token(ETokenType.COLON);
          }
        case 126: break;
        case 6: 
          { return token(ETokenType.DOT);
          }
        case 127: break;
        case 23: 
          { return token(ETokenType.COMP);
          }
        case 128: break;
        case 27: 
          { return token(ETokenType.LPAREN);
          }
        case 129: break;
        case 24: 
          { return token(ETokenType.AND);
          }
        case 130: break;
        case 2: 
          { return token(ETokenType.EOL);
          }
        case 131: break;
        case 62: 
          { return token(ETokenType.ELSEIF);
          }
        case 132: break;
        case 60: 
          { return token(ETokenType.WHILE);
          }
        case 133: break;
        case 15: 
          { return token(ETokenType.MATRIX_MULT);
          }
        case 134: break;
        case 43: 
          { return token(ETokenType.IF);
          }
        case 135: break;
        case 73: 
          { return token(ETokenType.PERSISTENT);
          }
        case 136: break;
        case 16: 
          { return token(ETokenType.MATRIX_RIGHT_DIV);
          }
        case 137: break;
        case 31: 
          { return token(ETokenType.COMMA);
          }
        case 138: break;
        case 59: 
          { return token(ETokenType.CATCH);
          }
        case 139: break;
        case 64: 
          { return token(ETokenType.SWITCH);
          }
        case 140: break;
        case 33: 
          { string.append( yytext() );
          }
        case 141: break;
        case 55: 
          { return token(ETokenType.CASE);
          }
        case 142: break;
        case 47: 
          { return token(ETokenType.NOTEQ);
          }
        case 143: break;
        case 36: 
          { return token(ETokenType.FLOATING_POINT_LITERAL);
          }
        case 144: break;
        case 42: 
          { return token(ETokenType.POWER);
          }
        case 145: break;
        case 13: 
          { //this also work if lastTokenType is null
        if (TRANSPOSE_TYPES.contains(lastTokenType) && !whiteSpaceSinceLastToken) {
    	    return token(ETokenType.COMPLEX_TRANSPOSE);
        }

        //start string
        yybegin(STRING); string.setLength(0); string.append(yytext());
          }
        case 146: break;
        case 44: 
          { return token(ETokenType.LTEQ);
          }
        case 147: break;
        case 40: 
          { return token(ETokenType.RIGHT_DIV);
          }
        case 148: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case STRING: {
              yybegin(YYINITIAL);
                                   return new MatlabToken(ETokenType.UNTERMINATED_STRING_LITERAL, yychar-string.length()+1, yyline, string.toString(), originId);
            }
            case 208: break;
            default:
              {
                return token(ETokenType.EOF);
              }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
