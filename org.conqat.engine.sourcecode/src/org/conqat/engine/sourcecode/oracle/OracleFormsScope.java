/*-------------------------------------------------------------------------+
|                                                                          |
| Copyright 2005-2011 The ConQAT Project                                   |
|                                                                          |
| Licensed under the Apache License, Version 2.0 (the "License");          |
| you may not use this file except in compliance with the License.         |
| You may obtain a copy of the License at                                  |
|                                                                          |
|    http://www.apache.org/licenses/LICENSE-2.0                            |
|                                                                          |
| Unless required by applicable law or agreed to in writing, software      |
| distributed under the License is distributed on an "AS IS" BASIS,        |
| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
| See the License for the specific language governing permissions and      |
| limitations under the License.                                           |
+-------------------------------------------------------------------------*/
package org.conqat.engine.sourcecode.oracle;

import java.util.ArrayList;
import java.util.List;

import org.conqat.engine.commons.ConQATParamDoc;
import org.conqat.engine.commons.ConQATProcessorBase;
import org.conqat.engine.core.core.AConQATAttribute;
import org.conqat.engine.core.core.AConQATParameter;
import org.conqat.engine.core.core.AConQATProcessor;
import org.conqat.engine.core.core.ConQATException;
import org.conqat.engine.resource.IContentAccessor;
import org.conqat.engine.resource.scope.memory.InMemoryContentAccessor;
import org.conqat.engine.resource.text.ITextElement;
import org.conqat.engine.resource.text.ITextResource;
import org.conqat.engine.resource.util.ResourceTraversalUtils;
import org.conqat.engine.resource.util.TextElementXMLReader;
import org.conqat.lib.commons.collections.CollectionUtils;
import org.conqat.lib.commons.error.NeverThrownRuntimeException;
import org.conqat.lib.commons.filesystem.FileSystemUtils;
import org.conqat.lib.commons.string.StringUtils;
import org.conqat.lib.commons.xml.IXMLElementProcessor;

/**
 * {@ConQAT.Doc}
 * 
 * @author $Author: kinnen $
 * @version $Rev: 41751 $
 * @ConQAT.Rating GREEN Hash: 714D6D92620918921DAAA8F71C9AEE13
 */
@AConQATProcessor(description = "This scope allows to access the PL/SQL code stored in Oracle Forms "
		+ "documents. These documents have to be converted from the binary FMB files to "
		+ "XML files with the Oracle FORMS2XML tool. For each program unit stored in the XML, this "
		+ "scope creates a separate content accessor. This scope keeps all program units in "
		+ "memory. The byte array provided by the content accessors are encoded with UTF8 "
		+ "no matter what the encoding of the input XML was.")
public class OracleFormsScope extends ConQATProcessorBase {

	/** Oracle forms elements. */
	private final List<ITextElement> elements = new ArrayList<ITextElement>();

	/** {@ConQAT.Doc} */
	@AConQATParameter(name = "oracle-forms-xml", minOccurrences = 1, description = "A resource hierarchy whose elements "
			+ "describe Oracle forms files (converted to XML).")
	public void addResource(
			@AConQATAttribute(name = ConQATParamDoc.INPUT_REF_NAME, description = ConQATParamDoc.INPUT_REF_DESC) ITextResource resource) {

		elements.addAll(ResourceTraversalUtils.listTextElements(resource));
	}

	/** {@inheritDoc} */
	@Override
	public IContentAccessor[] process() throws ConQATException {
		if (elements.isEmpty()) {
			throw new ConQATException("No input files provided via parameters!");
		}

		List<IContentAccessor> result = new ArrayList<IContentAccessor>();
		for (ITextElement element : elements) {
			new OracleFormsReader(element, result).read();
		}
		return CollectionUtils.toArray(result, IContentAccessor.class);
	}

	/** XML reader for XML files generated by Oracle's FORMS2XML tool. */
	private class OracleFormsReader
			extends
			TextElementXMLReader<EOracleFormsElement, EOracleFormsAttribute, NeverThrownRuntimeException> {

		/** List of accessors the individual accessors are added to. */
		private final List<IContentAccessor> accessors;

		/** Constructor. */
		public OracleFormsReader(ITextElement element,
				List<IContentAccessor> accessors) throws ConQATException {
			super(element, EOracleFormsAttribute.class);
			this.accessors = accessors;
		}

		/** Read Oracle froms XML file. */
		public void read() throws ConQATException {
			parseAndWrapExceptions();
			processDecendantElements(new ProgramUnitProcessor());
		}

		/** XML processor for program unit elements. */
		public class ProgramUnitProcessor
				implements
				IXMLElementProcessor<EOracleFormsElement, NeverThrownRuntimeException> {

			/** {@inheritDoc} */
			@Override
			public EOracleFormsElement getTargetElement() {
				return EOracleFormsElement.ProgramUnit;
			}

			/** {@inheritDoc} */
			@Override
			public void process() {
				String name = getStringAttribute(EOracleFormsAttribute.Name);
				String type = getStringAttribute(EOracleFormsAttribute.ProgramUnitType);
				String code = getStringAttribute(EOracleFormsAttribute.ProgramUnitText);

				String uniformPath = element.getUniformPath() + "/" + name
						+ "[" + type + "]";

				if (StringUtils.isEmpty(name) || StringUtils.isEmpty(type)
						|| StringUtils.isEmpty(code)) {
					// we construct this even if information is missing to
					// support error location
					getLogger().warn(
							"Could not read program unit: " + uniformPath
									+ " from element " + element.getLocation());
					return;
				}

				code = cleanLineBreaks(code);

				accessors.add(new InMemoryContentAccessor(uniformPath, code
						.getBytes(FileSystemUtils.UTF8_CHARSET)));
			}

			/**
			 * Clean up the line breaks in the code string.
			 */
			private String cleanLineBreaks(String code) {
				// for some reason Oracle doubly escape the line breaks, i.e. in
				// the XML they are stored as "&amp;#10;". This code converts
				// them back to line breaks.
				code = code.replaceAll("&#10;", "\n");

				// just to be sure, there might be other line breaks
				return StringUtils.replaceLineBreaks(code, "\n");
			}
		}
	}
}