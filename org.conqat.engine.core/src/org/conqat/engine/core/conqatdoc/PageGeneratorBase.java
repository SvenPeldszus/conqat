/*-------------------------------------------------------------------------+
|                                                                          |
| Copyright 2005-2011 The ConQAT Project                                   |
|                                                                          |
| Licensed under the Apache License, Version 2.0 (the "License");          |
| you may not use this file except in compliance with the License.         |
| You may obtain a copy of the License at                                  |
|                                                                          |
|    http://www.apache.org/licenses/LICENSE-2.0                            |
|                                                                          |
| Unless required by applicable law or agreed to in writing, software      |
| distributed under the License is distributed on an "AS IS" BASIS,        |
| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
| See the License for the specific language governing permissions and      |
| limitations under the License.                                           |
+-------------------------------------------------------------------------*/
package org.conqat.engine.core.conqatdoc;

import static org.conqat.lib.commons.html.EHTMLAttribute.HREF;
import static org.conqat.lib.commons.html.EHTMLAttribute.REL;
import static org.conqat.lib.commons.html.EHTMLAttribute.TYPE;
import static org.conqat.lib.commons.html.EHTMLElement.HEAD;
import static org.conqat.lib.commons.html.EHTMLElement.LINK;
import static org.conqat.lib.commons.html.EHTMLElement.TITLE;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;

import org.conqat.engine.core.ConQATInfo;
import org.conqat.engine.core.driver.error.DriverException;
import org.conqat.lib.commons.date.DateUtils;
import org.conqat.lib.commons.graph.EGraphvizOutputFormat;
import org.conqat.lib.commons.html.EHTMLElement;
import org.conqat.lib.commons.html.HTMLWriter;
import org.conqat.lib.commons.string.StringUtils;

/**
 * Base class for page generating classes. This class contains both common
 * constants as well as shared code.
 * 
 * @author $Author: kinnen $
 * @version $Rev: 41751 $
 * @ConQAT.Rating GREEN Hash: 6E2BEE4879E2D62909DDFD2B67A540DC
 */
public abstract class PageGeneratorBase {

	/** The name of the stylesheet used. */
	public static final String STYLESHEET_NAME = "conqatdoc.css";

	/** The image format used for all generated graphs. */
	public static final EGraphvizOutputFormat GRAPH_FORMAT = EGraphvizOutputFormat.PNG;

	/** The directory to generate the documentation into. */
	private final File targetDirectory;

	/** This is the writer to be used by the generating page. */
	protected HTMLWriter pageWriter;

	/** Create new documentation generator. */
	protected PageGeneratorBase(File targetDirectory) {
		this.targetDirectory = targetDirectory;
	}

	/** Perform the generation of the page into a file. */
	public void generate() throws IOException, DriverException {
		pageWriter = new HTMLWriter(getFile(getPageName()),
				ConQATDocCSSMananger.getInstance());
		doGenerate(false);
	}

	/** Perform the generation of the page into a string. */
	public String generateAsString(boolean inlineCSS) throws IOException,
			DriverException {
		StringWriter stringWriter = new StringWriter();
		pageWriter = new HTMLWriter(new PrintWriter(stringWriter),
				ConQATDocCSSMananger.getInstance());
		doGenerate(inlineCSS);
		return stringWriter.toString();
	}

	/** Performs generation using the (previously set up) {@link #pageWriter}. */
	private void doGenerate(boolean inlineCSS) throws IOException,
			DriverException {
		pageWriter.addComment("Generated by ConQATDoc "
				+ ConQATInfo.CORE_VERSION + " @ " + DateUtils.getNow());
		pageWriter.openElement(HEAD);
		pageWriter.addClosedTextElement(TITLE, getPageName());
		if (inlineCSS) {
			pageWriter.openElement(EHTMLElement.STYLE);
			pageWriter.addComment(getInlineCSS());
			pageWriter.closeElement(EHTMLElement.STYLE);
		} else {
			pageWriter.addClosedElement(LINK, REL, "stylesheet", TYPE,
					"text/css", HREF, STYLESHEET_NAME);
		}
		pageWriter.closeElement(HEAD);
		appendBody();
		pageWriter.close();
	}

	/** Returns the inline CSS elements. */
	private String getInlineCSS() {
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		PrintStream ps = new PrintStream(out);
		ConQATDocCSSMananger.getInstance().writeOut(ps);
		ps.close();
		return StringUtils.CR + out.toString() + StringUtils.CR;
	}

	/** Returns the name of the generated page. */
	protected abstract String getPageName();

	/** Returns the title of the generated page. */
	protected abstract String getPageTitle();

	/** Generate the contents of the page. */
	protected abstract void appendBody() throws IOException, DriverException;

	/** Returns a file relative to the target directory. */
	protected File getFile(String filename) {
		return new File(targetDirectory, filename);
	}

	/**
	 * This returns the given string, or if the argument is <code>null</code>
	 * the empty string. This is to protect from <code>null</code> values at
	 * some places.
	 */
	protected static String nullProtect(String string) {
		if (string == null) {
			return StringUtils.EMPTY_STRING;
		}
		return string;
	}
}