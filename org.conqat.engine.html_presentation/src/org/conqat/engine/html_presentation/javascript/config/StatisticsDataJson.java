/*-------------------------------------------------------------------------+
|                                                                          |
| Copyright 2005-2011 the ConQAT Project                                   |
|                                                                          |
| Licensed under the Apache License, Version 2.0 (the "License");          |
| you may not use this file except in compliance with the License.         |
| You may obtain a copy of the License at                                  |
|                                                                          |
|    http://www.apache.org/licenses/LICENSE-2.0                            |
|                                                                          |
| Unless required by applicable law or agreed to in writing, software      |
| distributed under the License is distributed on an "AS IS" BASIS,        |
| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
| See the License for the specific language governing permissions and      |
| limitations under the License.                                           |
+-------------------------------------------------------------------------*/
package org.conqat.engine.html_presentation.javascript.config;

import java.util.Date;
import java.util.Map.Entry;

import org.conqat.engine.core.driver.info.BlockInfo;
import org.conqat.engine.core.driver.instance.EInstanceState;
import org.conqat.engine.core.logging.ConQATLoggingEvent;
import org.conqat.lib.commons.collections.UnmodifiableList;

/**
 * Holds overall statistics data.
 * 
 * @author $Author: hummelb $
 * @version $Rev: 39832 $
 * @ConQAT.Rating GREEN Hash: C1B7B5125B383F9C2CD90A4E3FF0E3AA
 */
public class StatisticsDataJson {

	/** The number of errors generated by the root block and its children. */
	private int errors = 0;

	/** The number of warnings generated by the root block and its children. */
	private int warnings = 0;

	/** The overall execution time of the root block. */
	private final long executionTime;

	/** The last time the dashboard was executed. */
	private final long lastExecution;

	/** The number of processors in the root block and its children. */
	private int numberOfProcessors = 0;

	/** The number of failed processors in the root block and its children. */
	private int numberOfFailedProcessors = 0;

	/** Constructor. */
	public StatisticsDataJson(BlockInfo rootBlock, UnmodifiableList<ConQATLoggingEvent> loggingEvents) {
		for (ConQATLoggingEvent event : loggingEvents) {
			switch (event.getLevel()) {
			case FATAL:
			case ERROR:
				errors++;
				break;
			case WARN:
				warnings++;
				break;
			}
		}

		for (Entry<EInstanceState, Integer> entry : rootBlock
				.getProcessorStateDistribution().entrySet()) {
			numberOfProcessors += entry.getValue();

			EInstanceState state = entry.getKey();
			switch (state) {
			case FAILED_BADLY:
			case FAILED_DUE_TO_CLONING_PROBLEM:
			case FAILED_DUE_TO_MISSING_INPUT:
			case FAILED_GRACEFULLY:
				numberOfFailedProcessors += entry.getValue();
			}
		}

		this.executionTime = rootBlock.getExecutionTime();
		this.lastExecution = new Date().getTime();
	}

	/** Returns errors. */
	public int getErrors() {
		return errors;
	}

	/** Returns warnings. */
	public int getWarnings() {
		return warnings;
	}

	/** Returns executionTime. */
	public long getExecutionTime() {
		return executionTime;
	}

	/** Returns lastExecution. */
	public long getLastExecution() {
		return lastExecution;
	}

	/** Returns numberOfProcessors. */
	public int getNumberOfProcessors() {
		return numberOfProcessors;
	}

	/** Returns numberOfFailedProcessors. */
	public int getNumberOfFailedProcessors() {
		return numberOfFailedProcessors;
	}

}