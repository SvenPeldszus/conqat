/*-------------------------------------------------------------------------+
|                                                                          |
| Copyright 2005-2011 The ConQAT Project                                   |
|                                                                          |
| Licensed under the Apache License, Version 2.0 (the "License");          |
| you may not use this file except in compliance with the License.         |
| You may obtain a copy of the License at                                  |
|                                                                          |
|    http://www.apache.org/licenses/LICENSE-2.0                            |
|                                                                          |
| Unless required by applicable law or agreed to in writing, software      |
| distributed under the License is distributed on an "AS IS" BASIS,        |
| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
| See the License for the specific language governing permissions and      |
| limitations under the License.                                           |
+-------------------------------------------------------------------------*/
package org.conqat.engine.html_presentation.base;

import static org.conqat.engine.commons.css.CSSMananger.DEFAULT_FONT;
import static org.conqat.engine.commons.css.CSSMananger.INLINED_IMAGE;
import static org.conqat.engine.commons.css.CSSMananger.TABLE_CELL;
import static org.conqat.lib.commons.color.ECCSMColor.LIGHT_GRAY;
import static org.conqat.lib.commons.html.ECSSProperty.BACKGROUND_COLOR;
import static org.conqat.lib.commons.html.ECSSProperty.PADDING_BOTTOM;
import static org.conqat.lib.commons.html.ECSSProperty.PADDING_LEFT;
import static org.conqat.lib.commons.html.ECSSProperty.PADDING_TOP;
import static org.conqat.lib.commons.html.EHTMLAttribute.CHECKED;
import static org.conqat.lib.commons.html.EHTMLAttribute.CLASS;
import static org.conqat.lib.commons.html.EHTMLAttribute.ID;
import static org.conqat.lib.commons.html.EHTMLAttribute.SRC;
import static org.conqat.lib.commons.html.EHTMLAttribute.TYPE;
import static org.conqat.lib.commons.html.EHTMLElement.DIV;
import static org.conqat.lib.commons.html.EHTMLElement.IMG;
import static org.conqat.lib.commons.html.EHTMLElement.INPUT;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.conqat.engine.core.logging.ConQATLoggingEvent;
import org.conqat.engine.core.logging.ELogLevel;
import org.conqat.engine.core.logging.LogManager;
import org.conqat.engine.html_presentation.HTMLPresentation;
import org.conqat.engine.html_presentation.IPageDescriptor;
import org.conqat.engine.html_presentation.PageDescriptor;
import org.conqat.engine.html_presentation.javascript.config.ConfigJSModule;
import org.conqat.engine.html_presentation.util.ResourcesManager;
import org.conqat.lib.commons.collections.CollectionUtils;
import org.conqat.lib.commons.collections.CounterSet;
import org.conqat.lib.commons.collections.Pair;
import org.conqat.lib.commons.html.CSSDeclarationBlock;
import org.conqat.lib.commons.html.HTMLWriter;

/**
 * This class creates an {@link IPageDescriptor} based on the information
 * provided by the {@link LogManager}.
 * 
 * The page is merely a skeleton which is filled using JavaScript from the JSON
 * files generated by the {@link ConfigJSONWriter}.
 * 
 * @author $Author: kinnen $
 * @version $Rev: 49983 $
 * @ConQAT.Rating GREEN Hash: BDF8C972F516D5AAA397DCFC852302C9
 */
public class LoggingPagesGenerator {

	/** CSS for legend. */
	private static CSSDeclarationBlock LEGEND = new CSSDeclarationBlock(
			DEFAULT_FONT, PADDING_LEFT, "13px", PADDING_TOP, "3px",
			PADDING_BOTTOM, "3px", BACKGROUND_COLOR,
			LIGHT_GRAY.getHTMLColorCode());

	/** CSS for even rows. */
	public static CSSDeclarationBlock EVEN_ROW = new CSSDeclarationBlock(
			TABLE_CELL, BACKGROUND_COLOR, ColorConstants.TABLE_CELL_EVEN);

	/** CSS for odd rows. */
	public static CSSDeclarationBlock ODD_ROW = new CSSDeclarationBlock(
			TABLE_CELL, BACKGROUND_COLOR, ColorConstants.TABLE_CELL_ODD);

	/** The log manager that provides the logging events. */
	private final LogManager logManager;

	/** Create new logging pages factory. */
	public LoggingPagesGenerator(LogManager logManager) {
		this.logManager = logManager;
	}

	/** Create and return logging page. */
	public IPageDescriptor createPage() {
		List<ConQATLoggingEvent> allEvents = new ArrayList<ConQATLoggingEvent>(
				logManager.getLoggingEvents());

		Pair<String, String> titleAndIcon = getLogTitleAndIcon(allEvents);
		PageDescriptor page = new PageDescriptor(
				"All log messages generated during ConQAT run.",
				titleAndIcon.getFirst(), HTMLPresentation.INFO_GROUP_NAME,
				null, titleAndIcon.getSecond(), "log.html");
		createPageContent(page.getWriter());
		return page;
	}

	/**
	 * Returns the title and icon name to be used for this page based on the
	 * worst log level encountered.
	 */
	private Pair<String, String> getLogTitleAndIcon(
			List<ConQATLoggingEvent> allEvents) {
		CounterSet<ELogLevel> levels = new CounterSet<ELogLevel>();
		for (ConQATLoggingEvent event : allEvents) {
			levels.inc(event.getLevel());
		}

		String result = "Log";
		String icon = "logs.gif";

		// only interested in log levels worse than INFO in the given order
		for (ELogLevel level : Arrays.asList(ELogLevel.FATAL, ELogLevel.ERROR,
				ELogLevel.WARN)) {
			if (levels.getValue(level) != 0) {
				result += " (" + levels.getValue(level) + ")";
				icon = getIconName(level);
				break;
			}
		}

		return new Pair<String, String>(result, icon);
	}

	/** Creates the log page. */
	private void createPageContent(HTMLWriter writer) {
		appendLegend(writer);
		writer.insertJavaScript(ConfigJSModule.installCSSClassNames());

		writer.insertEmptyElement(DIV, ID, "log-table");
		writer.insertEmptyElement(DIV, ID, "parameters-table");

		writer.addExternalJavaScript(ConfigJSONWriter.LOG_JSON);
		writer.addExternalJavaScript(ConfigJSONWriter.CONFIG_JSON);

		writer.insertJavaScript(ConfigJSModule.installLog());
	}

	/** Add legend describing the icons to the page. */
	private void appendLegend(HTMLWriter writer) {
		writer.openElement(DIV, CLASS, LEGEND);

		for (ELogLevel level : CollectionUtils.reverse(ELogLevel
				.getProperLogLevels())) {
			if (level == ELogLevel.ALL) {
				continue;
			}

			writer.addClosedElement(INPUT, TYPE, "checkbox", CHECKED, "checked");
			writer.insertJavaScript(ConfigJSModule.installCheckboxFilter(level
					.name().toLowerCase()));

			writer.addClosedElement(IMG, SRC,
					ResourcesManager.IMAGES_DIRECTORY_NAME + "/"
							+ getIconName(level), CLASS, INLINED_IMAGE);
			writer.addText(" " + level.name());

			writer.addNonBreakingSpace();
			writer.addNonBreakingSpace();
		}
		writer.closeElement(DIV);
	}

	/** Determine icon name for log event. */
	private String getIconName(ELogLevel level) {
		switch (level) {
		case DEBUG:
			return "log_debug.gif";
		case WARN:
			return "log_warn.gif";
		case ERROR:
			return "log_error.gif";
		case INFO:
			return "log_info.gif";
		case FATAL:
			return "log_fatal.gif";
		default:
			return "unknown.gif";
		}
	}
}