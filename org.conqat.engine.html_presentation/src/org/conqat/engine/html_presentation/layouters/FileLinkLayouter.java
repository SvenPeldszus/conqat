/*-------------------------------------------------------------------------+
|                                                                          |
| Copyright 2005-2011 The ConQAT Project                                   |
|                                                                          |
| Licensed under the Apache License, Version 2.0 (the "License");          |
| you may not use this file except in compliance with the License.         |
| You may obtain a copy of the License at                                  |
|                                                                          |
|    http://www.apache.org/licenses/LICENSE-2.0                            |
|                                                                          |
| Unless required by applicable law or agreed to in writing, software      |
| distributed under the License is distributed on an "AS IS" BASIS,        |
| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
| See the License for the specific language governing permissions and      |
| limitations under the License.                                           |
+-------------------------------------------------------------------------*/
package org.conqat.engine.html_presentation.layouters;

import java.io.File;
import java.io.IOException;

import org.conqat.engine.core.core.AConQATAttribute;
import org.conqat.engine.core.core.AConQATFieldParameter;
import org.conqat.engine.core.core.AConQATParameter;
import org.conqat.engine.core.core.AConQATProcessor;
import org.conqat.engine.core.core.ConQATException;
import org.conqat.engine.html_presentation.util.LayouterBase;
import org.conqat.lib.commons.filesystem.FileSystemUtils;
import org.conqat.lib.commons.html.EHTMLAttribute;
import org.conqat.lib.commons.html.EHTMLElement;
import org.conqat.lib.commons.string.StringUtils;

/**
 * {@ConQAT.Doc}
 * 
 * @author juergens
 * @author $Author: kinnen $
 * @version $Rev: 41751 $
 * @ConQAT.Rating GREEN Hash: 28FF14DA689E04A0D2B73AC1DAA04414
 */
@AConQATProcessor(description = "Creates a page that contains a link to a file. "
		+ "Can e.g. be used to make reports generated by ConQAT available to download.")
public class FileLinkLayouter extends LayouterBase {

	/** Name of the icon file. */
	private static final String PAGE_ICON_NAME = "file.gif";

	/** File to which link gets generated */
	private File targetFile;

	/** Caption of link */
	private String caption;

	/** Output directory. */
	private File outputDirectory;

	/** Optional HTML text inserted before link */
	private String htmlBefore;

	/** Optional HTML text inserted behind link */
	private String htmlAfter;

	/** {@ConQAT.Doc} */
	@AConQATFieldParameter(parameter = "copy", attribute = "to-output", optional = true, description = "If set, file gets copied into output folder. Link is then set to copy.")
	public boolean copy;

	/** {@ConQAT.Doc} */
	@AConQATParameter(name = "output", minOccurrences = 1, maxOccurrences = 1, description = "Output parameters")
	public void setOutputDirectory(
			@AConQATAttribute(name = "dir", description = "Name of the output directory.") String dir) {
		outputDirectory = new File(dir);
	}

	/** {@ConQAT.Doc} */
	@AConQATParameter(name = "link", description = "Link information", minOccurrences = 1, maxOccurrences = 1)
	public void setLink(
			@AConQATAttribute(name = "file", description = "File to which link points") File targetFile,
			@AConQATAttribute(name = "caption", description = "Caption of link") String caption) {
		this.targetFile = targetFile;
		this.caption = caption;
	}

	/** {@ConQAT.Doc} */
	@AConQATParameter(name = "before", description = "Html text inserted before link", minOccurrences = 0, maxOccurrences = 1)
	public void setHtmlBefore(
			@AConQATAttribute(name = "html", description = "Is inserted as part of the body. Must thus be valid HTML and not contain HTML or BODY tags.") String htmlBefore) {
		this.htmlBefore = htmlBefore;
	}

	/** {@ConQAT.Doc} */
	@AConQATParameter(name = "after", description = "Html text inserted after link", minOccurrences = 0, maxOccurrences = 1)
	public void setHtmlBehind(
			@AConQATAttribute(name = "html", description = "Is inserted as part of the body. Must thus be valid HTML and not contain HTML or BODY tags.") String htmlAfter) {
		this.htmlAfter = htmlAfter;
	}

	/** {@inheritDoc} */
	@Override
	protected String getIconName() {
		return PAGE_ICON_NAME;
	}

	/** {@inheritDoc} */
	@Override
	protected void layoutPage() throws ConQATException {
		writeHtml(htmlBefore);

		if (copy) {
			targetFile = copyToOutputDir(targetFile);
		}

		writer.openElement(EHTMLElement.A, EHTMLAttribute.HREF,
				relativePathToTargetFile());
		writer.addText(caption);
		writer.closeElement(EHTMLElement.A);

		writeHtml(htmlAfter);
	}

	/**
	 * Copies the targetFile into the output directory, if it does not already
	 * exist.
	 */
	private File copyToOutputDir(File file) throws ConQATException {
		File newTargetFile = new File(outputDirectory, file.getName());
		
		// skip if the file is already placed in the output folder
		if (newTargetFile.getAbsoluteFile().equals(file.getAbsoluteFile())) {
			return newTargetFile;
		}
		
		try {
			if (!newTargetFile.exists() || fileOlderThanRun(newTargetFile)) {
				FileSystemUtils.copyFile(file, newTargetFile);
				return newTargetFile;
			}

			// we silently ignore the copy order, if the file exists with
			// the same content
			if (FileSystemUtils.contentsEqual(newTargetFile, file)) {
				return newTargetFile;
			}

			// this file was modified during this run but was a different
			// content. If we copy, we overwrite it. If not, our data is lost.
			// This is very likely a configuration bug.
			throw new ConQATException(
					"Could not copy file "
							+ targetFile
							+ " to output folder: There already is a file with the same name but different content. Is this a configuration bug?");

		} catch (IOException e) {
			throw new ConQATException(
					"Problem copying file to output directory: ", e);
		}
	}

	/**
	 * Determines whether the last modification time of a file is older than the
	 * analysis run.
	 */
	private boolean fileOlderThanRun(File file) {
		long runDuration = getProcessorInfo().getConfigurationInformation()
				.getExecutionTime();
		long now = System.currentTimeMillis();
		long start = now - runDuration;

		return file.lastModified() < start;
	}

	/** Computes the relative path from the output directory to the target file */
	private String relativePathToTargetFile() throws ConQATException {
		try {
			String relativePath = FileSystemUtils.createRelativePath(targetFile
					.getParentFile(), outputDirectory);

			if (FileSystemUtils.isAbsolutePath(relativePath)) {
				throw new ConQATException(
						"Could not create a relative path from "
								+ outputDirectory + " to " + targetFile);
			}

			if (StringUtils.isEmpty(relativePath)) {
				return targetFile.getName();
			}

			return relativePath + "/" + targetFile.getName();
		} catch (IOException e) {
			throw new ConQATException(
					"Could not create relative path to target file:", e);
		}
	}

	/** Writes html, if it is not empty */
	private void writeHtml(String html) {
		if (!StringUtils.isEmpty(html)) {
			writer.addRawString(html);
		}
	}

}