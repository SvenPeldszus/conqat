<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="http://www.gotdotnet.com/team/fxcop//xsl/1.35/FxCopReport.xsl"?>
<FxCopReport Version="1.35">
 <Namespaces>
  <Namespace Name="Codeblast">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'Codeblast' with another namespace.</Issue>
    </Message>
    <Message Id="Codeblast" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of the unrecognized token 'Codeblast' in namespace 'Codeblast'.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="CP.Windows.Forms">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'CP.Windows.Forms' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="CP.Windows.Shell">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'CP.Windows.Shell' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="NUnit.UiKit">
   <Messages>
    <Message TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="85" Level="Error">Correct the capitalization of 'Ui' in namespace name 'NUnit.UiKit'.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="NUnit.Util">
   <Messages>
    <Message Id="Util" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of the unrecognized token 'Util' in namespace 'NUnit.Util'.</Issue>
    </Message>
   </Messages>
  </Namespace>
 </Namespaces>
 <Targets>
  <Target Name="$(ProjectDir)/../svnccsm/edu.tum.cs.conqat.dotnet/test-data/edu.tum.cs.conqat.dotnet.scope/NUnit_Folder/GuiRunner/nunit-gui/bin/Debug2005/nunit.core.dll">
   <Modules>
    <Module Name="nunit.core.dll">
     <Messages>
      <Message TypeName="MarkAssembliesWithComVisible" Category="Microsoft.Design" CheckId="CA1017" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
       <Issue Name="NoAttribute" Certainty="95" Level="CriticalError">Mark 'nunit.core' as ComVisible(false) at the assembly level, then mark all types within the assembly that should be exposed to Com clients as ComVisible(true).</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="NUnit.Core">
       <Types>
        <Type Name="AbstractTestCaseDecoration" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="CriticalWarning">Change the accessibility of all public constructors in 'AbstractTestCaseDecoration' to protected.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name=".ctor(NUnit.Core.TestCase)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="AbstractTestCaseDecoration.cs" Line="18">Validate parameter 'testCase' passed to externally visible method AbstractTestCaseDecoration.AbstractTestCaseDecoration(TestCase).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="testCase" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'testCase' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AssemblyReader" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on NUnit.Core.AssemblyReader or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name=".ctor(System.Reflection.Assembly)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="AssemblyReader.cs" Line="30">AssemblyReader.AssemblyReader(Assembly) initializes field dataDirectory of type System.UInt32 to 0. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="AssemblyReader.cs" Line="31">AssemblyReader.AssemblyReader(Assembly) initializes field dataSections of type System.UInt32 to 0. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="AssemblyReader.cs" Line="28">AssemblyReader.AssemblyReader(Assembly) initializes field fileHeader of type System.UInt32 to 0. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="AssemblyReader.cs" Line="29">AssemblyReader.AssemblyReader(Assembly) initializes field optionalHeader of type System.UInt32 to 0. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="AssemblyReader.cs" Line="27">AssemblyReader.AssemblyReader(Assembly) initializes field peHeader of type System.UInt32 to 0. Remove this initialization as it will be done automatically by the runtime.</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="AssemblyReader.cs" Line="50">Validate parameter 'assembly' passed to externally visible method AssemblyReader.AssemblyReader(Assembly).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name=".ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="AssemblyReader.cs" Line="30">AssemblyReader.AssemblyReader(String) initializes field dataDirectory of type System.UInt32 to 0. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="AssemblyReader.cs" Line="31">AssemblyReader.AssemblyReader(String) initializes field dataSections of type System.UInt32 to 0. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="AssemblyReader.cs" Line="28">AssemblyReader.AssemblyReader(String) initializes field fileHeader of type System.UInt32 to 0. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="AssemblyReader.cs" Line="29">AssemblyReader.AssemblyReader(String) initializes field optionalHeader of type System.UInt32 to 0. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="AssemblyReader.cs" Line="27">AssemblyReader.AssemblyReader(String) initializes field peHeader of type System.UInt32 to 0. Remove this initialization as it will be done automatically by the runtime.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Dispose():System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="AssemblyReader.cs" Line="159">Modify AssemblyReader.Dispose():Void so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in VB), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="IsValidPeFile" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Member" TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="AssemblyReader.cs" Line="116">Correct the capitalization of 'Pe' in member name 'AssemblyReader.IsValidPeFile:Boolean'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AssemblyResolver" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on NUnit.Core.AssemblyResolver or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="CurrentDomain_AssemblyResolve(System.Object,System.ResolveEventArgs):System.Reflection.Assembly" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="AssemblyResolver.cs" Line="83">AssemblyResolver.CurrentDomain_AssemblyResolve(Object, ResolveEventArgs):Assembly makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="AssemblyResolver.cs" Line="90">AssemblyResolver.CurrentDomain_AssemblyResolve(Object, ResolveEventArgs):Assembly makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="AssemblyResolver.cs" Line="102">AssemblyResolver.CurrentDomain_AssemblyResolve(Object, ResolveEventArgs):Assembly makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="AssemblyResolver.cs" Line="110">AssemblyResolver.CurrentDomain_AssemblyResolve(Object, ResolveEventArgs):Assembly makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Dispose():System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="AssemblyResolver.cs" Line="54">Modify AssemblyResolver.Dispose():Void so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in VB), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="BufferedEventListenerTextWriter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor(NUnit.Core.EventListener,NUnit.Core.TestOutputType)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.IO.TextWriter.#ctor" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="EventListenerTextWriter.cs" Line="53">BufferedEventListenerTextWriter.BufferedEventListenerTextWriter(EventListener, TestOutputType) makes a call to System.IO.TextWriter.#ctor that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.IO.TextWriter.#ctor(System.IFormatProvider).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Write(System.Char):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="EventListenerTextWriter.cs" Line="68">Change parameter name 'ch' of method BufferedEventListenerTextWriter.Write(Char):Void to 'value' in order to match the identifier as it has been declared in TextWriter.Write(Char):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Write(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="EventListenerTextWriter.cs" Line="77">Change parameter name 'str' of method BufferedEventListenerTextWriter.Write(String):Void to 'value' in order to match the identifier as it has been declared in TextWriter.Write(String):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="WriteLine(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="EventListenerTextWriter.cs" Line="86">Change parameter name 'str' of method BufferedEventListenerTextWriter.WriteLine(String):Void to 'value' in order to match the identifier as it has been declared in TextWriter.WriteLine(String):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="BufferedStringTextWriter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor(System.IO.TextWriter)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="StringTextWriter.cs" Line="76">In method BufferedStringTextWriter.BufferedStringTextWriter(TextWriter), correct the spelling of the unrecognized token 'a' in parameter name 'aTextWriter' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="MAX_BUFFER" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'MAX_BUFFER' is declared as 'static readonly' but is initialized with a constant value '1000'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Write(System.Char):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="StringTextWriter.cs" Line="79">Change parameter name 'aChar' of method BufferedStringTextWriter.Write(Char):Void to 'value' in order to match the identifier as it has been declared in TextWriter.Write(Char):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Write(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="StringTextWriter.cs" Line="88">Change parameter name 'aString' of method BufferedStringTextWriter.Write(String):Void to 'value' in order to match the identifier as it has been declared in TextWriter.Write(String):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="WriteLine(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="StringTextWriter.cs" Line="97">Change parameter name 'aString' of method BufferedStringTextWriter.WriteLine(String):Void to 'value' in order to match the identifier as it has been declared in TextWriter.WriteLine(String):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CoreExtensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="AddinRegistry" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Addin" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="CoreExtensions.cs" Line="78">Correct the spelling of the unrecognized token 'Addin' in member name 'CoreExtensions.AddinRegistry:IAddinRegistry'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Install(NUnit.Core.EventListener):System.Void" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="CoreExtensions.cs" Line="191">'CoreExtensions.Install(EventListener):Void' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Install(NUnit.Core.Extensibility.ITestCaseBuilder):System.Void" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="CoreExtensions.cs" Line="181">'CoreExtensions.Install(ITestCaseBuilder):Void' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Install(NUnit.Core.Extensibility.ITestDecorator):System.Void" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="CoreExtensions.cs" Line="186">'CoreExtensions.Install(ITestDecorator):Void' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="InstallAddins():System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="CoreExtensions.cs" Line="144">Modify 'CoreExtensions.InstallAddins():Void' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="NUnit.Core.Extensibility.IAddinRegistry.SetStatus(System.String,NUnit.Core.Extensibility.AddinStatus,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="CoreExtensions.cs" Line="140">CoreExtensions.InstallAddins():Void passes a literal as parameter 3 of a call to IAddinRegistry.SetStatus(String, AddinStatus, String):Void. Retrieve the following string argument from a resource table instead: 'Install returned false'</Issue>
            </Message>
            <Message Id="Addins" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="CoreExtensions.cs" Line="125">Correct the spelling of the unrecognized token 'Addins' in member name 'CoreExtensions.InstallAddins():Void'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="InstallAdhocExtensions(System.Reflection.Assembly):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Adhoc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="CoreExtensions.cs" Line="154">Correct the spelling of the unrecognized token 'Adhoc' in member name 'CoreExtensions.InstallAdhocExtensions(Assembly):Void'.</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="CoreExtensions.cs" Line="155">Validate parameter 'assembly' passed to externally visible method CoreExtensions.InstallAdhocExtensions(Assembly):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="InstallBuiltins():System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Builtins" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="CoreExtensions.cs" Line="110">Correct the spelling of the unrecognized token 'Builtins' in member name 'CoreExtensions.InstallBuiltins():Void'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DelegatingTestRunner" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="CriticalWarning">Change the accessibility of all public constructors in 'DelegatingTestRunner' to protected.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name=".ctor(NUnit.Core.TestRunner)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="DelegatingTestRunner.cs" Line="50">Validate parameter 'testRunner' passed to externally visible method DelegatingTestRunner.DelegatingTestRunner(TestRunner).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="InitializeLifetimeService():System.Object" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="BaseOnly" Certainty="33" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="DelegatingTestRunner.cs" Line="168">Add the following security attribute to DelegatingTestRunner.InitializeLifetimeService():Object in order to match a LinkDemand on base method MarshalByRefObject.InitializeLifetimeService():Object:  [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)].</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="listener" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'listener' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="runnerID" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'runnerID' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DirectorySwapper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on NUnit.Core.DirectorySwapper or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name=".ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="DirectorySwapper.cs" Line="35">Replace the call to String.op_Inequality(String.Empty) in 'DirectorySwapper.DirectorySwapper(String)' with a call to String.IsNullOrEmpty.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Dispose():System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="DirectorySwapper.cs" Line="40">Modify DirectorySwapper.Dispose():Void so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in VB), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Event" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="95" Level="Error">Change type name 'Event' so that it does not conflict with reserved keyword:'Event'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="EventListenerTextWriter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor(NUnit.Core.EventListener,NUnit.Core.TestOutputType)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.IO.TextWriter.#ctor" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="EventListenerTextWriter.cs" Line="17">EventListenerTextWriter.EventListenerTextWriter(EventListener, TestOutputType) makes a call to System.IO.TextWriter.#ctor that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.IO.TextWriter.#ctor(System.IFormatProvider).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Write(System.Char):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="EventListenerTextWriter.cs" Line="23">Change parameter name 'aChar' of method EventListenerTextWriter.Write(Char):Void to 'value' in order to match the identifier as it has been declared in TextWriter.Write(Char):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Write(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="EventListenerTextWriter.cs" Line="28">Change parameter name 'aString' of method EventListenerTextWriter.Write(String):Void to 'value' in order to match the identifier as it has been declared in TextWriter.Write(String):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="WriteLine(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="EventListenerTextWriter.cs" Line="33">Change parameter name 'aString' of method EventListenerTextWriter.WriteLine(String):Void to 'value' in order to match the identifier as it has been declared in TextWriter.WriteLine(String):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EventPump" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on NUnit.Core.EventPump or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name=".ctor(NUnit.Core.EventListener,NUnit.Core.EventQueue,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="2#autostop" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="EventPump.cs" Line="59">In method EventPump.EventPump(EventListener, EventQueue, Boolean), correct the spelling of the unrecognized token 'autostop' in parameter name 'autostop' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Dispose():System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="EventPump.cs" Line="90">Modify EventPump.Dispose():Void so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in VB), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="PumpThreadProc():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.ApplicationException.#ctor(System.String,System.Exception)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="EventPump.cs" Line="154">EventPump.PumpThreadProc():Void passes a literal as parameter 1 of a call to ApplicationException.ApplicationException(String, Exception). Retrieve the following string argument from a resource table instead: 'Exception in pump thread'</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="EventPump.cs" Line="154">EventPump.PumpThreadProc():Void creates an exception of type 'System.ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EventQueue" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="CriticalError">Rename 'NUnit.Core.EventQueue' so that it does not end in 'Queue'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="Enqueue(NUnit.Core.Event):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#e" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ParameterOneLetter" Certainty="75" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="EventQueue.cs" Line="179">In method EventQueue.Enqueue(Event):Void, consider providing a more meaningful name than the one-letter parameter name 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExtensionHost" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="CriticalWarning">Change the accessibility of all public constructors in 'ExtensionHost' to protected.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="extensions" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'extensions' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="frameworks" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'frameworks' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="supportedTypes" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'supportedTypes' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IgnoreDecorator" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ignoreAttributeType" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="IgnoreDecorator.cs" Line="18">Parameter 'ignoreAttributeType' of IgnoreDecorator.IgnoreDecorator(String) is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Decorate(NUnit.Core.Test,System.Reflection.MemberInfo):NUnit.Core.Test" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="IgnoreDecorator.cs" Line="40">Validate parameter 'test' passed to externally visible method IgnoreDecorator.Decorate(Test, MemberInfo):Test.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="InvalidSuiteException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="System.ApplicationException" TypeName="TypesShouldNotExtendCertainBaseTypes" Category="Microsoft.Design" CheckId="CA1058" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="System.ApplicationException" Certainty="75" Level="Error">Change InvalidSuiteException's base type so that it no longer extends System.ApplicationException. This base exception type does not provide any additional value for framework classes. Extend System.Exception or an existing unsealed exception type instead. Do not create a new exception base type unless there is specific value in enabling the creation of a catch handler for an entire class of exceptions.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="InvalidTestFixtureException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="System.ApplicationException" TypeName="TypesShouldNotExtendCertainBaseTypes" Category="Microsoft.Design" CheckId="CA1058" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="System.ApplicationException" Certainty="75" Level="Error">Change InvalidTestFixtureException's base type so that it no longer extends System.ApplicationException. This base exception type does not provide any additional value for framework classes. Extend System.Exception or an existing unsealed exception type instead. Do not create a new exception base type unless there is specific value in enabling the creation of a catch handler for an entire class of exceptions.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="NamespaceTreeBuilder" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="Add(NUnit.Core.TestSuite):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="NamespaceTreeBuilder.cs" Line="64">Validate parameter 'fixture' passed to externally visible method NamespaceTreeBuilder.Add(TestSuite):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Add(System.Collections.IList):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="NamespaceTreeBuilder.cs" Line="54">Validate parameter 'fixtures' passed to externally visible method NamespaceTreeBuilder.Add(IList):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="BuildFromNameSpace(System.String):NUnit.Core.TestSuite" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="NamespaceTreeBuilder.cs" Line="135">Replace the call to String.op_Equality("") in 'NamespaceTreeBuilder.BuildFromNameSpace(String):TestSuite' with a call to String.IsNullOrEmpty.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NoTestFixturesException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="System.ApplicationException" TypeName="TypesShouldNotExtendCertainBaseTypes" Category="Microsoft.Design" CheckId="CA1058" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="System.ApplicationException" Certainty="75" Level="Error">Change NoTestFixturesException's base type so that it no longer extends System.ApplicationException. This base exception type does not provide any additional value for framework classes. Extend System.Exception or an existing unsealed exception type instead. Do not create a new exception base type unless there is specific value in enabling the creation of a catch handler for an entire class of exceptions.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="NotRunnableTestCase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Runnable" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of the unrecognized token 'Runnable' in type name 'NUnit.Core.NotRunnableTestCase'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name=".ctor(System.Reflection.MethodInfo)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="NotRunnableTestCase.cs" Line="41">NotRunnableTestCase.NotRunnableTestCase(MethodInfo) makes a call to System.String.Format(System.String,System.Object,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="NotRunnableTestCase.cs" Line="23">Validate parameter 'method' passed to externally visible method NotRunnableTestCase.NotRunnableTestCase(MethodInfo).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name=".ctor(System.Reflection.MethodInfo,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="NotRunnableTestCase.cs" Line="17">Validate parameter 'method' passed to externally visible method NotRunnableTestCase.NotRunnableTestCase(MethodInfo, String).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Run(NUnit.Core.TestCaseResult):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="NotRunnableTestCase.cs" Line="46">Validate parameter 'result' passed to externally visible method NotRunnableTestCase.Run(TestCaseResult):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NullListener" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="NULL" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Member" TypeName="LongAcronymsShouldBePascalCased" Category="Microsoft.Naming" CheckId="CA1705" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="NullListener.cs" Line="38">Correct the capitalization of member name 'NullListener.NULL:EventListener'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NUnitException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="System.ApplicationException" TypeName="TypesShouldNotExtendCertainBaseTypes" Category="Microsoft.Design" CheckId="CA1058" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="System.ApplicationException" Certainty="75" Level="Error">Change NUnitException's base type so that it no longer extends System.ApplicationException. This base exception type does not provide any additional value for framework classes. Extend System.Exception or an existing unsealed exception type instead. Do not create a new exception base type unless there is specific value in enabling the creation of a catch handler for an entire class of exceptions.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="NUnitFramework" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Remove the public constructors from 'NUnitFramework'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="AllowOldStyleTests" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="get_AllowOldStyleTests():System.Boolean" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="NUnitFramework.cs" Line="409">Modify 'NUnitFramework.get_AllowOldStyleTests():Boolean' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="ApplyCommonAttributes(System.Attribute[],NUnit.Core.Test):System.Void" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="NUnitFramework.cs" Line="287">Replace the call to String.op_Inequality(String.Empty) in 'NUnitFramework.ApplyCommonAttributes(Attribute[], Test):Void' with a call to String.IsNullOrEmpty.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="ApplyExpectedExceptionAttribute(System.Reflection.MethodInfo,NUnit.Core.TestMethod):System.Void" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="NUnitFramework.cs" Line="305">Consider changing the type of parameter 'method' in NUnitFramework.ApplyExpectedExceptionAttribute(MethodInfo, TestMethod):Void from System.Reflection.MethodInfo to its base type System.Reflection.MemberInfo. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="NUnitFramework.cs" Line="335">NUnitFramework.ApplyExpectedExceptionAttribute(MethodInfo, TestMethod):Void makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="NUnitFramework.cs" Line="311">Validate parameter 'testMethod' passed to externally visible method NUnitFramework.ApplyExpectedExceptionAttribute(MethodInfo, TestMethod):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="AssertException" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'AssertException' is declared as 'static readonly' but is initialized with a constant value 'NUnit.Framework.AssertionException'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="AssertType" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'AssertType' is declared as 'static readonly' but is initialized with a constant value 'NUnit.Framework.Assert'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="ExpectedExceptionAttribute" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'ExpectedExceptionAttribute' is declared as 'static readonly' but is initialized with a constant value 'NUnit.Framework.ExpectedExceptionAttribute'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="ExpectExceptionInterface" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'ExpectExceptionInterface' is declared as 'static readonly' but is initialized with a constant value 'NUnit.Framework.IExpectException'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="FixtureSetUpAttribute" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SetUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'SetUp' in field 'FixtureSetUpAttribute' exists as a discrete term. If your usage is intended to be single word, case it as 'Setup'.</Issue>
            </Message>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'FixtureSetUpAttribute' is declared as 'static readonly' but is initialized with a constant value 'NUnit.Framework.TestFixtureSetUpAttribute'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="FixtureTearDownAttribute" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="TearDown" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'TearDown' in field 'FixtureTearDownAttribute' exists as a discrete term. If your usage is intended to be single word, case it as 'Teardown'.</Issue>
            </Message>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'FixtureTearDownAttribute' is declared as 'static readonly' but is initialized with a constant value 'NUnit.Framework.TestFixtureTearDownAttribute'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetAssertCount():System.Int32" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="NUnitFramework.cs" Line="345">Change 'GetAssertCount' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetFixtureSetUpMethod(System.Type):System.Reflection.MethodInfo" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SetUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="NUnitFramework.cs" Line="115">The compound word 'SetUp' in method 'GetFixtureSetUpMethod' exists as a discrete term. If your usage is intended to be single word, case it as 'Setup'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetFixtureTearDownMethod(System.Type):System.Reflection.MethodInfo" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="TearDown" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="NUnitFramework.cs" Line="122">The compound word 'TearDown' in method 'GetFixtureTearDownMethod' exists as a discrete term. If your usage is intended to be single word, case it as 'Teardown'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetSetUpMethod(System.Type):System.Reflection.MethodInfo" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SetUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="NUnitFramework.cs" Line="101">The compound word 'SetUp' in method 'GetSetUpMethod' exists as a discrete term. If your usage is intended to be single word, case it as 'Setup'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetTearDownMethod(System.Type):System.Reflection.MethodInfo" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="TearDown" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="NUnitFramework.cs" Line="108">The compound word 'TearDown' in method 'GetTearDownMethod' exists as a discrete term. If your usage is intended to be single word, case it as 'Teardown'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="IgnoreException" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'IgnoreException' is declared as 'static readonly' but is initialized with a constant value 'NUnit.Framework.IgnoreException'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="IsFixtureSetUpMethod(System.Reflection.MethodInfo):System.Boolean" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SetUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="NUnitFramework.cs" Line="88">The compound word 'SetUp' in method 'IsFixtureSetUpMethod' exists as a discrete term. If your usage is intended to be single word, case it as 'Setup'.</Issue>
            </Message>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="NUnitFramework.cs" Line="88">Consider changing the type of parameter 'method' in NUnitFramework.IsFixtureSetUpMethod(MethodInfo):Boolean from System.Reflection.MethodInfo to its base type System.Reflection.MemberInfo. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="IsFixtureTearDownMethod(System.Reflection.MethodInfo):System.Boolean" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="TearDown" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="NUnitFramework.cs" Line="93">The compound word 'TearDown' in method 'IsFixtureTearDownMethod' exists as a discrete term. If your usage is intended to be single word, case it as 'Teardown'.</Issue>
            </Message>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="NUnitFramework.cs" Line="93">Consider changing the type of parameter 'method' in NUnitFramework.IsFixtureTearDownMethod(MethodInfo):Boolean from System.Reflection.MethodInfo to its base type System.Reflection.MemberInfo. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="IsSetUpMethod(System.Reflection.MethodInfo):System.Boolean" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SetUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="NUnitFramework.cs" Line="78">The compound word 'SetUp' in method 'IsSetUpMethod' exists as a discrete term. If your usage is intended to be single word, case it as 'Setup'.</Issue>
            </Message>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="NUnitFramework.cs" Line="78">Consider changing the type of parameter 'method' in NUnitFramework.IsSetUpMethod(MethodInfo):Boolean from System.Reflection.MethodInfo to its base type System.Reflection.MemberInfo. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="IsTearDownMethod(System.Reflection.MethodInfo):System.Boolean" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="TearDown" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="NUnitFramework.cs" Line="83">The compound word 'TearDown' in method 'IsTearDownMethod' exists as a discrete term. If your usage is intended to be single word, case it as 'Teardown'.</Issue>
            </Message>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="NUnitFramework.cs" Line="83">Consider changing the type of parameter 'method' in NUnitFramework.IsTearDownMethod(MethodInfo):Boolean from System.Reflection.MethodInfo to its base type System.Reflection.MemberInfo. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SetUpAttribute" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SetUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'SetUp' in field 'SetUpAttribute' exists as a discrete term. If your usage is intended to be single word, case it as 'Setup'.</Issue>
            </Message>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'SetUpAttribute' is declared as 'static readonly' but is initialized with a constant value 'NUnit.Framework.SetUpAttribute'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SetUpFixtureAttribute" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SetUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'SetUp' in field 'SetUpFixtureAttribute' exists as a discrete term. If your usage is intended to be single word, case it as 'Setup'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SuiteAttribute" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'SuiteAttribute' is declared as 'static readonly' but is initialized with a constant value 'NUnit.Framework.SuiteAttribute'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TearDownAttribute" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="TearDown" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'TearDown' in field 'TearDownAttribute' exists as a discrete term. If your usage is intended to be single word, case it as 'Teardown'.</Issue>
            </Message>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'TearDownAttribute' is declared as 'static readonly' but is initialized with a constant value 'NUnit.Framework.TearDownAttribute'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NUnitTestMethod" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="Run(NUnit.Core.TestCaseResult):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="NUnitTestMethod.cs" Line="31">Change parameter name 'testResult' of method NUnitTestMethod.Run(TestCaseResult):Void to 'result' in order to match the identifier as it has been declared in TestCase.Run(TestCaseResult):Void.</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="NUnitTestMethod.cs" Line="34">Validate parameter 'testResult' passed to externally visible method NUnitTestMethod.Run(TestCaseResult):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="OutputEvent" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="Send(NUnit.Core.EventListener):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="EventQueue.cs" Line="153">Validate parameter 'listener' passed to externally visible method OutputEvent.Send(EventListener):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PlatformHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="IsPlatformSupported(System.Attribute):System.Boolean" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="PlatformHelper.cs" Line="94">PlatformHelper.IsPlatformSupported(Attribute):Boolean makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="PlatformHelper.cs" Line="100">PlatformHelper.IsPlatformSupported(Attribute):Boolean makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="PlatformHelper.cs" Line="106">PlatformHelper.IsPlatformSupported(Attribute):Boolean makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="IsPlatformSupported(System.String):System.Boolean" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="PlatformHelper.cs" Line="136">PlatformHelper.IsPlatformSupported(String):Boolean makes a call to System.String.ToUpper that does not explicitly provide a CultureInfo. This should be replaced with a call to System.String.ToUpper(System.Globalization.CultureInfo).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="IsPlatformSupported(System.String[]):System.Boolean" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="PlatformHelper.cs" Line="66">Validate parameter 'platforms' passed to externally visible method PlatformHelper.IsPlatformSupported(String[]):Boolean.</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="PlatformHelper.cs" Line="66">Validate parameter 'platforms' passed to externally visible method PlatformHelper.IsPlatformSupported(String[]):Boolean.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="OSPlatforms" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'OSPlatforms' is declared as 'static readonly' but is initialized with a constant value 'Win,Win32,Win32S,Win32NT,Win32Windows,WinCE,Win95,Win98,WinMe,NT3,NT4,NT5,Win2K,WinXP,Unix,Linux'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="RuntimePlatforms" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'RuntimePlatforms' is declared as 'static readonly' but is initialized with a constant value 'Net,NetCF,SSCLI,Rotor,Mono'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="UnixPlatformID_Microsoft" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Unix" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of the unrecognized token 'Unix' in member name 'PlatformHelper.UnixPlatformID_Microsoft'.</Issue>
            </Message>
            <Message Id="Member" TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove all underscores from member 'UnixPlatformID_Microsoft'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="UnixPlatformID_Mono" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Unix" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of the unrecognized token 'Unix' in member name 'PlatformHelper.UnixPlatformID_Mono'.</Issue>
            </Message>
            <Message Id="Member" TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove all underscores from member 'UnixPlatformID_Mono'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="QueuingEventListener" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="TestOutput(NUnit.Core.TestOutput):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="QueuingEventListener.cs" Line="105">Change parameter name 'output' of method QueuingEventListener.TestOutput(TestOutput):Void to 'testOutput' in order to match the identifier as it has been declared in EventListener.TestOutput(TestOutput):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Reflect" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldBeSealed" Category="Microsoft.Design" CheckId="CA1052" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="CriticalWarning">Mark 'Reflect' as sealed.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="CountMethodsWithAttribute(System.Type,System.String,System.Reflection.BindingFlags,System.Boolean):System.Int32" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="Reflect.cs" Line="220">Validate parameter 'fixtureType' passed to externally visible method Reflect.CountMethodsWithAttribute(Type, String, BindingFlags, Boolean):Int32.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetAttribute(System.Reflection.Assembly,System.String,System.Boolean):System.Attribute" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="Reflect.cs" Line="75">Validate parameter 'assembly' passed to externally visible method Reflect.GetAttribute(Assembly, String, Boolean):Attribute.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetAttribute(System.Reflection.MemberInfo,System.String,System.Boolean):System.Attribute" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="Reflect.cs" Line="58">Validate parameter 'member' passed to externally visible method Reflect.GetAttribute(MemberInfo, String, Boolean):Attribute.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetAttributes(System.Reflection.Assembly,System.Boolean):System.Attribute[]" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="Reflect.cs" Line="123">Validate parameter 'assembly' passed to externally visible method Reflect.GetAttributes(Assembly, Boolean):Attribute[].</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetAttributes(System.Reflection.MemberInfo,System.Boolean):System.Attribute[]" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="Reflect.cs" Line="107">Validate parameter 'member' passed to externally visible method Reflect.GetAttributes(MemberInfo, Boolean):Attribute[].</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetAttributes(System.Reflection.MemberInfo,System.String,System.Boolean):System.Attribute[]" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="Reflect.cs" Line="91">Validate parameter 'member' passed to externally visible method Reflect.GetAttributes(MemberInfo, String, Boolean):Attribute[].</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetConstructor(System.Type):System.Reflection.ConstructorInfo" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="Reflect.cs" Line="186">Validate parameter 'fixtureType' passed to externally visible method Reflect.GetConstructor(Type):ConstructorInfo.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetMethodWithAttribute(System.Type,System.String,System.Reflection.BindingFlags,System.Boolean):System.Reflection.MethodInfo" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="Reflect.cs" Line="199">Validate parameter 'fixtureType' passed to externally visible method Reflect.GetMethodWithAttribute(Type, String, BindingFlags, Boolean):MethodInfo.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetNamedMethod(System.Type,System.String,System.Reflection.BindingFlags):System.Reflection.MethodInfo" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="Reflect.cs" Line="239">Validate parameter 'fixtureType' passed to externally visible method Reflect.GetNamedMethod(Type, String, BindingFlags):MethodInfo.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetNamedMethod(System.Type,System.String,System.String[],System.Reflection.BindingFlags):System.Reflection.MethodInfo" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="Reflect.cs" Line="265">Validate parameter 'argTypes' passed to externally visible method Reflect.GetNamedMethod(Type, String, String[], BindingFlags):MethodInfo.</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="Reflect.cs" Line="260">Validate parameter 'fixtureType' passed to externally visible method Reflect.GetNamedMethod(Type, String, String[], BindingFlags):MethodInfo.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetNamedProperty(System.Type,System.String,System.Reflection.BindingFlags):System.Reflection.PropertyInfo" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="Reflect.cs" Line="316">Validate parameter 'type' passed to externally visible method Reflect.GetNamedProperty(Type, String, BindingFlags):PropertyInfo.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetPropertyValue(System.Object,System.String,System.Reflection.BindingFlags):System.Object" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="Reflect.cs" Line="339">Validate parameter 'obj' passed to externally visible method Reflect.GetPropertyValue(Object, String, BindingFlags):Object.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetPropertyWithAttribute(System.Type,System.String,System.Reflection.BindingFlags):System.Reflection.PropertyInfo" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="Reflect.cs" Line="298">Validate parameter 'fixtureType' passed to externally visible method Reflect.GetPropertyWithAttribute(Type, String, BindingFlags):PropertyInfo.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="HasAttribute(System.Reflection.MemberInfo,System.String,System.Boolean):System.Boolean" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="Reflect.cs" Line="41">Validate parameter 'member' passed to externally visible method Reflect.HasAttribute(MemberInfo, String, Boolean):Boolean.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="HasInterface(System.Type,System.String):System.Boolean" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="Reflect.cs" Line="143">Validate parameter 'fixtureType' passed to externally visible method Reflect.HasInterface(Type, String):Boolean.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="InvokeMethod(System.Reflection.MethodInfo,System.Object,System.Object[]):System.Void" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="Reflect.cs" Line="379">Consider changing the type of parameter 'method' in Reflect.InvokeMethod(MethodInfo, Object, Object[]):Void from System.Reflection.MethodInfo to its base type System.Reflection.MethodBase. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message Id="NUnit.Core.NUnitException.#ctor(System.String,System.Exception)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="Reflect.cs" Line="389">Reflect.InvokeMethod(MethodInfo, Object, Object[]):Void passes a literal as parameter 1 of a call to NUnitException.NUnitException(String, Exception). Retrieve the following string argument from a resource table instead: 'Rethrown'</Issue>
            </Message>
            <Message Id="Rethrown" TypeName="LiteralsShouldBeSpelledCorrectly" Category="Microsoft.Usage" CheckId="CA2204" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="85" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="Reflect.cs" Line="389">Correct the spelling of the unrecognized token 'Rethrown' in the literal 'Rethrown'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="IsOrInheritsFrom(System.Type,System.String):System.Boolean" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="Reflect.cs" Line="173">Validate parameter 'type' passed to externally visible method Reflect.IsOrInheritsFrom(Type, String):Boolean.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RemoteTestRunner" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="DirectOutputToListener(NUnit.Core.EventListener):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="RemoteTestRunner.cs" Line="100">The 'this' parameter (or 'Me' in VB) of RemoteTestRunner.DirectOutputToListener(EventListener):Void is never used. Mark the member as static (or Shared in VB) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Load(NUnit.Core.TestPackage):System.Boolean" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="RemoteTestRunner.cs" Line="36">Validate parameter 'package' passed to externally visible method RemoteTestRunner.Load(TestPackage):Boolean.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RunFinishedEvent" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="Send(NUnit.Core.EventListener):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="EventQueue.cs" Line="61">Validate parameter 'listener' passed to externally visible method RunFinishedEvent.Send(EventListener):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RunStartedEvent" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="Send(NUnit.Core.EventListener):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="EventQueue.cs" Line="39">Validate parameter 'listener' passed to externally visible method RunStartedEvent.Send(EventListener):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SetUpFixture" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="SetUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'SetUp' in class 'SetUpFixture' exists as a discrete term. If your usage is intended to be single word, case it as 'Setup'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name=".ctor(System.Type)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="SetUpFixture.cs" Line="22">Validate parameter 'type' passed to externally visible method SetUpFixture.SetUpFixture(Type).</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SimpleTestRunner" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="CancelRun():System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.InvalidOperationException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="SimpleTestRunner.cs" Line="194">SimpleTestRunner.CancelRun():Void passes a literal as parameter 1 of a call to InvalidOperationException.InvalidOperationException(String). Retrieve the following string argument from a resource table instead: 'May not CancelRun on same thread that is running the test'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="InitializeLifetimeService():System.Object" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="BaseOnly" Certainty="33" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="SimpleTestRunner.cs" Line="213">Add the following security attribute to SimpleTestRunner.InitializeLifetimeService():Object in order to match a LinkDemand on base method MarshalByRefObject.InitializeLifetimeService():Object:  [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)].</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Run(NUnit.Core.EventListener,NUnit.Core.ITestFilter):NUnit.Core.TestResult" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="SimpleTestRunner.cs" Line="143">Validate parameter 'listener' passed to externally visible method SimpleTestRunner.Run(EventListener, ITestFilter):TestResult.</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="SimpleTestRunner.cs" Line="156">Validate parameter 'listener' passed to externally visible method SimpleTestRunner.Run(EventListener, ITestFilter):TestResult.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StringTextWriter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor(System.IO.TextWriter)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="StringTextWriter.cs" Line="23">In method StringTextWriter.StringTextWriter(TextWriter), correct the spelling of the unrecognized token 'a' in parameter name 'aTextWriter' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
            <Message Id="System.IO.TextWriter.#ctor" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="StringTextWriter.cs" Line="23">StringTextWriter.StringTextWriter(TextWriter) makes a call to System.IO.TextWriter.#ctor that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.IO.TextWriter.#ctor(System.IFormatProvider).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="theTextWriter" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'theTextWriter' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Write(System.Char):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="StringTextWriter.cs" Line="31">Change parameter name 'aChar' of method StringTextWriter.Write(Char):Void to 'value' in order to match the identifier as it has been declared in TextWriter.Write(Char):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Write(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="StringTextWriter.cs" Line="36">Change parameter name 'aString' of method StringTextWriter.Write(String):Void to 'value' in order to match the identifier as it has been declared in TextWriter.Write(String):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="WriteLine(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="StringTextWriter.cs" Line="41">Change parameter name 'aString' of method StringTextWriter.WriteLine(String):Void to 'value' in order to match the identifier as it has been declared in TextWriter.WriteLine(String):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SuiteFinishedEvent" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="Send(NUnit.Core.EventListener):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="EventQueue.cs" Line="123">Validate parameter 'listener' passed to externally visible method SuiteFinishedEvent.Send(EventListener):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SuiteStartedEvent" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="Send(NUnit.Core.EventListener):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="EventQueue.cs" Line="108">Validate parameter 'listener' passed to externally visible method SuiteStartedEvent.Send(EventListener):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestBuilderAttribute" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidUnsealedAttributes" Category="Microsoft.Performance" CheckId="CA1813" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Warning">Seal 'NUnit.Core.TestBuilderAttribute', if possible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="TestCase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="CriticalWarning">Change the accessibility of all public constructors in 'TestCase' to protected.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="CountTestCases(NUnit.Core.ITestFilter):System.Int32" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestCase.cs" Line="29">Validate parameter 'filter' passed to externally visible method TestCase.CountTestCases(ITestFilter):Int32.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Run(NUnit.Core.EventListener):NUnit.Core.TestResult" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestCase.cs" Line="51">Validate parameter 'listener' passed to externally visible method TestCase.Run(EventListener):TestResult.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestCaseBuilder" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldBeSealed" Category="Microsoft.Design" CheckId="CA1052" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="CriticalWarning">Mark 'TestCaseBuilder' as sealed.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="TestContext" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on NUnit.Core.TestContext or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="Dispose():System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestContext.cs" Line="113">Modify TestContext.Dispose():Void so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in VB), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestContext+ContextHolder" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name=".ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestContext.cs" Line="153">ContextHolder.ContextHolder() initializes field prior of type NUnit.Core.TestContext+ContextHolder to null. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestContext.cs" Line="157">ContextHolder.ContextHolder() initializes field traceWriter of type System.IO.TextWriter to null. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestContext.cs" Line="154">ContextHolder.ContextHolder() initializes field tracing of type System.Boolean to false. Remove this initialization as it will be done automatically by the runtime.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestFinishedEvent" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="Send(NUnit.Core.EventListener):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="EventQueue.cs" Line="93">Validate parameter 'listener' passed to externally visible method TestFinishedEvent.Send(EventListener):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestFixtureBuilder" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldBeSealed" Category="Microsoft.Design" CheckId="CA1052" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="CriticalWarning">Mark 'TestFixtureBuilder' as sealed.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="BuildFrom(System.Object):NUnit.Core.Test" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestFixtureBuilder.cs" Line="45">Validate parameter 'fixture' passed to externally visible method TestFixtureBuilder.BuildFrom(Object):Test.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestMethod" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="CriticalWarning">Change the accessibility of all public constructors in 'TestMethod' to protected.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="doRun(NUnit.Core.TestCaseResult):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestMethod.cs" Line="187">Modify 'TestMethod.doRun(TestCaseResult):Void' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="Member" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestMethod.cs" Line="177">Correct the casing of member name 'doRun'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="doTearDown(NUnit.Core.TestCaseResult):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestMethod.cs" Line="214">Modify 'TestMethod.doTearDown(TestCaseResult):Void' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="doTestCase(NUnit.Core.TestCaseResult):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestMethod.cs" Line="230">Modify 'TestMethod.doTestCase(TestCaseResult):Void' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="ExpectedExceptionType" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="set_ExpectedExceptionType(System.Type):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestMethod.cs" Line="111">Validate parameter 'value' passed to externally visible method TestMethod.set_ExpectedExceptionType(Type):Void.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="GetStackTrace(System.Exception):System.String" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestMethod.cs" Line="267">Modify 'TestMethod.GetStackTrace(Exception):String' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestMethod.cs" Line="262">The 'this' parameter (or 'Me' in VB) of TestMethod.GetStackTrace(Exception):String is never used. Mark the member as static (or Shared in VB) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestMethod.cs" Line="265">Validate parameter 'exception' passed to externally visible method TestMethod.GetStackTrace(Exception):String.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="IsExpectedExceptionType(System.Exception):System.Boolean" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestMethod.cs" Line="326">Validate parameter 'exception' passed to externally visible method TestMethod.IsExpectedExceptionType(Exception):Boolean.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="IsExpectedMessageMatch(System.Exception):System.Boolean" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestMethod.cs" Line="338">Validate parameter 'exception' passed to externally visible method TestMethod.IsExpectedMessageMatch(Exception):Boolean.</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestMethod.cs" Line="340">Validate parameter 'exception' passed to externally visible method TestMethod.IsExpectedMessageMatch(Exception):Boolean.</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestMethod.cs" Line="342">Validate parameter 'exception' passed to externally visible method TestMethod.IsExpectedMessageMatch(Exception):Boolean.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="ProcessException(System.Exception,NUnit.Core.TestCaseResult):System.Void" Kind="Method" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestMethod.cs" Line="285">Consider changing the type of parameter 'testResult' in TestMethod.ProcessException(Exception, TestCaseResult):Void from NUnit.Core.TestCaseResult to its base type NUnit.Core.TestResult. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="ProcessNoException(NUnit.Core.TestCaseResult):System.Void" Kind="Method" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestMethod.cs" Line="277">Consider changing the type of parameter 'testResult' in TestMethod.ProcessNoException(TestCaseResult):Void from NUnit.Core.TestCaseResult to its base type NUnit.Core.TestResult. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="RecordException(System.Exception,NUnit.Core.TestResult):System.Void" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestMethod.cs" Line="256">Validate parameter 'ex' passed to externally visible method TestMethod.RecordException(Exception, TestResult):Void.</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestMethod.cs" Line="254">Validate parameter 'ex' passed to externally visible method TestMethod.RecordException(Exception, TestResult):Void.</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestMethod.cs" Line="256">Validate parameter 'testResult' passed to externally visible method TestMethod.RecordException(Exception, TestResult):Void.</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestMethod.cs" Line="254">Validate parameter 'testResult' passed to externally visible method TestMethod.RecordException(Exception, TestResult):Void.</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestMethod.cs" Line="258">Validate parameter 'testResult' passed to externally visible method TestMethod.RecordException(Exception, TestResult):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Run(NUnit.Core.TestCaseResult):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestMethod.cs" Line="161">Modify 'TestMethod.Run(TestCaseResult):Void' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestMethod.cs" Line="146">Change parameter name 'testResult' of method TestMethod.Run(TestCaseResult):Void to 'result' in order to match the identifier as it has been declared in TestCase.Run(TestCaseResult):Void.</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestMethod.cs" Line="152">Validate parameter 'testResult' passed to externally visible method TestMethod.Run(TestCaseResult):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="setUpMethod" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="setUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'setUp' in field 'setUpMethod' exists as a discrete term. If your usage is intended to be single word, case it as 'setup'.</Issue>
            </Message>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'setUpMethod' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="tearDownMethod" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="tearDown" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'tearDown' in field 'tearDownMethod' exists as a discrete term. If your usage is intended to be single word, case it as 'teardown'.</Issue>
            </Message>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'tearDownMethod' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="WrongTextMessage(System.Exception):System.String" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="NUnit.Core.TestMethod.CombineWithUserMessage(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestMethod.cs" Line="377">TestMethod.WrongTextMessage(Exception):String passes a literal as parameter 1 of a call to TestMethod.CombineWithUserMessage(String):String. Retrieve the following string argument from a resource table instead: 'The exception message text was incorrect____ but was: __'</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestMethod.cs" Line="377">Validate parameter 'exception' passed to externally visible method TestMethod.WrongTextMessage(Exception):String.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="WrongTypeMessage(System.Exception):System.String" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="NUnit.Core.TestMethod.CombineWithUserMessage(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestMethod.cs" Line="354">TestMethod.WrongTypeMessage(Exception):String passes a literal as parameter 1 of a call to TestMethod.CombineWithUserMessage(String):String. Retrieve the following string argument from a resource table instead: 'An unexpected exception type was thrown____Expected: ____ but was: __'</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestMethod.cs" Line="354">Validate parameter 'exception' passed to externally visible method TestMethod.WrongTypeMessage(Exception):String.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestRunnerThread" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor(NUnit.Core.TestRunner)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestRunnerThread.cs" Line="104">TestRunnerThread.TestRunnerThread(TestRunner) makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Results" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestRunnerThread.cs" Line="71">Change TestRunnerThread.Results:TestResult[] to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TestRunnerThreadProc():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.ApplicationException.#ctor(System.String,System.Exception)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestRunnerThread.cs" Line="157">TestRunnerThread.TestRunnerThreadProc():Void passes a literal as parameter 1 of a call to ApplicationException.ApplicationException(String, Exception). Retrieve the following string argument from a resource table instead: 'Exception in TestRunnerThread'</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestRunnerThread.cs" Line="157">TestRunnerThread.TestRunnerThreadProc():Void creates an exception of type 'System.ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestStartedEvent" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="Send(NUnit.Core.EventListener):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="EventQueue.cs" Line="78">Validate parameter 'listener' passed to externally visible method TestStartedEvent.Send(EventListener):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestSuite" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="Add(NUnit.Core.Test):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestSuite.cs" Line="82">Validate parameter 'test' passed to externally visible method TestSuite.Add(Test):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="CountTestCases(NUnit.Core.ITestFilter):System.Int32" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestSuite.cs" Line="130">Validate parameter 'filter' passed to externally visible method TestSuite.CountTestCases(ITestFilter):Int32.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="DoOneTimeSetUp(NUnit.Core.TestResult):System.Void" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="OneTime" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestSuite.cs" Line="194">The compound word 'OneTime' in method 'DoOneTimeSetUp' exists as a discrete term. If your usage is intended to be single word, case it as 'Onetime'.</Issue>
            </Message>
            <Message Id="SetUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestSuite.cs" Line="194">The compound word 'SetUp' in method 'DoOneTimeSetUp' exists as a discrete term. If your usage is intended to be single word, case it as 'Setup'.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestSuite.cs" Line="205">Modify 'TestSuite.DoOneTimeSetUp(TestResult):Void' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="DoOneTimeTearDown(NUnit.Core.TestResult):System.Void" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="OneTime" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestSuite.cs" Line="234">The compound word 'OneTime' in method 'DoOneTimeTearDown' exists as a discrete term. If your usage is intended to be single word, case it as 'Onetime'.</Issue>
            </Message>
            <Message Id="TearDown" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestSuite.cs" Line="234">The compound word 'TearDown' in method 'DoOneTimeTearDown' exists as a discrete term. If your usage is intended to be single word, case it as 'Teardown'.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestSuite.cs" Line="242">Modify 'TestSuite.DoOneTimeTearDown(TestResult):Void' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="fixtureSetUp" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="SetUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'SetUp' in field 'fixtureSetUp' exists as a discrete term. If your usage is intended to be single word, case it as 'Setup'.</Issue>
            </Message>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'fixtureSetUp' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="fixtureTearDown" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="TearDown" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'TearDown' in field 'fixtureTearDown' exists as a discrete term. If your usage is intended to be single word, case it as 'Teardown'.</Issue>
            </Message>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'fixtureTearDown' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="MarkTestFailed(NUnit.Core.Test,NUnit.Core.TestSuiteResult,NUnit.Core.EventListener,NUnit.Core.ITestFilter):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestSuite.cs" Line="339">TestSuite.MarkTestFailed(Test, TestSuiteResult, EventListener, ITestFilter):Void makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestSuite.cs" Line="349">TestSuite.MarkTestFailed(Test, TestSuiteResult, EventListener, ITestFilter):Void makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Run(NUnit.Core.EventListener,NUnit.Core.ITestFilter):NUnit.Core.TestResult" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestSuite.cs" Line="151">Validate parameter 'listener' passed to externally visible method TestSuite.Run(EventListener, ITestFilter):TestResult.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestSuiteBuilder" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="Build(NUnit.Core.TestPackage):NUnit.Core.TestSuite" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="TestSuiteBuilder.cs" Line="61">Validate parameter 'package' passed to externally visible method TestSuiteBuilder.Build(TestPackage):TestSuite.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UnhandledExceptionEvent" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="Send(NUnit.Core.EventListener):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core" File="EventQueue.cs" Line="138">Validate parameter 'listener' passed to externally visible method UnhandledExceptionEvent.Send(EventListener):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="NUnit.Core.Builders">
       <Types>
        <Type Name="AbstractFixtureBuilder" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="GetCandidateTestMethods(System.Type):System.Collections.IList" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core\Builders" File="AbstractFixtureBuilder.cs" Line="176">The 'this' parameter (or 'Me' in VB) of AbstractFixtureBuilder.GetCandidateTestMethods(Type):IList is never used. Mark the member as static (or Shared in VB) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core\Builders" File="AbstractFixtureBuilder.cs" Line="177">Validate parameter 'fixtureType' passed to externally visible method AbstractFixtureBuilder.GetCandidateTestMethods(Type):IList.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="IsValidFixtureType(System.Type,System.String&amp;):System.Boolean" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core\Builders" File="AbstractFixtureBuilder.cs" Line="121">Consider a design that does not require that 'reason' be a reference parameter.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core\Builders" File="AbstractFixtureBuilder.cs" Line="124">AbstractFixtureBuilder.IsValidFixtureType(Type, String&amp;):Boolean makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core\Builders" File="AbstractFixtureBuilder.cs" Line="130">AbstractFixtureBuilder.IsValidFixtureType(Type, String&amp;):Boolean makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="suite" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'suite' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AbstractTestCaseBuilder" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="runnerID" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'runnerID' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="testCase" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'testCase' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NUnitTestCaseBuilder" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="CanBuildFrom(System.Reflection.MethodInfo):System.Boolean" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core\Builders" File="NUnitTestCaseBuilder.cs" Line="41">Validate parameter 'method' passed to externally visible method NUnitTestCaseBuilder.CanBuildFrom(MethodInfo):Boolean.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NUnitTestFixtureBuilder" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="CheckSetUpTearDownMethod(System.Type,System.String,System.String,System.String&amp;):System.Boolean" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core\Builders" File="NUnitTestFixtureBuilder.cs" Line="100">The 'this' parameter (or 'Me' in VB) of NUnitTestFixtureBuilder.CheckSetUpTearDownMethod(Type, String, String, String&amp;):Boolean is never used. Mark the member as static (or Shared in VB) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core\Builders" File="NUnitTestFixtureBuilder.cs" Line="110">NUnitTestFixtureBuilder.CheckSetUpTearDownMethod(Type, String, String, String&amp;):Boolean makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core\Builders" File="NUnitTestFixtureBuilder.cs" Line="127">NUnitTestFixtureBuilder.CheckSetUpTearDownMethod(Type, String, String, String&amp;):Boolean makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SetUpFixtureBuilder" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="SetUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'SetUp' in class 'SetUpFixtureBuilder' exists as a discrete term. If your usage is intended to be single word, case it as 'Setup'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="TestAssemblyBuilder" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core\Builders" File="TestAssemblyBuilder.cs" Line="32">TestAssemblyBuilder.TestAssemblyBuilder() initializes field assemblyInfo of type NUnit.Core.TestAssemblyInfo to null. Remove this initialization as it will be done automatically by the runtime.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Build(System.String,System.String,System.Boolean):NUnit.Core.Test" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core\Builders" File="TestAssemblyBuilder.cs" Line="74">Replace the call to String.op_Equality(String.Empty) in 'TestAssemblyBuilder.Build(String, String, Boolean):Test' with a call to String.IsNullOrEmpty.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetCandidateFixtureTypes(System.Reflection.Assembly,System.String):System.Collections.IList" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core\Builders" File="TestAssemblyBuilder.cs" Line="187">The 'this' parameter (or 'Me' in VB) of TestAssemblyBuilder.GetCandidateFixtureTypes(Assembly, String):IList is never used. Mark the member as static (or Shared in VB) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core\Builders" File="TestAssemblyBuilder.cs" Line="190">Replace the call to String.op_Equality(String.Empty) in 'TestAssemblyBuilder.GetCandidateFixtureTypes(Assembly, String):IList' with a call to String.IsNullOrEmpty.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Load(System.String):System.Reflection.Assembly" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core\Builders" File="TestAssemblyBuilder.cs" Line="144">The 'this' parameter (or 'Me' in VB) of TestAssemblyBuilder.Load(String):Assembly is never used. Mark the member as static (or Shared in VB) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="NUnit.Core.Extensibility">
       <Types>
        <Type Name="EventListenerCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="CriticalError">Rename 'NUnit.Core.Extensibility.EventListenerCollection' so that it does not end in 'Collection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="Install(System.Object):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Name="TwoArgumentsSecondShouldBeParameterName" Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core\Extensibility" File="EventListenerCollection.cs" Line="92">Calls to System.ArgumentException's constructor 'ArgumentException.ArgumentException(String, String)' should be in the order message, paramName instead of '__ is not an EventListener', 'exception'. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core\Extensibility" File="EventListenerCollection.cs" Line="92">Validate parameter 'extension' passed to externally visible method EventListenerCollection.Install(Object):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="NUnit.Core.Extensibility.IExtensionPoint.Remove(System.Object):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core\Extensibility" File="EventListenerCollection.cs" Line="99">Make 'EventListenerCollection' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IExtensionPoint.Remove(Object):Void' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FrameworkRegistry" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="GetReferencedFrameworks(System.Reflection.Assembly):System.Collections.IList" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core\Extensibility" File="FrameworkRegistry.cs" Line="44">Validate parameter 'assembly' passed to externally visible method FrameworkRegistry.GetReferencedFrameworks(Assembly):IList.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SuiteBuilderCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="CriticalError">Rename 'NUnit.Core.Extensibility.SuiteBuilderCollection' so that it does not end in 'Collection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name=".ctor(NUnit.Core.Extensibility.SuiteBuilderCollection)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core\Extensibility" File="SuiteBuilderCollection.cs" Line="36">Validate parameter 'other' passed to externally visible method SuiteBuilderCollection.SuiteBuilderCollection(SuiteBuilderCollection).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Install(System.Object):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Name="TwoArgumentsSecondShouldBeParameterName" Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core\Extensibility" File="SuiteBuilderCollection.cs" Line="86">Calls to System.ArgumentException's constructor 'ArgumentException.ArgumentException(String, String)' should be in the order message, paramName instead of '__ is not an ITestCaseBuilder', 'exception'. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core\Extensibility" File="SuiteBuilderCollection.cs" Line="86">Validate parameter 'extension' passed to externally visible method SuiteBuilderCollection.Install(Object):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestCaseBuilderCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="CriticalError">Rename 'NUnit.Core.Extensibility.TestCaseBuilderCollection' so that it does not end in 'Collection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name=".ctor(NUnit.Core.Extensibility.TestCaseBuilderCollection)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core\Extensibility" File="TestCaseBuilderCollection.cs" Line="36">Validate parameter 'other' passed to externally visible method TestCaseBuilderCollection.TestCaseBuilderCollection(TestCaseBuilderCollection).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Install(System.Object):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Name="TwoArgumentsSecondShouldBeParameterName" Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core\Extensibility" File="TestCaseBuilderCollection.cs" Line="88">Calls to System.ArgumentException's constructor 'ArgumentException.ArgumentException(String, String)' should be in the order message, paramName instead of '__ is not an ITestCaseBuilder', 'exception'. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core\Extensibility" File="TestCaseBuilderCollection.cs" Line="88">Validate parameter 'extension' passed to externally visible method TestCaseBuilderCollection.Install(Object):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestDecoratorCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="CriticalError">Rename 'NUnit.Core.Extensibility.TestDecoratorCollection' so that it does not end in 'Collection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name=".ctor(NUnit.Core.Extensibility.TestDecoratorCollection)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core\Extensibility" File="TestDecoratorCollection.cs" Line="26">Validate parameter 'other' passed to externally visible method TestDecoratorCollection.TestDecoratorCollection(TestDecoratorCollection).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Install(System.Object):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Name="TwoArgumentsSecondShouldBeParameterName" Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core\Extensibility" File="TestDecoratorCollection.cs" Line="57">Calls to System.ArgumentException's constructor 'ArgumentException.ArgumentException(String, String)' should be in the order message, paramName instead of '__ is not an ITestDecorator', 'exception'. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\core\Extensibility" File="TestDecoratorCollection.cs" Line="57">Validate parameter 'extension' passed to externally visible method TestDecoratorCollection.Install(Object):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="$(ProjectDir)/../svnccsm/edu.tum.cs.conqat.dotnet/test-data/edu.tum.cs.conqat.dotnet.scope/NUnit_Folder/GuiRunner/nunit-gui/bin/Debug2005/nunit.core.interfaces.dll">
   <Modules>
    <Module Name="nunit.core.interfaces.dll">
     <Messages>
      <Message TypeName="MarkAssembliesWithComVisible" Category="Microsoft.Design" CheckId="CA1017" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
       <Issue Name="NoAttribute" Certainty="95" Level="CriticalError">Mark 'nunit.core.interfaces' as ComVisible(false) at the assembly level, then mark all types within the assembly that should be exposed to Com clients as ComVisible(true).</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="NUnit.Core">
       <Types>
        <Type Name="EventListener" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidOverloadsInComVisibleInterfaces" Category="Microsoft.Interoperability" CheckId="CA1402" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="CriticalWarning">ComVisible(true) interface 'NUnit.Core.EventListener' defines overloaded methods. Give each method a unique name or make the type ComVisible(false).</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Prefix interface name 'EventListener' with 'I'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="TestOutput(NUnit.Core.TestOutput):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldNotMatchMemberNames" Category="Microsoft.Naming" CheckId="CA1719" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change either member or parameter name 'testOutput' so that one differs from the other.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FailureSite" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="SetUp" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SetUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'SetUp' in field 'SetUp' exists as a discrete term. If your usage is intended to be single word, case it as 'Setup'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TearDown" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="TearDown" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'TearDown' in field 'TearDown' exists as a discrete term. If your usage is intended to be single word, case it as 'Teardown'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ResultVisitor" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidOverloadsInComVisibleInterfaces" Category="Microsoft.Interoperability" CheckId="CA1402" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="CriticalWarning">ComVisible(true) interface 'NUnit.Core.ResultVisitor' defines overloaded methods. Give each method a unique name or make the type ComVisible(false).</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Prefix interface name 'ResultVisitor' with 'I'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="RunState" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="NotRunnable" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Runnable" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of the unrecognized token 'Runnable' in member name 'RunState.NotRunnable'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Runnable" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Runnable" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of the unrecognized token 'Runnable' in member name 'RunState.Runnable'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RuntimeFramework" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="GetDisplayName():System.String" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="RuntimeFramework.cs" Line="84">Change 'GetDisplayName' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RuntimeType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="SSCLI" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Member" TypeName="LongAcronymsShouldBePascalCased" Category="Microsoft.Naming" CheckId="CA1705" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the capitalization of member name 'RuntimeType.SSCLI'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Test" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Error">Test should override Equals since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">Test should define operator '!=' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">Test should define operator '&lt;' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">Test should define operator '==' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">Test should define operator '&gt;' since it implements IComparable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name=".ctor(System.Reflection.MethodInfo)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="Test.cs" Line="133">Validate parameter 'method' passed to externally visible method Test.Test(MethodInfo).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name=".ctor(System.String,System.String)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="Test.cs" Line="93">Replace the call to String.op_Equality(String.Empty) in 'Test.Test(String, String)' with a call to String.IsNullOrEmpty.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name=".ctor(System.Type)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="Test.cs" Line="119">Validate parameter 'fixtureType' passed to externally visible method Test.Test(Type).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Categories" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="Test.cs" Line="206">Change 'Categories' to be read-only by removing the property setter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Properties" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="Test.cs" Line="225">Change 'Properties' to be read-only by removing the property setter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SetRunnerID(System.Int32,System.Boolean):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ParameterId" Certainty="85" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="Test.cs" Line="147">'Id' is an abbreviation and therefore is not subject to acronym casing guidelines. Correct the capitalization of 'ID' in parameter name 'runnerID' by changing it to 'Id'.</Issue>
            </Message>
            <Message Id="Member" TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="MemberId" Certainty="85" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="Test.cs" Line="147">'Id' is an abbreviation and therefore is not subject to acronym casing guidelines. Correct the capitalization of 'ID' in member name 'Test.SetRunnerID(Int32, Boolean):Void' by changing it to 'Id'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestCaseResult" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor(NUnit.Core.TestInfo)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestCaseResult.cs" Line="22">Validate parameter 'testCase' passed to externally visible method TestCaseResult.TestCaseResult(TestInfo).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name=".ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="AvoidTypeNamesInParameters" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestCaseResult.cs" Line="29">Remove the type identifier from parameter name 'testCaseString'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Accept(NUnit.Core.ResultVisitor):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestCaseResult.cs" Line="38">Validate parameter 'visitor' passed to externally visible method TestCaseResult.Accept(ResultVisitor):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestFilter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="Empty" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'Empty' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestID" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="TypeId" Certainty="85" Level="Error">'Id' is an abbreviation and therefore is not subject to acronym casing guidelines. Correct the capitalization of 'ID' in type name 'NUnit.Core.TestID' by changing it to 'Id'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="op_Equality(NUnit.Core.TestID,NUnit.Core.TestID):System.Boolean" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestID.cs" Line="118">Validate parameter 'id1' passed to externally visible method TestID.op_Equality(TestID, TestID):Boolean.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Parse(System.String):NUnit.Core.TestID" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ParameterOneLetter" Certainty="75" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestID.cs" Line="66">In method TestID.Parse(String):TestID, consider providing a more meaningful name than the one-letter parameter name 's'.</Issue>
            </Message>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestID.cs" Line="67">TestID.Parse(String):TestID makes a call to System.Int32.Parse(System.String) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Int32.Parse(System.String,System.IFormatProvider).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="ToString():System.String" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestID.cs" Line="102">TestID.ToString():String makes a call to System.Int32.ToString that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Int32.ToString(System.IFormatProvider).</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestInfo" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor(NUnit.Core.ITest)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestInfo.cs" Line="79">Validate parameter 'test' passed to externally visible method TestInfo.TestInfo(ITest).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name=".ctor(NUnit.Core.TestName,NUnit.Core.ITest[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestInfo.cs" Line="111">TestInfo.TestInfo(TestName, ITest[]) initializes field description of type System.String to null. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestInfo.cs" Line="110">TestInfo.TestInfo(TestName, ITest[]) initializes field ignoreReason of type System.String to null. Remove this initialization as it will be done automatically by the runtime.</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestInfo.cs" Line="114">Validate parameter 'tests' passed to externally visible method TestInfo.TestInfo(TestName, ITest[]).</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestInfo.cs" Line="114">Validate parameter 'tests' passed to externally visible method TestInfo.TestInfo(TestName, ITest[]).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="CountTestCases(NUnit.Core.ITestFilter):System.Int32" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestInfo.cs" Line="231">Validate parameter 'filter' passed to externally visible method TestInfo.CountTestCases(ITestFilter):Int32.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestName" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="op_Equality(NUnit.Core.TestName,NUnit.Core.TestName):System.Boolean" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestName.cs" Line="178">Validate parameter 'name1' passed to externally visible method TestName.op_Equality(TestName, TestName):Boolean.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Parse(System.String):NUnit.Core.TestName" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.ArgumentNullException.#ctor(System.String,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestName.cs" Line="103">TestName.Parse(String):TestName passes a literal as parameter 2 of a call to ArgumentNullException.ArgumentNullException(String, String). Retrieve the following string argument from a resource table instead: 'Cannot parse a null string'</Issue>
            </Message>
            <Message Id="System.FormatException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestName.cs" Line="112">TestName.Parse(String):TestName passes a literal as parameter 1 of a call to FormatException.FormatException(String). Retrieve the following string argument from a resource table instead: 'Invalid TestName format: __'</Issue>
            </Message>
            <Message Id="0#s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ParameterOneLetter" Certainty="75" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestName.cs" Line="102">In method TestName.Parse(String):TestName, consider providing a more meaningful name than the one-letter parameter name 's'.</Issue>
            </Message>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestName.cs" Line="118">TestName.Parse(String):TestName makes a call to System.Int32.Parse(System.String) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Int32.Parse(System.String,System.IFormatProvider).</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestName.cs" Line="121">TestName.Parse(String):TestName makes a call to System.Int32.Parse(System.String) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Int32.Parse(System.String,System.IFormatProvider).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="RunnerID" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Member" TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="MemberId" Certainty="85" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestName.cs" Line="56">'Id' is an abbreviation and therefore is not subject to acronym casing guidelines. Correct the capitalization of 'ID' in member name 'TestName.RunnerID:Int32' by changing it to 'Id'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TestID" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Member" TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="MemberId" Certainty="85" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestName.cs" Line="46">'Id' is an abbreviation and therefore is not subject to acronym casing guidelines. Correct the capitalization of 'ID' in member name 'TestName.TestID:TestID' by changing it to 'Id'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="UniqueName" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="get_UniqueName():System.String" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestName.cs" Line="87">TestName.get_UniqueName():String makes a call to System.String.Format(System.String,System.Object,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
              </Message>
              <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestName.cs" Line="89">TestName.get_UniqueName():String makes a call to System.String.Format(System.String,System.Object,System.Object,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="TestNode" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor(NUnit.Core.ITest)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestNode.cs" Line="42">'TestNode.TestNode(ITest)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;TestNode.TestNode(ITest)&#xD;&#xA;TestInfo.get_Tests():IList</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestNode.cs" Line="44">Validate parameter 'test' passed to externally visible method TestNode.TestNode(ITest).</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestPackage" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor(System.String,System.Collections.IList)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestPackage.cs" Line="67">TestPackage.TestPackage(String, IList) initializes field isSingleAssembly of type System.Boolean to false. Remove this initialization as it will be done automatically by the runtime.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="IsAssemblyFileType(System.String):System.Boolean" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="stack0" TypeName="AvoidUnnecessaryStringCreation" Category="Microsoft.Performance" CheckId="CA1807" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Name="UseStringCompareLocal" Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestPackage.cs" Line="175">TestPackage.IsAssemblyFileType(String):Boolean calls String.op_Equality(String, String):Boolean after converting 'stack0', a local, to upper or lowercase. If possible, eliminate the string creation and call the overload of String.Compare that performs a case-insensitive comparison.</Issue>
             <Issue Name="UseStringCompareLocal" Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestPackage.cs" Line="175">TestPackage.IsAssemblyFileType(String):Boolean calls String.op_Equality(String, String):Boolean after converting 'stack0', a local, to upper or lowercase. If possible, eliminate the string creation and call the overload of String.Compare that performs a case-insensitive comparison.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestPackage.cs" Line="174">TestPackage.IsAssemblyFileType(String):Boolean makes a call to System.String.ToLower that does not explicitly provide a CultureInfo. This should be replaced with a call to System.String.ToLower(System.Globalization.CultureInfo).</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestResult" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor(NUnit.Core.TestInfo,System.String)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestResult.cs" Line="70">TestResult.TestResult(TestInfo, String) initializes field assertCount of type System.Int32 to 0. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestResult.cs" Line="40">TestResult.TestResult(TestInfo, String) initializes field time of type System.Double to 0.0. Remove this initialization as it will be done automatically by the runtime.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="BuildMessage(System.Exception):System.String" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestResult.cs" Line="374">The 'this' parameter (or 'Me' in VB) of TestResult.BuildMessage(Exception):String is never used. Mark the member as static (or Shared in VB) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetStackTrace(System.Exception):System.String" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestResult.cs" Line="414">Modify 'TestResult.GetStackTrace(Exception):String' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestResult.cs" Line="409">The 'this' parameter (or 'Me' in VB) of TestResult.GetStackTrace(Exception):String is never used. Mark the member as static (or Shared in VB) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Ignore(System.Exception):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestResult.cs" Line="248">Validate parameter 'ex' passed to externally visible method TestResult.Ignore(Exception):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="messageString" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'messageString' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Skip(System.Exception):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestResult.cs" Line="276">Validate parameter 'ex' passed to externally visible method TestResult.Skip(Exception):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestRunner" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidOverloadsInComVisibleInterfaces" Category="Microsoft.Interoperability" CheckId="CA1402" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="CriticalWarning">ComVisible(true) interface 'NUnit.Core.TestRunner' defines overloaded methods. Give each method a unique name or make the type ComVisible(false).</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Prefix interface name 'TestRunner' with 'I'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="ID" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Member" TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="MemberId" Certainty="85" Level="Error">'Id' is an abbreviation and therefore is not subject to acronym casing guidelines. Correct the capitalization of 'ID' in member name 'TestRunner.ID:Int32' by changing it to 'Id'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestSuiteResult" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="AvoidTypeNamesInParameters" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestSuiteResult.cs" Line="21">Remove the type identifier from parameter name 'testSuiteString'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Accept(NUnit.Core.ResultVisitor):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestSuiteResult.cs" Line="69">Validate parameter 'visitor' passed to externally visible method TestSuiteResult.Accept(ResultVisitor):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="AddResult(NUnit.Core.TestResult):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NUnit.Core.TestResult.Failure(System.String,System.String,NUnit.Core.FailureSite)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestSuiteResult.cs" Line="51">TestSuiteResult.AddResult(TestResult):Void passes a literal as parameter 1 of a call to TestResult.Failure(String, String, FailureSite):Void. Retrieve the following string argument from a resource table instead: 'Child test failed'</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces" File="TestSuiteResult.cs" Line="48">Validate parameter 'result' passed to externally visible method TestSuiteResult.AddResult(TestResult):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="NUnit.Core.Extensibility">
       <Types>
        <Type Name="Addin" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Addin" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of the unrecognized token 'Addin' in type name 'NUnit.Core.Extensibility.Addin'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name=".ctor(System.Type)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces\Extensibility" File="Addin.cs" Line="33">Validate parameter 'type' passed to externally visible method Addin.Addin(Type).</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AddinStatus" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Addin" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of the unrecognized token 'Addin' in type name 'NUnit.Core.Extensibility.AddinStatus'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ExtensionType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="FlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1714" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Error">If enumeration name 'ExtensionType' is singular, change it to a plural form.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="IAddin" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Addin" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of the unrecognized token 'Addin' in type name 'NUnit.Core.Extensibility.IAddin'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="IAddinRegistry" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Addin" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of the unrecognized token 'Addin' in type name 'NUnit.Core.Extensibility.IAddinRegistry'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="Addins" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Addins" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of the unrecognized token 'Addins' in member name 'IAddinRegistry.Addins:IList'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Register(NUnit.Core.Extensibility.Addin):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#addin" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning">In method IAddinRegistry.Register(Addin):Void, correct the spelling of the unrecognized token 'addin' in parameter name 'addin' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IExtensionHost" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="ExtensionPoints" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change IExtensionHost.ExtensionPoints:IExtensionPoint[] to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NUnitAddinAttribute" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Addin" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of the unrecognized token 'Addin' in type name 'NUnit.Core.Extensibility.NUnitAddinAttribute'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="Description" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'Description' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Name" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'Name' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Type" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'Type' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestFramework" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="AssemblyName" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'AssemblyName' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Name" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'Name' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="NUnit.Core.Filters">
       <Types>
        <Type Name="CategoryFilter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="Match(NUnit.Core.ITest):System.Boolean" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces\Filters" File="CategoryFilter.cs" Line="68">Validate parameter 'test' passed to externally visible method CategoryFilter.Match(ITest):Boolean.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NameFilter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="Match(NUnit.Core.ITest):System.Boolean" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces\Filters" File="NameFilter.cs" Line="52">Validate parameter 'test' passed to externally visible method NameFilter.Match(ITest):Boolean.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NotFilter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="Match(NUnit.Core.ITest):System.Boolean" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces\Filters" File="NotFilter.cs" Line="42">Validate parameter 'test' passed to externally visible method NotFilter.Match(ITest):Boolean.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SimpleNameFilter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="Match(NUnit.Core.ITest):System.Boolean" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\NUnitCore\interfaces\Filters" File="SimpleNameFilter.cs" Line="51">Validate parameter 'test' passed to externally visible method SimpleNameFilter.Match(ITest):Boolean.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="$(ProjectDir)/../svnccsm/edu.tum.cs.conqat.dotnet/test-data/edu.tum.cs.conqat.dotnet.scope/NUnit_Folder/GuiRunner/nunit-gui/bin/Debug2005/nunit.uikit.dll">
   <Modules>
    <Module Name="nunit.uikit.dll">
     <Messages>
      <Message TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
       <Issue Name="NoAttr" Certainty="95" Level="Error">'nunit.uikit' should be marked with CLSCompliantAttribute and its value should be true.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithComVisible" Category="Microsoft.Design" CheckId="CA1017" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
       <Issue Name="NoAttribute" Certainty="95" Level="CriticalError">Mark 'nunit.uikit' as ComVisible(false) at the assembly level, then mark all types within the assembly that should be exposed to Com clients as ComVisible(true).</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="CP.Windows.Forms">
       <Types>
        <Type Name="ExpandingLabel" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ExpandingLabel.cs" Line="44">ExpandingLabel.ExpandingLabel() initializes field autoCloseDelay of type System.Int32 to 0. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ExpandingLabel.cs" Line="56">ExpandingLabel.ExpandingLabel() initializes field copySupported of type System.Boolean to false. Remove this initialization as it will be done automatically by the runtime.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Text" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="set_Text(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Windows.Forms.MenuItem.#ctor(System.String,System.EventHandler)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ExpandingLabel.cs" Line="145">ExpandingLabel.set_Text(String):Void passes a literal as parameter 1 of a call to MenuItem.MenuItem(String, EventHandler). Retrieve the following string argument from a resource table instead: 'Copy'</Issue>
              </Message>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ExpandingLabel.cs" Line="134">Replace the call to String.op_Equality(String.Empty) in 'ExpandingLabel.set_Text(String):Void' with a call to String.IsNullOrEmpty.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="Unexpand():System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Unexpand" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ExpandingLabel.cs" Line="172">Correct the spelling of the unrecognized token 'Unexpand' in member name 'ExpandingLabel.Unexpand():Void'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExpandingTextBox" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ExpandingTextBox.cs" Line="55">ExpandingTextBox.ExpandingTextBox() initializes field autoCloseDelay of type System.Int32 to 0. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ExpandingTextBox.cs" Line="67">ExpandingTextBox.ExpandingTextBox() initializes field copySupported of type System.Boolean to false. Remove this initialization as it will be done automatically by the runtime.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Text" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="set_Text(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Windows.Forms.MenuItem.#ctor(System.String,System.EventHandler)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ExpandingTextBox.cs" Line="186">ExpandingTextBox.set_Text(String):Void passes a literal as parameter 1 of a call to MenuItem.MenuItem(String, EventHandler). Retrieve the following string argument from a resource table instead: 'Copy'</Issue>
              </Message>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ExpandingTextBox.cs" Line="175">Replace the call to String.op_Equality(String.Empty) in 'ExpandingTextBox.set_Text(String):Void' with a call to String.IsNullOrEmpty.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="Unexpand():System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Unexpand" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ExpandingTextBox.cs" Line="213">Correct the spelling of the unrecognized token 'Unexpand' in member name 'ExpandingTextBox.Unexpand():Void'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TipWindow" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor(System.Windows.Forms.Control)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TipWindow.cs" Line="59">TipWindow.TipWindow(Control) initializes field autoCloseDelay of type System.Int32 to 0. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TipWindow.cs" Line="85">TipWindow.TipWindow(Control) initializes field wantClicks of type System.Boolean to false. Remove this initialization as it will be done automatically by the runtime.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name=".ctor(System.Windows.Forms.ListBox,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#listbox" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TipWindow.cs" Line="102">In method TipWindow.TipWindow(ListBox, Int32), correct the spelling of the unrecognized token 'listbox' in parameter name 'listbox' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr):System.UInt32" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a DllImport method, TipWindow.SendMessage(IntPtr, Int32, IntPtr, IntPtr):UInt32 should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="return" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Name="Return" Certainty="95" Level="Error">As it is declared in your code, the return type of PInvoke TipWindow.SendMessage(IntPtr, Int32, IntPtr, IntPtr):UInt32 will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 8 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'System.UInt32'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="WndProc(System.Windows.Forms.Message&amp;):System.Void" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="BaseOnly" Certainty="33" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TipWindow.cs" Line="326">Add the following security attribute to TipWindow.WndProc(Message&amp;):Void in order to match a LinkDemand on base method Form.WndProc(Message&amp;):Void:  [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)].</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="WaitCursor" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on CP.Windows.Forms.WaitCursor or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name=".ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="WaitCursor.cs" Line="32">WaitCursor.WaitCursor() initializes field control of type System.Windows.Forms.Control to null. Remove this initialization as it will be done automatically by the runtime.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name=".ctor(System.Windows.Forms.Control)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="WaitCursor.cs" Line="40">Validate parameter 'control' passed to externally visible method WaitCursor.WaitCursor(Control).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Dispose():System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="WaitCursor.cs" Line="45">Modify WaitCursor.Dispose():Void so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in VB), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="CP.Windows.Shell">
       <Types>
        <Type Name="FolderBrowser" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnNativeResourcesShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1049" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
           <Issue Certainty="50" Level="CriticalError">Implement IDisposable on 'FolderBrowser'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name=".ctor(System.Windows.Forms.Form,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="FolderBrowser.cs" Line="22">FolderBrowser.FolderBrowser(Form, Int32) initializes field caption of type System.String to null. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="FolderBrowser.cs" Line="26">FolderBrowser.FolderBrowser(Form, Int32) initializes field selection of type System.String to null. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="FolderBrowser.cs" Line="24">FolderBrowser.FolderBrowser(Form, Int32) initializes field title of type System.String to null. Remove this initialization as it will be done automatically by the runtime.</Issue>
            </Message>
            <Message Id="1#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="FolderBrowser.cs" Line="22">In method FolderBrowser.FolderBrowser(Form, Int32), correct the spelling of the unrecognized token 'n' in parameter name 'nFolder' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name=".ctor(System.Windows.Forms.Form,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="FolderBrowser.cs" Line="22">FolderBrowser.FolderBrowser(Form, String) initializes field caption of type System.String to null. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="FolderBrowser.cs" Line="26">FolderBrowser.FolderBrowser(Form, String) initializes field selection of type System.String to null. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="FolderBrowser.cs" Line="24">FolderBrowser.FolderBrowser(Form, String) initializes field title of type System.String to null. Remove this initialization as it will be done automatically by the runtime.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="InitialSelection" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotBeWriteOnly" Category="Microsoft.Design" CheckId="CA1044" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="FolderBrowser.cs" Line="82">Add a property getter to 'InitialSelection'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SendMessage(System.IntPtr,System.UInt32,System.Int32,System.String):System.UInt32" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a DllImport method, FolderBrowser.SendMessage(IntPtr, UInt32, Int32, String):UInt32 should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SetWindowText(System.IntPtr,System.String):System.UInt32" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a DllImport method, FolderBrowser.SetWindowText(IntPtr, String):UInt32 should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SHBrowseForFolder(CP.Windows.Shell.FolderBrowser+BROWSEINFO&amp;):System.IntPtr" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a DllImport method, FolderBrowser.SHBrowseForFolder(BROWSEINFO&amp;):IntPtr should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SHGetDesktopFolder(CP.Windows.Shell.FolderBrowser+IShellFolder&amp;):System.UInt32" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a DllImport method, FolderBrowser.SHGetDesktopFolder(IShellFolder&amp;):UInt32 should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SHGetPathFromIDList(System.IntPtr,System.Text.StringBuilder):System.UInt32" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a DllImport method, FolderBrowser.SHGetPathFromIDList(IntPtr, StringBuilder):UInt32 should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SHGetSpecialFolderLocation(System.IntPtr,System.Int32,System.IntPtr&amp;):System.UInt32" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a DllImport method, FolderBrowser.SHGetSpecialFolderLocation(IntPtr, Int32, IntPtr&amp;):UInt32 should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FolderBrowser+IShellFolder" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'CP.Windows.Shell.FolderBrowser+IShellFolder'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="BindToObject(System.IntPtr,System.IntPtr,System.Guid&amp;,CP.Windows.Shell.FolderBrowser+IShellFolder&amp;):System.Int32" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="2#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'refiid' be a reference parameter.</Issue>
            </Message>
            <Message Id="3#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning">Consider a design that does not require that 'folder' be a reference parameter.</Issue>
            </Message>
            <Message Id="2#refiid" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning">In method IShellFolder.BindToObject(IntPtr, IntPtr, Guid&amp;, IShellFolder&amp;):Int32, correct the spelling of the unrecognized token 'refiid' in parameter name 'refiid' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="BindToStorage(System.IntPtr&amp;,System.IntPtr,System.Guid&amp;,System.IntPtr):System.Int32" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="2#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'riid' be a reference parameter.</Issue>
            </Message>
            <Message Id="2#riid" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning">In method IShellFolder.BindToStorage(IntPtr&amp;, IntPtr, Guid&amp;, IntPtr):Int32, correct the spelling of the unrecognized token 'riid' in parameter name 'riid' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
            <Message Id="3#p" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning">In method IShellFolder.BindToStorage(IntPtr&amp;, IntPtr, Guid&amp;, IntPtr):Int32, correct the spelling of the unrecognized token 'p' in parameter name 'pVoid' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="CompareIDs(System.Int32,System.IntPtr,System.IntPtr):System.Int32" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#lparam" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning">In method IShellFolder.CompareIDs(Int32, IntPtr, IntPtr):Int32, correct the spelling of the unrecognized token 'lparam' in parameter name 'lparam' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="CreateViewObject(System.IntPtr,System.Guid,System.IntPtr):System.Int32" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#Wnd" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning">In method IShellFolder.CreateViewObject(IntPtr, Guid, IntPtr):Int32, correct the spelling of the unrecognized token 'Wnd' in parameter name 'hWnd' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
            <Message Id="0#h" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning">In method IShellFolder.CreateViewObject(IntPtr, Guid, IntPtr):Int32, correct the spelling of the unrecognized token 'h' in parameter name 'hWnd' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
            <Message Id="1#riid" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning">In method IShellFolder.CreateViewObject(IntPtr, Guid, IntPtr):Int32, correct the spelling of the unrecognized token 'riid' in parameter name 'riid' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
            <Message Id="2#p" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning">In method IShellFolder.CreateViewObject(IntPtr, Guid, IntPtr):Int32, correct the spelling of the unrecognized token 'p' in parameter name 'pVoid' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="EnumObjects(System.IntPtr,System.Int32,System.IntPtr&amp;):System.Int32" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#Wnd" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning">In method IShellFolder.EnumObjects(IntPtr, Int32, IntPtr&amp;):Int32, correct the spelling of the unrecognized token 'Wnd' in parameter name 'hWnd' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
            <Message Id="0#h" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning">In method IShellFolder.EnumObjects(IntPtr, Int32, IntPtr&amp;):Int32, correct the spelling of the unrecognized token 'h' in parameter name 'hWnd' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetAttributesOf(System.Int32,System.IntPtr&amp;,System.Int32&amp;):System.Int32" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'attributes' be an out parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetDisplayNameOf(System.IntPtr,System.Int32,System.Text.StringBuilder&amp;):System.Int32" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="2#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning">Consider a design that does not require that 'strRet' be a reference parameter.</Issue>
            </Message>
            <Message Id="2#str" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning">In method IShellFolder.GetDisplayNameOf(IntPtr, Int32, StringBuilder&amp;):Int32, correct the spelling of the unrecognized token 'str' in parameter name 'strRet' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetUIObjectOf(System.IntPtr,System.Int32,System.IntPtr&amp;,System.Guid&amp;,System.Int32&amp;,System.IntPtr&amp;):System.Int32" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="4#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'arrayInOut' be an out parameter.</Issue>
            </Message>
            <Message Id="3#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'riid' be a reference parameter.</Issue>
            </Message>
            <Message Id="0#Wnd" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning">In method IShellFolder.GetUIObjectOf(IntPtr, Int32, IntPtr&amp;, Guid&amp;, Int32&amp;, IntPtr&amp;):Int32, correct the spelling of the unrecognized token 'Wnd' in parameter name 'hWnd' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
            <Message Id="0#h" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning">In method IShellFolder.GetUIObjectOf(IntPtr, Int32, IntPtr&amp;, Guid&amp;, Int32&amp;, IntPtr&amp;):Int32, correct the spelling of the unrecognized token 'h' in parameter name 'hWnd' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
            <Message Id="3#riid" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning">In method IShellFolder.GetUIObjectOf(IntPtr, Int32, IntPtr&amp;, Guid&amp;, Int32&amp;, IntPtr&amp;):Int32, correct the spelling of the unrecognized token 'riid' in parameter name 'riid' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
            <Message Id="5#i" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning">In method IShellFolder.GetUIObjectOf(IntPtr, Int32, IntPtr&amp;, Guid&amp;, Int32&amp;, IntPtr&amp;):Int32, correct the spelling of the unrecognized token 'i' in parameter name 'iUnknown' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="ParseDisplayName(System.IntPtr,System.IntPtr,System.String,System.Int32&amp;,System.IntPtr&amp;,System.Int32&amp;):System.Int32" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'chEaten' be an out parameter.</Issue>
            </Message>
            <Message Id="0#Wnd" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning">In method IShellFolder.ParseDisplayName(IntPtr, IntPtr, String, Int32&amp;, IntPtr&amp;, Int32&amp;):Int32, correct the spelling of the unrecognized token 'Wnd' in parameter name 'hWnd' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
            <Message Id="0#h" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning">In method IShellFolder.ParseDisplayName(IntPtr, IntPtr, String, Int32&amp;, IntPtr&amp;, Int32&amp;):Int32, correct the spelling of the unrecognized token 'h' in parameter name 'hWnd' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SetNameOf(System.IntPtr,System.IntPtr&amp;,System.IntPtr,System.Int32,System.IntPtr&amp;):System.Int32" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#Wnd" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning">In method IShellFolder.SetNameOf(IntPtr, IntPtr&amp;, IntPtr, Int32, IntPtr&amp;):Int32, correct the spelling of the unrecognized token 'Wnd' in parameter name 'hWnd' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
            <Message Id="0#h" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning">In method IShellFolder.SetNameOf(IntPtr, IntPtr&amp;, IntPtr, Int32, IntPtr&amp;):Int32, correct the spelling of the unrecognized token 'h' in parameter name 'hWnd' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
            <Message Id="2#p" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning">In method IShellFolder.SetNameOf(IntPtr, IntPtr&amp;, IntPtr, Int32, IntPtr&amp;):Int32, correct the spelling of the unrecognized token 'p' in parameter name 'pOLEString' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
            <Message Id="4#p" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning">In method IShellFolder.SetNameOf(IntPtr, IntPtr&amp;, IntPtr, Int32, IntPtr&amp;):Int32, correct the spelling of the unrecognized token 'p' in parameter name 'pItemIDList' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
            <Message Id="2#" TypeName="LongAcronymsShouldBePascalCased" Category="Microsoft.Naming" CheckId="CA1705" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="85" Level="Error">Correct the capitalization of parameter name 'pOLEString'.</Issue>
            </Message>
            <Message Id="4#" TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ParameterId" Certainty="85" Level="Error">'Id' is an abbreviation and therefore is not subject to acronym casing guidelines. Correct the capitalization of 'ID' in parameter name 'pItemIDList' by changing it to 'Id'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="NUnit.UiKit">
       <Types>
        <Type Name="AddConfigurationDialog" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="InitializeComponent():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="AddConfigurationDialog.cs" Line="89">AddConfigurationDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: ''</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="AddConfigurationDialog.cs" Line="110">AddConfigurationDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Cancel'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="AddConfigurationDialog.cs" Line="129">AddConfigurationDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Configuration Name:'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="AddConfigurationDialog.cs" Line="138">AddConfigurationDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Copy Settings From:'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="AddConfigurationDialog.cs" Line="157">AddConfigurationDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'New Configuration'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="AddConfigurationDialog.cs" Line="99">AddConfigurationDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'OK'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="okButton_Click(System.Object,System.EventArgs):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="NUnit.UiKit.UserMessage.Display(System.String,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="AddConfigurationDialog.cs" Line="206">AddConfigurationDialog.okButton_Click(Object, EventArgs):Void passes a literal as parameter 1 of a call to UserMessage.Display(String, String):DialogResult. Retrieve the following string argument from a resource table instead: 'A configuration with that name already exists'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="AddConfigurationDialog.cs" Line="199">AddConfigurationDialog.okButton_Click(Object, EventArgs):Void passes a literal as parameter 1 of a call to UserMessage.Display(String, String):DialogResult. Retrieve the following string argument from a resource table instead: 'No configuration name provided'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="AddConfigurationDialog.cs" Line="206">AddConfigurationDialog.okButton_Click(Object, EventArgs):Void passes a literal as parameter 2 of a call to UserMessage.Display(String, String):DialogResult. Retrieve the following string argument from a resource table instead: 'Configuration Name Error'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="AddConfigurationDialog.cs" Line="199">AddConfigurationDialog.okButton_Click(Object, EventArgs):Void passes a literal as parameter 2 of a call to UserMessage.Display(String, String):DialogResult. Retrieve the following string argument from a resource table instead: 'Configuration Name Error'</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="AddConfigurationDialog.cs" Line="197">Replace the call to String.op_Equality(String.Empty) in 'AddConfigurationDialog.okButton_Click(Object, EventArgs):Void' with a call to String.IsNullOrEmpty.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AppContainer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ComVisibleTypeBaseTypesShouldBeComVisible" Category="Microsoft.Interoperability" CheckId="CA1405" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="DependsOnFix">
           <Issue Certainty="90" Level="Error">'NUnit.UiKit.AppContainer' is marked ComVisible(true) but has the following ComVisible(false) types in its object hierarchy:  System.ComponentModel.Container</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="GetSite(System.Windows.Forms.Control):System.ComponentModel.ISite" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="AppContainer.cs" Line="49">Validate parameter 'control' passed to externally visible method AppContainer.GetSite(Control):ISite.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AssemblyListBox" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="AssemblyListBox.cs" Line="43">AssemblyListBox.AssemblyListBox() initializes field autoCloseDelay of type System.Int32 to 0. Remove this initialization as it will be done automatically by the runtime.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="OnMouseHover(System.Object,System.EventArgs):System.Void" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ReviewVisibleEventHandlers" Category="Microsoft.Security" CheckId="CA2109" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="40" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="AssemblyListBox.cs" Line="107">Consider making AssemblyListBox.OnMouseHover(Object, EventArgs):Void not externally visible.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AssemblyPathDialog" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="InitializeComponent():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="AssemblyPathDialog.cs" Line="88">AssemblyPathDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: ''</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="AssemblyPathDialog.cs" Line="138">AssemblyPathDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Assembly Path'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="AssemblyPathDialog.cs" Line="110">AssemblyPathDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Cancel'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="AssemblyPathDialog.cs" Line="98">AssemblyPathDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'OK'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="okButton_Click(System.Object,System.EventArgs):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="AssemblyPathDialog.cs" Line="165">Modify 'AssemblyPathDialog.okButton_Click(Object, EventArgs):Void' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="NUnit.UiKit.UserMessage.DisplayFailure(System.Exception,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="AssemblyPathDialog.cs" Line="168">AssemblyPathDialog.okButton_Click(Object, EventArgs):Void passes a literal as parameter 2 of a call to UserMessage.DisplayFailure(Exception, String):DialogResult. Retrieve the following string argument from a resource table instead: 'Invalid Entry'</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="AssemblyPathDialog.cs" Line="155">AssemblyPathDialog.okButton_Click(Object, EventArgs):Void makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CheckedTestFinder" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="isSelected(NUnit.UiKit.CheckedTestFinder+CheckedTestInfo,NUnit.UiKit.CheckedTestFinder+SelectionFlags):System.Boolean" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestSuiteTreeView.cs" Line="1326">The 'this' parameter (or 'Me' in VB) of CheckedTestFinder.isSelected(CheckedTestInfo, SelectionFlags):Boolean is never used. Mark the member as static (or Shared in VB) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ColorProgressBar" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ProgressBar.cs" Line="67">ColorProgressBar.ColorProgressBar() initializes field backBrush of type System.Drawing.Brush to null. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ProgressBar.cs" Line="62">ColorProgressBar.ColorProgressBar() initializes field foreBrush of type System.Drawing.Brush to null. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ProgressBar.cs" Line="57">ColorProgressBar.ColorProgressBar() initializes field lastSegmentCount of type System.Int32 to 0. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ProgressBar.cs" Line="41">ColorProgressBar.ColorProgressBar() initializes field min of type System.Int32 to 0. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ProgressBar.cs" Line="72">ColorProgressBar.ColorProgressBar() initializes field segmented of type System.Boolean to false. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ProgressBar.cs" Line="36">ColorProgressBar.ColorProgressBar() initializes field val of type System.Int32 to 0. Remove this initialization as it will be done automatically by the runtime.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Maximum" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="set_Maximum(System.Int32):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ProgressBar.cs" Line="142">ColorProgressBar.set_Maximum(Int32):Void passes a literal as parameter 3 of a call to ArgumentOutOfRangeException.ArgumentOutOfRangeException(String, Object, String). Retrieve the following string argument from a resource table instead: 'Maximum must be &gt;= Minimum.'</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="Minimum" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="set_Minimum(System.Int32):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ProgressBar.cs" Line="120">ColorProgressBar.set_Minimum(Int32):Void passes a literal as parameter 3 of a call to ArgumentOutOfRangeException.ArgumentOutOfRangeException(String, Object, String). Retrieve the following string argument from a resource table instead: 'Minimum must be &lt;= Maximum.'</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="Step" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="set_Step(System.Int32):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ProgressBar.cs" Line="160">ColorProgressBar.set_Step(Int32):Void passes a literal as parameter 3 of a call to ArgumentOutOfRangeException.ArgumentOutOfRangeException(String, Object, String). Retrieve the following string argument from a resource table instead: 'Must fall between Minimum and Maximum inclusive.'</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="Value" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="set_Value(System.Int32):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ProgressBar.cs" Line="193">ColorProgressBar.set_Value(Int32):Void passes a literal as parameter 3 of a call to ArgumentOutOfRangeException.ArgumentOutOfRangeException(String, Object, String). Retrieve the following string argument from a resource table instead: 'Must fall between Minimum and Maximum inclusive.'</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ConfigurationEditor" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="FillListBox():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotConcatenateStringsInsideLoops" Category="Microsoft.Performance" CheckId="CA1818" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ConfigurationEditor.cs" Line="273">Change ConfigurationEditor.FillListBox():Void to use StringBuilder instead of String.Concat or +=</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="InitializeComponent():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ConfigurationEditor.cs" Line="142">ConfigurationEditor.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Add...'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ConfigurationEditor.cs" Line="154">ConfigurationEditor.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Make Active'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ConfigurationEditor.cs" Line="105">ConfigurationEditor.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Remove'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ConfigurationEditor.cs" Line="130">ConfigurationEditor.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Close'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ConfigurationEditor.cs" Line="179">ConfigurationEditor.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'ConfigurationEditor'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ConfigurationEditor.cs" Line="117">ConfigurationEditor.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Re&amp;name'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="removeButton_Click(System.Object,System.EventArgs):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="NUnit.UiKit.UserMessage.Ask(System.String,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ConfigurationEditor.cs" Line="201">ConfigurationEditor.removeButton_Click(Object, EventArgs):Void passes a literal as parameter 1 of a call to UserMessage.Ask(String, String):DialogResult. Retrieve the following string argument from a resource table instead: 'Removing the last configuration will make the project unloadable until you add another configuration.&#xD;&#xD;Are you sure you want to remove the configuration?'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ConfigurationEditor.cs" Line="201">ConfigurationEditor.removeButton_Click(Object, EventArgs):Void passes a literal as parameter 2 of a call to UserMessage.Ask(String, String):DialogResult. Retrieve the following string argument from a resource table instead: 'Remove Configuration'</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ErrorDisplay" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ErrorDisplay.cs" Line="24">ErrorDisplay.ErrorDisplay() initializes field settings of type NUnit.Util.ISettings to null. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ErrorDisplay.cs" Line="28">ErrorDisplay.ErrorDisplay() initializes field wordWrap of type System.Boolean to false. Remove this initialization as it will be done automatically by the runtime.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Clear():System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ErrorDisplay.cs" Line="194">ErrorDisplay.Clear():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: ''</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="detailList_MouseMove(System.Object,System.Windows.Forms.MouseEventArgs):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotUseTimersThatPreventPowerStateChanges" Category="Microsoft.Mobility" CheckId="CA1601" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ErrorDisplay.cs" Line="331">Modify the call to Timer.set_Interval(Int32):Void in method ErrorDisplay.detailList_MouseMove(Object, MouseEventArgs):Void to set the timer interval to a value that's greater than or equal to one second.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="InitializeComponent():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ErrorDisplay.cs" Line="135">ErrorDisplay.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: ''</Issue>
            </Message>
            <Message Id="System.Windows.Forms.MenuItem.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ErrorDisplay.cs" Line="147">ErrorDisplay.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Copy'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="OnTestException(System.Object,NUnit.Util.TestEventArgs):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ErrorDisplay.cs" Line="389">ErrorDisplay.OnTestException(Object, TestEventArgs):Void makes a call to System.String.Format(System.String,System.Object,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="stackTrace" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'stackTrace' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Subscribe(NUnit.Util.ITestEvents):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ErrorDisplay.cs" Line="365">Validate parameter 'events' passed to externally visible method ErrorDisplay.Subscribe(ITestEvents):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="tabSplitter" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'tabSplitter' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FailedTestsFilterVisitor" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="Filter" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="get_Filter():NUnit.Core.TestFilter" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestSuiteTreeView.cs" Line="1242">'FailedTestsFilterVisitor.get_Filter():TestFilter' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="GuiTestEventDispatcher" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="InvokeHandler(System.MulticastDelegate,System.EventArgs):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="GuiTestEventDispatcher.cs" Line="47">Modify 'GuiTestEventDispatcher.InvokeHandler(MulticastDelegate, EventArgs):Void' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LongRunningOperationDisplay" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor(System.Windows.Forms.Form,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="LongRunningOperationDisplay.cs" Line="34">Validate parameter 'owner' passed to externally visible method LongRunningOperationDisplay.LongRunningOperationDisplay(Form, String).</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NotRunTree" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="AddNode(NUnit.Core.TestResult):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.TreeNode.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="NotRunTree.cs" Line="59">NotRunTree.AddNode(TestResult):Void passes a literal as parameter 1 of a call to TreeNode.TreeNode(String). Retrieve the following string argument from a resource table instead: 'Reason: __'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Subscribe(NUnit.Util.ITestEvents):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="NotRunTree.cs" Line="30">Validate parameter 'events' passed to externally visible method NotRunTree.Subscribe(ITestEvents):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RecentFileMenuHandler" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor(System.Windows.Forms.MenuItem,NUnit.Util.RecentFiles)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="RecentFileMenuHandler.cs" Line="18">RecentFileMenuHandler.RecentFileMenuHandler(MenuItem, RecentFiles) initializes field showMissingFiles of type System.Boolean to false. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="RecentFileMenuHandler.cs" Line="19">RecentFileMenuHandler.RecentFileMenuHandler(MenuItem, RecentFiles) initializes field showNonRunnableFiles of type System.Boolean to false. Remove this initialization as it will be done automatically by the runtime.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Load():System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="RecentFileMenuHandler.cs" Line="67">RecentFileMenuHandler.Load():Void makes a call to System.String.Format(System.String,System.Object,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="ShowNonRunnableFiles" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Runnable" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="RecentFileMenuHandler.cs" Line="35">Correct the spelling of the unrecognized token 'Runnable' in member name 'RecentFileMenuHandler.ShowNonRunnableFiles:Boolean'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RenameConfigurationDialog" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="InitializeComponent():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="RenameConfigurationDialog.cs" Line="94">RenameConfigurationDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: ''</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="RenameConfigurationDialog.cs" Line="115">RenameConfigurationDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Cancel'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="RenameConfigurationDialog.cs" Line="104">RenameConfigurationDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'OK'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="RenameConfigurationDialog.cs" Line="131">RenameConfigurationDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Rename Configuration'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="okButton_Click(System.Object,System.EventArgs):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="NUnit.UiKit.UserMessage.DisplayFailure(System.String,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="RenameConfigurationDialog.cs" Line="160">RenameConfigurationDialog.okButton_Click(Object, EventArgs):Void passes a literal as parameter 1 of a call to UserMessage.DisplayFailure(String, String):DialogResult. Retrieve the following string argument from a resource table instead: 'A configuration with that name already exists'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="RenameConfigurationDialog.cs" Line="160">RenameConfigurationDialog.okButton_Click(Object, EventArgs):Void passes a literal as parameter 2 of a call to UserMessage.DisplayFailure(String, String):DialogResult. Retrieve the following string argument from a resource table instead: 'Configuration Name Error'</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ResultTabs" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Windows.Forms.MenuItem.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ResultTabs.cs" Line="83">ResultTabs.ResultTabs() passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Errors &amp;&amp; Failures'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ResultTabs.cs" Line="106">ResultTabs.ResultTabs() passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Internal Trace'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ResultTabs.cs" Line="79">ResultTabs.ResultTabs() passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Result Tabs'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ResultTabs.cs" Line="99">ResultTabs.ResultTabs() passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Trace Output'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ResultTabs.cs" Line="103">ResultTabs.ResultTabs() passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '-'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ResultTabs.cs" Line="95">ResultTabs.ResultTabs() passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Console.&amp;Error'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ResultTabs.cs" Line="91">ResultTabs.ResultTabs() passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Console.&amp;Out'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ResultTabs.cs" Line="87">ResultTabs.ResultTabs() passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Tests &amp;Not Run'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="InitializeComponent():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ResultTabs.cs" Line="224">ResultTabs.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Console.Error'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ResultTabs.cs" Line="214">ResultTabs.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Console.Out'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ResultTabs.cs" Line="174">ResultTabs.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Errors and Failures'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ResultTabs.cs" Line="244">ResultTabs.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Internal Trace'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ResultTabs.cs" Line="191">ResultTabs.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Tests Not Run'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ResultTabs.cs" Line="234">ResultTabs.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Trace Output'</Issue>
            </Message>
            <Message Id="System.Windows.Forms.MenuItem.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ResultTabs.cs" Line="250">ResultTabs.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Copy'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Subscribe(NUnit.Util.ITestEvents):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ResultTabs.cs" Line="393">Validate parameter 'events' passed to externally visible method ResultTabs.Subscribe(ITestEvents):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="UpdateFixedFont():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ResultTabs.cs" Line="314">Replace the call to String.op_Equality("") in 'ResultTabs.UpdateFixedFont():Void' with a call to String.IsNullOrEmpty.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SelectedTestsChangedEventHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="UseGenericEventHandlerInstances" Category="Microsoft.Design" CheckId="CA1003" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Remove 'NUnit.UiKit.SelectedTestsChangedEventHandler' and replace its usage with EventHandler&lt;T&gt;</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="StatusBar" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="28">StatusBar.StatusBar() initializes field displayProgress of type System.Boolean to false. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="25">StatusBar.StatusBar() initializes field failures of type System.Int32 to 0. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="23">StatusBar.StatusBar() initializes field testCount of type System.Int32 to 0. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="24">StatusBar.StatusBar() initializes field testsRun of type System.Int32 to 0. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="26">StatusBar.StatusBar() initializes field time of type System.Int32 to 0. Remove this initialization as it will be done automatically by the runtime.</Issue>
            </Message>
            <Message Id="System.Windows.Forms.StatusBarPanel.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="45">StatusBar.StatusBar() passes a literal as parameter 1 of a call to StatusBarPanel.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Status'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="DisplayFailures():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.StatusBarPanel.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="120">StatusBar.DisplayFailures():Void passes a literal as parameter 1 of a call to StatusBarPanel.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Failures : __'</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="120">StatusBar.DisplayFailures():Void makes a call to System.Int32.ToString that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Int32.ToString(System.IFormatProvider).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="DisplayResult(NUnit.Core.TestResult):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.StatusBarPanel.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="134">StatusBar.DisplayResult(TestResult):Void passes a literal as parameter 1 of a call to StatusBarPanel.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Failures : __'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="135">StatusBar.DisplayResult(TestResult):Void passes a literal as parameter 1 of a call to StatusBarPanel.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Tests Run : __'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="136">StatusBar.DisplayResult(TestResult):Void passes a literal as parameter 1 of a call to StatusBarPanel.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Time : __'</Issue>
            </Message>
            <Message Id="System.Double.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="136">StatusBar.DisplayResult(TestResult):Void makes a call to System.Double.ToString that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Double.ToString(System.IFormatProvider).</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="134">StatusBar.DisplayResult(TestResult):Void makes a call to System.Int32.ToString that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Int32.ToString(System.IFormatProvider).</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="135">StatusBar.DisplayResult(TestResult):Void makes a call to System.Int32.ToString that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Int32.ToString(System.IFormatProvider).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="DisplayTestCount():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.StatusBarPanel.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="110">StatusBar.DisplayTestCount():Void passes a literal as parameter 1 of a call to StatusBarPanel.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Test Cases : __'</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="110">StatusBar.DisplayTestCount():Void makes a call to System.Int32.ToString that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Int32.ToString(System.IFormatProvider).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="DisplayTestsRun():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.StatusBarPanel.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="115">StatusBar.DisplayTestsRun():Void passes a literal as parameter 1 of a call to StatusBarPanel.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Tests Run : __'</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="115">StatusBar.DisplayTestsRun():Void makes a call to System.Int32.ToString that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Int32.ToString(System.IFormatProvider).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="DisplayTime():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.StatusBarPanel.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="125">StatusBar.DisplayTime():Void passes a literal as parameter 1 of a call to StatusBarPanel.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Time : __'</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="125">StatusBar.DisplayTime():Void makes a call to System.Int32.ToString that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Int32.ToString(System.IFormatProvider).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="InitPanels():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.StatusBarPanel.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="103">StatusBar.InitPanels():Void passes a literal as parameter 1 of a call to StatusBarPanel.set_Text(String):Void. Retrieve the following string argument from a resource table instead: ''</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="104">StatusBar.InitPanels():Void passes a literal as parameter 1 of a call to StatusBarPanel.set_Text(String):Void. Retrieve the following string argument from a resource table instead: ''</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="105">StatusBar.InitPanels():Void passes a literal as parameter 1 of a call to StatusBarPanel.set_Text(String):Void. Retrieve the following string argument from a resource table instead: ''</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="OnRunFinished(System.Object,NUnit.Util.TestEventArgs):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.StatusBarPanel.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="168">StatusBar.OnRunFinished(Object, TestEventArgs):Void passes a literal as parameter 1 of a call to StatusBarPanel.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Completed'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="165">StatusBar.OnRunFinished(Object, TestEventArgs):Void passes a literal as parameter 1 of a call to StatusBarPanel.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Failed'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="OnRunStarting(System.Object,NUnit.Util.TestEventArgs):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="NUnit.UiKit.StatusBar.Initialize(System.Int32,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="156">StatusBar.OnRunStarting(Object, TestEventArgs):Void passes a literal as parameter 2 of a call to StatusBar.Initialize(Int32, String):Void. Retrieve the following string argument from a resource table instead: 'Running :__'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="OnTestLoaded(System.Object,NUnit.Util.TestEventArgs):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ReviewVisibleEventHandlers" Category="Microsoft.Security" CheckId="CA2109" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="40" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="140">Consider making StatusBar.OnTestLoaded(Object, TestEventArgs):Void not externally visible.</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="141">Validate parameter 'e' passed to externally visible method StatusBar.OnTestLoaded(Object, TestEventArgs):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="OnTestReloaded(System.Object,NUnit.Util.TestEventArgs):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NUnit.UiKit.StatusBar.Initialize(System.Int32,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="146">StatusBar.OnTestReloaded(Object, TestEventArgs):Void passes a literal as parameter 2 of a call to StatusBar.Initialize(Int32, String):Void. Retrieve the following string argument from a resource table instead: 'Reloaded'</Issue>
            </Message>
            <Message TypeName="ReviewVisibleEventHandlers" Category="Microsoft.Security" CheckId="CA2109" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="40" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="145">Consider making StatusBar.OnTestReloaded(Object, TestEventArgs):Void not externally visible.</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="146">Validate parameter 'e' passed to externally visible method StatusBar.OnTestReloaded(Object, TestEventArgs):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="OnTestStarting(System.Object,NUnit.Util.TestEventArgs):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="179">StatusBar.OnTestStarting(Object, TestEventArgs):Void passes a literal as parameter 1 of a call to Graphics.MeasureString(String, Font):SizeF. Retrieve the following string argument from a resource table instead: 'Running : __'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="187">StatusBar.OnTestStarting(Object, TestEventArgs):Void passes a literal as parameter 1 of a call to Graphics.MeasureString(String, Font):SizeF. Retrieve the following string argument from a resource table instead: 'Running : __'</Issue>
            </Message>
            <Message Id="System.Windows.Forms.StatusBarPanel.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="182">StatusBar.OnTestStarting(Object, TestEventArgs):Void passes a literal as parameter 1 of a call to StatusBarPanel.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Running : __'</Issue>
            </Message>
            <Message TypeName="ReviewVisibleEventHandlers" Category="Microsoft.Security" CheckId="CA2109" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="40" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="174">Consider making StatusBar.OnTestStarting(Object, TestEventArgs):Void not externally visible.</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="175">Validate parameter 'e' passed to externally visible method StatusBar.OnTestStarting(Object, TestEventArgs):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="OnTestUnloaded(System.Object,NUnit.Util.TestEventArgs):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NUnit.UiKit.StatusBar.Initialize(System.Int32,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="151">StatusBar.OnTestUnloaded(Object, TestEventArgs):Void passes a literal as parameter 2 of a call to StatusBar.Initialize(Int32, String):Void. Retrieve the following string argument from a resource table instead: 'Unloaded'</Issue>
            </Message>
            <Message TypeName="ReviewVisibleEventHandlers" Category="Microsoft.Security" CheckId="CA2109" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="40" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="150">Consider making StatusBar.OnTestUnloaded(Object, TestEventArgs):Void not externally visible.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Subscribe(NUnit.Util.ITestEvents):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="StatusBar.cs" Line="212">Validate parameter 'events' passed to externally visible method StatusBar.Subscribe(ITestEvents):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestEventInvocationException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add the following constructor to NUnit.UiKit.TestEventInvocationException: protected TestEventInvocationException(SerializationInfo, StreamingContext).</Issue>
           <Issue Certainty="95" Level="Error">Add the following constructor to NUnit.UiKit.TestEventInvocationException: public TestEventInvocationException().</Issue>
           <Issue Certainty="95" Level="Error">Add the following constructor to NUnit.UiKit.TestEventInvocationException: public TestEventInvocationException(String).</Issue>
           <Issue Certainty="95" Level="Error">Add the following constructor to NUnit.UiKit.TestEventInvocationException: public TestEventInvocationException(String, Exception).</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name=".ctor(System.Exception)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Exception.#ctor(System.String,System.Exception)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="GuiTestEventDispatcher.cs" Line="15">TestEventInvocationException.TestEventInvocationException(Exception) passes a literal as parameter 1 of a call to Exception.Exception(String, Exception). Retrieve the following string argument from a resource table instead: 'Exception invoking TestEvent handler'</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestFilterVisitor" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="Visit(NUnit.UiKit.TestSuiteTreeNode):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestSuiteTreeView.cs" Line="1281">Validate parameter 'node' passed to externally visible method TestFilterVisitor.Visit(TestSuiteTreeNode):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestLoaderUI" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Remove the public constructors from 'TestLoaderUI'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="AddAssembly(System.Windows.Forms.Form,System.String):System.Void" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestLoaderUI.cs" Line="94">Consider changing the type of parameter 'owner' in TestLoaderUI.AddAssembly(Form, String):Void from System.Windows.Forms.Form to its base type System.Windows.Forms.IWin32Window. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="AddVSProject(System.Windows.Forms.Form):System.Void" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestLoaderUI.cs" Line="112">Consider changing the type of parameter 'owner' in TestLoaderUI.AddVSProject(Form):Void from System.Windows.Forms.Form to its base type System.Windows.Forms.IWin32Window. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestLoaderUI.cs" Line="136">Modify 'TestLoaderUI.AddVSProject(Form):Void' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="NUnit.UiKit.UserMessage.DisplayFailure(System.String,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestLoaderUI.cs" Line="138">TestLoaderUI.AddVSProject(Form):Void passes a literal as parameter 2 of a call to UserMessage.DisplayFailure(String, String):DialogResult. Retrieve the following string argument from a resource table instead: 'Invalid VS Project'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="NewProject(System.Windows.Forms.Form):System.Void" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestLoaderUI.cs" Line="188">Consider changing the type of parameter 'owner' in TestLoaderUI.NewProject(Form):Void from System.Windows.Forms.Form to its base type System.Windows.Forms.IWin32Window. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="OpenProject(System.Windows.Forms.Form,System.String,System.String,System.String):System.Void" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NUnit.UiKit.LongRunningOperationDisplay.#ctor(System.Windows.Forms.Form,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestLoaderUI.cs" Line="75">TestLoaderUI.OpenProject(Form, String, String, String):Void passes a literal as parameter 2 of a call to LongRunningOperationDisplay.LongRunningOperationDisplay(Form, String). Retrieve the following string argument from a resource table instead: 'Loading...'</Issue>
            </Message>
            <Message Id="NUnit.UiKit.UserMessage.DisplayInfo(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestLoaderUI.cs" Line="72">TestLoaderUI.OpenProject(Form, String, String, String):Void passes a literal as parameter 1 of a call to UserMessage.DisplayInfo(String):DialogResult. Retrieve the following string argument from a resource table instead: 'Active configuration contains no assemblies'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestLoaderUI.cs" Line="68">TestLoaderUI.OpenProject(Form, String, String, String):Void passes a literal as parameter 1 of a call to UserMessage.DisplayInfo(String):DialogResult. Retrieve the following string argument from a resource table instead: 'Loaded project contains no configuration data'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestLoaderUI.cs" Line="70">TestLoaderUI.OpenProject(Form, String, String, String):Void passes a literal as parameter 1 of a call to UserMessage.DisplayInfo(String):DialogResult. Retrieve the following string argument from a resource table instead: 'Loaded project has no active configuration'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SaveLastResult(System.Windows.Forms.Form):System.Void" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestLoaderUI.cs" Line="230">Consider changing the type of parameter 'owner' in TestLoaderUI.SaveLastResult(Form):Void from System.Windows.Forms.Form to its base type System.Windows.Forms.IWin32Window. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestLoaderUI.cs" Line="254">Modify 'TestLoaderUI.SaveLastResult(Form):Void' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="NUnit.UiKit.UserMessage.DisplayFailure(System.Exception,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestLoaderUI.cs" Line="256">TestLoaderUI.SaveLastResult(Form):Void passes a literal as parameter 2 of a call to UserMessage.DisplayFailure(Exception, String):DialogResult. Retrieve the following string argument from a resource table instead: 'Unable to Save Results'</Issue>
            </Message>
            <Message Id="NUnit.UiKit.UserMessage.DisplayInfo(System.String,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestLoaderUI.cs" Line="252">TestLoaderUI.SaveLastResult(Form):Void passes a literal as parameter 2 of a call to UserMessage.DisplayInfo(String, String):DialogResult. Retrieve the following string argument from a resource table instead: 'Save Results as XML'</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestLoaderUI.cs" Line="251">TestLoaderUI.SaveLastResult(Form):Void makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SaveProjectAs(System.Windows.Forms.Form):System.Void" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestLoaderUI.cs" Line="162">Consider changing the type of parameter 'owner' in TestLoaderUI.SaveProjectAs(Form):Void from System.Windows.Forms.Form to its base type System.Windows.Forms.IWin32Window. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestLoaderUI.cs" Line="178">TestLoaderUI.SaveProjectAs(Form):Void makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SaveProjectIfDirty(System.Windows.Forms.Form):System.Windows.Forms.DialogResult" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="NUnit.UiKit.UserMessage.Ask(System.String,System.Windows.Forms.MessageBoxButtons)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestLoaderUI.cs" Line="221">TestLoaderUI.SaveProjectIfDirty(Form):DialogResult passes a literal as parameter 1 of a call to UserMessage.Ask(String, MessageBoxButtons):DialogResult. Retrieve the following string argument from a resource table instead: 'Project has been changed. Do you want to save changes?'</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestProgressBar" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="Subscribe(NUnit.Util.ITestEvents):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="ProgressBar.cs" Line="401">Validate parameter 'events' passed to externally visible method TestProgressBar.Subscribe(ITestEvents):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestPropertiesDialog" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="DisplayProperties(NUnit.UiKit.TestSuiteTreeNode):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestPropertiesDialog.cs" Line="549">TestPropertiesDialog.DisplayProperties(TestSuiteTreeNode):Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: ''</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestPropertiesDialog.cs" Line="552">TestPropertiesDialog.DisplayProperties(TestSuiteTreeNode):Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: ''</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestPropertiesDialog.cs" Line="551">TestPropertiesDialog.DisplayProperties(TestSuiteTreeNode):Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Assert Count:'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestPropertiesDialog.cs" Line="550">TestPropertiesDialog.DisplayProperties(TestSuiteTreeNode):Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Execution Time:'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestPropertiesDialog.cs" Line="533">TestPropertiesDialog.DisplayProperties(TestSuiteTreeNode):Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Explicit'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestPropertiesDialog.cs" Line="539">TestPropertiesDialog.DisplayProperties(TestSuiteTreeNode):Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'No'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestPropertiesDialog.cs" Line="536">TestPropertiesDialog.DisplayProperties(TestSuiteTreeNode):Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Yes'</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestPropertiesDialog.cs" Line="544">TestPropertiesDialog.DisplayProperties(TestSuiteTreeNode):Void makes a call to System.Int32.ToString that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Int32.ToString(System.IFormatProvider).</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestPropertiesDialog.cs" Line="566">TestPropertiesDialog.DisplayProperties(TestSuiteTreeNode):Void makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestPropertiesDialog.cs" Line="567">TestPropertiesDialog.DisplayProperties(TestSuiteTreeNode):Void makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestPropertiesDialog.cs" Line="516">Validate parameter 'node' passed to externally visible method TestPropertiesDialog.DisplayProperties(TestSuiteTreeNode):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="InitializeComponent():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestPropertiesDialog.cs" Line="397">TestPropertiesDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Assert Count:'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestPropertiesDialog.cs" Line="271">TestPropertiesDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Categories:'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestPropertiesDialog.cs" Line="292">TestPropertiesDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Description:'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestPropertiesDialog.cs" Line="415">TestPropertiesDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Execution Time:'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestPropertiesDialog.cs" Line="154">TestPropertiesDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Failure'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestPropertiesDialog.cs" Line="347">TestPropertiesDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Full Name:'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestPropertiesDialog.cs" Line="406">TestPropertiesDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Message:'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestPropertiesDialog.cs" Line="356">TestPropertiesDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Message:'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestPropertiesDialog.cs" Line="220">TestPropertiesDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Properties:'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestPropertiesDialog.cs" Line="243">TestPropertiesDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Reason:'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestPropertiesDialog.cs" Line="388">TestPropertiesDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Result'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestPropertiesDialog.cs" Line="327">TestPropertiesDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Should Run?'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestPropertiesDialog.cs" Line="436">TestPropertiesDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Stack:'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestPropertiesDialog.cs" Line="309">TestPropertiesDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Test Count:'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestPropertiesDialog.cs" Line="191">TestPropertiesDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Test Details'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestPropertiesDialog.cs" Line="452">TestPropertiesDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Test Properties'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestPropertiesDialog.cs" Line="262">TestPropertiesDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Test Type:'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestPropertiesDialog.cs" Line="318">TestPropertiesDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Yes'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="ProcessKeyPreview(System.Windows.Forms.Message&amp;):System.Boolean" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="BaseOnly" Certainty="33" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestPropertiesDialog.cs" Line="599">Add the following security attribute to TestPropertiesDialog.ProcessKeyPreview(Message&amp;):Boolean in order to match a LinkDemand on base method Form.ProcessKeyPreview(Message&amp;):Boolean:  [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)].</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SetTitleBarText():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestPropertiesDialog.cs" Line="481">TestPropertiesDialog.SetTitleBarText():Void makes a call to System.String.Format(System.String,System.Object,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TrimLeadingBlankLines(System.String):System.String" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestPropertiesDialog.cs" Line="573">The 'this' parameter (or 'Me' in VB) of TestPropertiesDialog.TrimLeadingBlankLines(String):String is never used. Mark the member as static (or Shared in VB) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestSuiteTreeNode" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ComVisibleTypeBaseTypesShouldBeComVisible" Category="Microsoft.Interoperability" CheckId="CA1405" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="DependsOnFix">
           <Issue Certainty="90" Level="Error">'NUnit.UiKit.TestSuiteTreeNode' is marked ComVisible(true) but has the following ComVisible(false) types in its object hierarchy:  System.Windows.Forms.TreeNode</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">Add [Serializable] to 'TestSuiteTreeNode' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name=".cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestSuiteTreeNode.cs" Line="42">TestSuiteTreeNode.TestSuiteTreeNode() initializes field InitIndex of type System.Int32 to 0. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestSuiteTreeNode.cs" Line="43">TestSuiteTreeNode.TestSuiteTreeNode() initializes field SkippedIndex of type System.Int32 to 0. Remove this initialization as it will be done automatically by the runtime.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name=".ctor(NUnit.Core.TestInfo)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestSuiteTreeNode.cs" Line="60">Validate parameter 'test' passed to externally visible method TestSuiteTreeNode.TestSuiteTreeNode(TestInfo).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name=".ctor(NUnit.Core.TestResult)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestSuiteTreeNode.cs" Line="69">Validate parameter 'result' passed to externally visible method TestSuiteTreeNode.TestSuiteTreeNode(TestResult).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="FailureIndex" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'FailureIndex' is declared as 'static readonly' but is initialized with a constant value '1'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="IgnoredIndex" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'IgnoredIndex' is declared as 'static readonly' but is initialized with a constant value '3'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="InitIndex" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'InitIndex' is declared as 'static readonly' but is initialized with a constant value '0'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SkippedIndex" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'SkippedIndex' is declared as 'static readonly' but is initialized with a constant value '0'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SuccessIndex" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'SuccessIndex' is declared as 'static readonly' but is initialized with a constant value '2'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestSuiteTreeView" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestSuiteTreeView.cs" Line="95">TestSuiteTreeView.TestSuiteTreeView() initializes field runCommandEnabled of type System.Boolean to false. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestSuiteTreeView.cs" Line="101">TestSuiteTreeView.TestSuiteTreeView() initializes field suppressEvents of type System.Boolean to false. Remove this initialization as it will be done automatically by the runtime.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="CheckedTests" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestSuiteTreeView.cs" Line="248">Change TestSuiteTreeView.CheckedTests:ITest[] to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="ContextMenu_Popup(System.Object,System.EventArgs):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.Menu+MenuItemCollection.Add(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestSuiteTreeView.cs" Line="455">TestSuiteTreeView.ContextMenu_Popup(Object, EventArgs):Void passes a literal as parameter 1 of a call to MenuItemCollection.Add(String):MenuItem. Retrieve the following string argument from a resource table instead: '-'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestSuiteTreeView.cs" Line="461">TestSuiteTreeView.ContextMenu_Popup(Object, EventArgs):Void passes a literal as parameter 1 of a call to MenuItemCollection.Add(String):MenuItem. Retrieve the following string argument from a resource table instead: '-'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestSuiteTreeView.cs" Line="484">TestSuiteTreeView.ContextMenu_Popup(Object, EventArgs):Void passes a literal as parameter 1 of a call to MenuItemCollection.Add(String):MenuItem. Retrieve the following string argument from a resource table instead: '-'</Issue>
            </Message>
            <Message Id="System.Windows.Forms.Menu+MenuItemCollection.Add(System.String,System.EventHandler)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestSuiteTreeView.cs" Line="483">TestSuiteTreeView.ContextMenu_Popup(Object, EventArgs):Void passes a literal as parameter 1 of a call to MenuItemCollection.Add(String, EventHandler):MenuItem. Retrieve the following string argument from a resource table instead: 'Collapse All'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestSuiteTreeView.cs" Line="482">TestSuiteTreeView.ContextMenu_Popup(Object, EventArgs):Void passes a literal as parameter 1 of a call to MenuItemCollection.Add(String, EventHandler):MenuItem. Retrieve the following string argument from a resource table instead: 'Expand All'</Issue>
            </Message>
            <Message Id="System.Windows.Forms.MenuItem.#ctor(System.String,System.EventHandler)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestSuiteTreeView.cs" Line="467">TestSuiteTreeView.ContextMenu_Popup(Object, EventArgs):Void passes a literal as parameter 1 of a call to MenuItem.MenuItem(String, EventHandler). Retrieve the following string argument from a resource table instead: '&amp;Collapse'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestSuiteTreeView.cs" Line="475">TestSuiteTreeView.ContextMenu_Popup(Object, EventArgs):Void passes a literal as parameter 1 of a call to MenuItem.MenuItem(String, EventHandler). Retrieve the following string argument from a resource table instead: '&amp;Expand'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestSuiteTreeView.cs" Line="486">TestSuiteTreeView.ContextMenu_Popup(Object, EventArgs):Void passes a literal as parameter 1 of a call to MenuItem.MenuItem(String, EventHandler). Retrieve the following string argument from a resource table instead: '&amp;Properties'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestSuiteTreeView.cs" Line="440">TestSuiteTreeView.ContextMenu_Popup(Object, EventArgs):Void passes a literal as parameter 1 of a call to MenuItem.MenuItem(String, EventHandler). Retrieve the following string argument from a resource table instead: '&amp;Run'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestSuiteTreeView.cs" Line="445">TestSuiteTreeView.ContextMenu_Popup(Object, EventArgs):Void passes a literal as parameter 1 of a call to MenuItem.MenuItem(String, EventHandler). Retrieve the following string argument from a resource table instead: 'Run &amp;All'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestSuiteTreeView.cs" Line="450">TestSuiteTreeView.ContextMenu_Popup(Object, EventArgs):Void passes a literal as parameter 1 of a call to MenuItem.MenuItem(String, EventHandler). Retrieve the following string argument from a resource table instead: 'Run &amp;Failed'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestSuiteTreeView.cs" Line="458">TestSuiteTreeView.ContextMenu_Popup(Object, EventArgs):Void passes a literal as parameter 1 of a call to MenuItem.MenuItem(String, EventHandler). Retrieve the following string argument from a resource table instead: 'Show CheckBoxes'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="CheckedTestChanged" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'CheckedTestChangedHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'CheckedTestChangedHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'NUnit.UiKit.CheckedTestChangedHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SelectedTestChanged" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'SelectedTestChangedHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'SelectedTestChangedHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'NUnit.UiKit.SelectedTestChangedHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="FailedTests" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestSuiteTreeView.cs" Line="272">Change TestSuiteTreeView.FailedTests:ITest[] to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Initialize(NUnit.Util.ITestLoader,NUnit.Util.ITestEvents):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestSuiteTreeView.cs" Line="162">Validate parameter 'events' passed to externally visible method TestSuiteTreeView.Initialize(ITestLoader, ITestEvents):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="IsValidFileDrop(System.Windows.Forms.IDataObject):System.Boolean" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestSuiteTreeView.cs" Line="589">The 'this' parameter (or 'Me' in VB) of TestSuiteTreeView.IsValidFileDrop(IDataObject):Boolean is never used. Mark the member as static (or Shared in VB) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="MakeNameFilter(NUnit.Core.ITest[]):NUnit.Core.TestFilter" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestSuiteTreeView.cs" Line="925">The 'this' parameter (or 'Me' in VB) of TestSuiteTreeView.MakeNameFilter(ITest[]):TestFilter is never used. Mark the member as static (or Shared in VB) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Match(NUnit.UiKit.TestSuiteTreeNode,NUnit.Core.TestNode):System.Boolean" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestSuiteTreeView.cs" Line="1024">The 'this' parameter (or 'Me' in VB) of TestSuiteTreeView.Match(TestSuiteTreeNode, TestNode):Boolean is never used. Mark the member as static (or Shared in VB) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SelectedTests" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestSuiteTreeView.cs" Line="258">Change TestSuiteTreeView.SelectedTests:ITest[] to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SetTestResult(NUnit.Core.TestResult):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.ArgumentException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestSuiteTreeView.cs" Line="812">TestSuiteTreeView.SetTestResult(TestResult):Void passes a literal as parameter 1 of a call to ArgumentException.ArgumentException(String). Retrieve the following string argument from a resource table instead: 'Attempting to set Result with a value that refers to a different test'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="treeImages" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'treeImages' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="UpdateNode(NUnit.UiKit.TestSuiteTreeNode,NUnit.Core.TestNode):System.Boolean" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestSuiteTreeView.cs" Line="1040">TestSuiteTreeView.UpdateNode(TestSuiteTreeNode, TestNode):Boolean makes a call to System.String.Format(System.String,System.Object,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestTree" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Windows.Forms.MenuItem.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestTree.cs" Line="166">TestTree.TestTree() passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Collapse'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestTree.cs" Line="160">TestTree.TestTree() passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Expand'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestTree.cs" Line="200">TestTree.TestTree() passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Properties'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestTree.cs" Line="142">TestTree.TestTree() passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Tree'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestTree.cs" Line="155">TestTree.TestTree() passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '-'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestTree.cs" Line="195">TestTree.TestTree() passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '-'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestTree.cs" Line="172">TestTree.TestTree() passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '-'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestTree.cs" Line="183">TestTree.TestTree() passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Collapse All'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestTree.cs" Line="177">TestTree.TestTree() passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Expand All'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestTree.cs" Line="189">TestTree.TestTree() passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Hide Tests'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestTree.cs" Line="149">TestTree.TestTree() passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Show Check&amp;Boxes'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Initialize(NUnit.Util.TestLoader):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestTree.cs" Line="224">Validate parameter 'loader' passed to externally visible method TestTree.Initialize(TestLoader):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="InitializeComponent():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestTree.cs" Line="486">TestTree.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Add'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestTree.cs" Line="536">TestTree.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Available Categories'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestTree.cs" Line="447">TestTree.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Categories'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestTree.cs" Line="427">TestTree.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Check Failed'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestTree.cs" Line="437">TestTree.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Clear All'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestTree.cs" Line="522">TestTree.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Exclude these categories'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestTree.cs" Line="477">TestTree.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Remove'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestTree.cs" Line="500">TestTree.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Selected Categories'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestTree.cs" Line="379">TestTree.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Tests'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SelectCategories(System.String[],System.Boolean):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestTree.cs" Line="233">Validate parameter 'categories' passed to externally visible method TestTree.SelectCategories(String[], Boolean):Void.</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestTree.cs" Line="233">Validate parameter 'categories' passed to externally visible method TestTree.SelectCategories(String[], Boolean):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SelectedCategories" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TestTree.cs" Line="81">Change TestTree.SelectedCategories:String[] to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TextBoxWriter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor(System.Windows.Forms.RichTextBox)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.IO.TextWriter.#ctor" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TextBoxWriter.cs" Line="45">TextBoxWriter.TextBoxWriter(RichTextBox) makes a call to System.IO.TextWriter.#ctor that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.IO.TextWriter.#ctor(System.IFormatProvider).</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TextBoxWriter.cs" Line="48">Validate parameter 'textBox' passed to externally visible method TextBoxWriter.TextBoxWriter(RichTextBox).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name=".ctor(System.Windows.Forms.TextBox)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.IO.TextWriter.#ctor" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TextBoxWriter.cs" Line="39">TextBoxWriter.TextBoxWriter(TextBox) makes a call to System.IO.TextWriter.#ctor that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.IO.TextWriter.#ctor(System.IFormatProvider).</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TextBoxWriter.cs" Line="42">Validate parameter 'textBox' passed to externally visible method TextBoxWriter.TextBoxWriter(TextBox).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Write(System.Char):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TextBoxWriter.cs" Line="84">Change parameter name 'c' of method TextBoxWriter.Write(Char):Void to 'value' in order to match the identifier as it has been declared in TextWriter.Write(Char):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Write(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TextBoxWriter.cs" Line="93">Change parameter name 's' of method TextBoxWriter.Write(String):Void to 'value' in order to match the identifier as it has been declared in TextWriter.Write(String):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="WriteLine(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="TextBoxWriter.cs" Line="117">Change parameter name 's' of method TextBoxWriter.WriteLine(String):Void to 'value' in order to match the identifier as it has been declared in TextWriter.WriteLine(String):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UserMessage" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Remove the public constructors from 'UserMessage'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="Display(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon):System.Windows.Forms.DialogResult" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiComponents\UiKit" File="UserMessage.cs" Line="42">Change UserMessage.Display(String, String, MessageBoxButtons, MessageBoxIcon):DialogResult to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control. If it is set to RightTolLeft.Inherit, check its parent until a value indicating Yes or No is found.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="nunitCaption" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'nunitCaption' is declared as 'static readonly' but is initialized with a constant value 'NUnit'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="$(ProjectDir)/../svnccsm/edu.tum.cs.conqat.dotnet/test-data/edu.tum.cs.conqat.dotnet.scope/NUnit_Folder/GuiRunner/nunit-gui/bin/Debug2005/nunit.util.dll">
   <Modules>
    <Module Name="nunit.util.dll">
     <Messages>
      <Message TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
       <Issue Name="NoAttr" Certainty="95" Level="Error">'nunit.util' should be marked with CLSCompliantAttribute and its value should be true.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithComVisible" Category="Microsoft.Design" CheckId="CA1017" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
       <Issue Name="NoAttribute" Certainty="95" Level="CriticalError">Mark 'nunit.util' as ComVisible(false) at the assembly level, then mark all types within the assembly that should be exposed to Com clients as ComVisible(true).</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="Codeblast">
       <Types>
        <Type Name="CommandLineOptions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="CriticalWarning">Change the accessibility of all public constructors in 'CommandLineOptions' to protected.</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldDifferByMoreThanCase" Category="Microsoft.Naming" CheckId="CA1708" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="Member" Certainty="95" Level="Error">Change member names 'Parameters' and 'parameters' so that they differ by more than case.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name=".ctor(System.Boolean,System.String[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="CommandLineOptions.cs" Line="82">'CommandLineOptions.CommandLineOptions(Boolean, String[])' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;CommandLineOptions.CommandLineOptions(Boolean, String[])&#xD;&#xA;CommandLineOptions.Init(String[]):Int32&#xD;&#xA;CommandLineOptions.GetOption(String[], Int32&amp;, Int32):Boolean</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="CommandLineOptions.cs" Line="82">'CommandLineOptions.CommandLineOptions(Boolean, String[])' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;CommandLineOptions.CommandLineOptions(Boolean, String[])&#xD;&#xA;CommandLineOptions.Init(String[]):Int32&#xD;&#xA;CommandLineOptions.GetOption(String[], Int32&amp;, Int32):Boolean&#xD;&#xA;CommandLineOptions.GetMemberField(String):FieldInfo</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="CommandLineOptions.cs" Line="82">'CommandLineOptions.CommandLineOptions(Boolean, String[])' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;CommandLineOptions.CommandLineOptions(Boolean, String[])&#xD;&#xA;CommandLineOptions.Init(String[]):Int32&#xD;&#xA;CommandLineOptions.GetOption(String[], Int32&amp;, Int32):Boolean&#xD;&#xA;CommandLineOptions.GetMemberField(String):FieldInfo&#xD;&#xA;CommandLineOptions.MatchShortName(FieldInfo, String):Boolean</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="CommandLineOptions.cs" Line="82">'CommandLineOptions.CommandLineOptions(Boolean, String[])' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;CommandLineOptions.CommandLineOptions(Boolean, String[])&#xD;&#xA;CommandLineOptions.Init(String[]):Int32&#xD;&#xA;CommandLineOptions.GetOption(String[], Int32&amp;, Int32):Boolean&#xD;&#xA;CommandLineOptions.GetOptionValue(FieldInfo):Object</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="CommandLineOptions.cs" Line="82">'CommandLineOptions.CommandLineOptions(Boolean, String[])' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;CommandLineOptions.CommandLineOptions(Boolean, String[])&#xD;&#xA;CommandLineOptions.Init(String[]):Int32&#xD;&#xA;CommandLineOptions.GetOption(String[], Int32&amp;, Int32):Boolean&#xD;&#xA;CommandLineOptions.SplitOptionAndValue(String&amp;, Object&amp;):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetHelpText():System.String" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="CommandLineOptions.cs" Line="266">Change 'GetHelpText' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetMemberField(System.String):System.Reflection.FieldInfo" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Compare(System.String,System.String,System.Boolean)" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="CommandLineOptions.cs" Line="171">CommandLineOptions.GetMemberField(String):FieldInfo makes a call to System.String.Compare(System.String,System.String,System.Boolean) that does not explicitly provide a CultureInfo. This should be replaced with a call to System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetOption(System.String[],System.Int32&amp;,System.Int32):System.Boolean" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="CommandLineOptions.cs" Line="220">Modify 'CommandLineOptions.GetOption(String[], Int32&amp;, Int32):Boolean' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.Convert.ChangeType(System.Object,System.Type)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="CommandLineOptions.cs" Line="206">CommandLineOptions.GetOption(String[], Int32&amp;, Int32):Boolean makes a call to System.Convert.ChangeType(System.Object,System.Type) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider).</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="CommandLineOptions.cs" Line="216">CommandLineOptions.GetOption(String[], Int32&amp;, Int32):Boolean makes a call to System.Convert.ChangeType(System.Object,System.Type) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetOptionValue(System.Reflection.FieldInfo):System.Object" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="CommandLineOptions.cs" Line="178">Consider changing the type of parameter 'field' in CommandLineOptions.GetOptionValue(FieldInfo):Object from System.Reflection.FieldInfo to its base type System.Reflection.MemberInfo. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Init(System.String[]):System.Int32" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="CommandLineOptions.cs" Line="105">Validate parameter 'args' passed to externally visible method CommandLineOptions.Init(String[]):Int32.</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="CommandLineOptions.cs" Line="105">Validate parameter 'args' passed to externally visible method CommandLineOptions.Init(String[]):Int32.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="IsOptionNameChar(System.Char):System.Boolean" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0#c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ParameterOneLetter" Certainty="75" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="CommandLineOptions.cs" Line="149">In method CommandLineOptions.IsOptionNameChar(Char):Boolean, consider providing a more meaningful name than the one-letter parameter name 'c'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="MatchShortName(System.Reflection.FieldInfo,System.String):System.Boolean" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="CommandLineOptions.cs" Line="156">Consider changing the type of parameter 'field' in CommandLineOptions.MatchShortName(FieldInfo, String):Boolean from System.Reflection.FieldInfo to its base type System.Reflection.MemberInfo. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message Id="System.String.Compare(System.String,System.String,System.Boolean)" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="CommandLineOptions.cs" Line="160">CommandLineOptions.MatchShortName(FieldInfo, String):Boolean makes a call to System.String.Compare(System.String,System.String,System.Boolean) that does not explicitly provide a CultureInfo. This should be replaced with a call to System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="parameters" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'parameters' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SplitOptionAndValue(System.String&amp;,System.Object&amp;):System.Void" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="CommandLineOptions.cs" Line="228">Consider a design that does not require that 'opt' be a reference parameter.</Issue>
            </Message>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="CommandLineOptions.cs" Line="228">Consider a design that does not require that 'val' be a reference parameter.</Issue>
            </Message>
            <Message Id="1#val" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="CommandLineOptions.cs" Line="228">In method CommandLineOptions.SplitOptionAndValue(String&amp;, Object&amp;):Void, correct the spelling of the unrecognized token 'val' in parameter name 'val' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
            <Message TypeName="UseGenericsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1007" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="CommandLineOptions.cs" Line="228">Consider using generics instead of a reference to System.Object in CommandLineOptions.SplitOptionAndValue(String&amp;, Object&amp;):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="OptionAttribute" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidUnsealedAttributes" Category="Microsoft.Performance" CheckId="CA1813" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Warning">Seal 'Codeblast.OptionAttribute', if possible.</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldDifferByMoreThanCase" Category="Microsoft.Naming" CheckId="CA1708" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="Member" Certainty="95" Level="Error">Change member names 'description' and 'Description' so that they differ by more than case.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="description" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'description' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="optName" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'optName' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="optValue" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'optValue' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="NUnit.Util">
       <Types>
        <Type Name="AddinManager" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Addin" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of the unrecognized token 'Addin' in type name 'NUnit.Util.AddinManager'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="Register(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util\Services" File="AddinManager.cs" Line="69">Modify 'AddinManager.Register(String):Void' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="RegisterAddins():System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Addins" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util\Services" File="AddinManager.cs" Line="32">Correct the spelling of the unrecognized token 'Addins' in member name 'AddinManager.RegisterAddins():Void'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AddinRegistry" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Addin" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of the unrecognized token 'Addin' in type name 'NUnit.Util.AddinRegistry'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="AggregatingTestRunner" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="CriticalWarning">Change the accessibility of all public constructors in 'AggregatingTestRunner' to protected.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="aggregateTest" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'aggregateTest' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="InitializeLifetimeService():System.Object" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="BaseOnly" Certainty="33" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="AggregatingTestRunner.cs" Line="287">Add the following security attribute to AggregatingTestRunner.InitializeLifetimeService():Object in order to match a LinkDemand on base method MarshalByRefObject.InitializeLifetimeService():Object:  [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)].</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="listener" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'listener' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="projectName" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'projectName' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Run(NUnit.Core.EventListener,NUnit.Core.ITestFilter):NUnit.Core.TestResult" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="AggregatingTestRunner.cs" Line="168">Validate parameter 'listener' passed to externally visible method AggregatingTestRunner.Run(EventListener, ITestFilter):TestResult.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="runnerID" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'runnerID' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="runners" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'runners' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SuiteStarted(NUnit.Core.TestName):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="AggregatingTestRunner.cs" Line="280">Change parameter name 'suiteName' of method AggregatingTestRunner.SuiteStarted(TestName):Void to 'testName' in order to match the identifier as it has been declared in EventListener.SuiteStarted(TestName):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="testName" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'testName' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AssemblyList" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="CollectionsShouldImplementGenericInterface" Category="Microsoft.Design" CheckId="CA1010" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
           <Issue Certainty="90" Level="Error">'AssemblyList' appears to be a non-generic, strongly typed collection. Add an implementation to the instance of IList&lt;T&gt; where T is AssemblyList's underlying element type.</Issue>
          </Message>
          <Message TypeName="ICollectionImplementationsHaveStronglyTypedMembers" Category="Microsoft.Design" CheckId="CA1035" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">'AssemblyList' should provide a strongly typed implementation of ICollection.CopyTo.</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'NUnit.Util.AssemblyList' to end in 'Collection'.</Issue>
          </Message>
          <Message TypeName="ListsAreStronglyTyped" Category="Microsoft.Design" CheckId="CA1039" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">'AssemblyList' should provide a strongly typed implementation of IList.Contains.</Issue>
           <Issue Certainty="90" Level="Error">'AssemblyList' should provide a strongly typed implementation of IList.IndexOf.</Issue>
           <Issue Certainty="90" Level="Error">'AssemblyList' should provide a strongly typed implementation of IList.Insert.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="Add(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.ArgumentException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="AssemblyList.cs" Line="44">AssemblyList.Add(String):Void passes a literal as parameter 1 of a call to ArgumentException.ArgumentException(String). Retrieve the following string argument from a resource table instead: 'Assembly path must be absolute'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Item[System.Int32]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="set_Item(System.Int32,System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.ArgumentException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="AssemblyList.cs" Line="27">AssemblyList.set_Item(Int32, String):Void passes a literal as parameter 1 of a call to ArgumentException.ArgumentException(String). Retrieve the following string argument from a resource table instead: 'Assembly path must be absolute'</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="AssemblyWatcher" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="CriticalError">Implement IDisposable on 'NUnit.Util.AssemblyWatcher' as it instantiates members of the following IDisposable types: System.Timers.Timer</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name=".ctor(System.Int32,System.Collections.IList)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="AssemblyWatcher.cs" Line="39">Validate parameter 'assemblies' passed to externally visible method AssemblyWatcher.AssemblyWatcher(Int32, IList).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="changedAssemblyPath" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'changedAssemblyPath' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="AssemblyChangedEvent" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'AssemblyChangedHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'AssemblyChangedHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'NUnit.Util.AssemblyWatcher+AssemblyChangedHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="OnChanged(System.Object,System.IO.FileSystemEventArgs):System.Void" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ReviewVisibleEventHandlers" Category="Microsoft.Security" CheckId="CA2109" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="40" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="AssemblyWatcher.cs" Line="91">Consider making AssemblyWatcher.OnChanged(Object, FileSystemEventArgs):Void not externally visible.</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="AssemblyWatcher.cs" Line="92">Validate parameter 'e' passed to externally visible method AssemblyWatcher.OnChanged(Object, FileSystemEventArgs):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="OnTimer(System.Object,System.Timers.ElapsedEventArgs):System.Void" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ReviewVisibleEventHandlers" Category="Microsoft.Security" CheckId="CA2109" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="40" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="AssemblyWatcher.cs" Line="82">Consider making AssemblyWatcher.OnTimer(Object, ElapsedEventArgs):Void not externally visible.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="timer" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'timer' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CategoryManager" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="Add(System.Collections.IList):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="CategoryManager.cs" Line="24">Validate parameter 'list' passed to externally visible method CategoryManager.Add(IList):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="AddAllCategories(NUnit.Core.ITest):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="CategoryManager.cs" Line="39">Validate parameter 'test' passed to externally visible method CategoryManager.AddAllCategories(ITest):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="AddCategories(NUnit.Core.ITest):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="CategoryManager.cs" Line="32">Validate parameter 'test' passed to externally visible method CategoryManager.AddCategories(ITest):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ConsoleWriter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor(System.IO.TextWriter)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.IO.TextWriter.#ctor" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="ConsoleWriter.cs" Line="26">ConsoleWriter.ConsoleWriter(TextWriter) makes a call to System.IO.TextWriter.#ctor that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.IO.TextWriter.#ctor(System.IFormatProvider).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Write(System.Char):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="ConsoleWriter.cs" Line="47">Change parameter name 'c' of method ConsoleWriter.Write(Char):Void to 'value' in order to match the identifier as it has been declared in TextWriter.Write(Char):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Write(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="ConsoleWriter.cs" Line="52">Change parameter name 's' of method ConsoleWriter.Write(String):Void to 'value' in order to match the identifier as it has been declared in TextWriter.Write(String):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="WriteLine(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="ConsoleWriter.cs" Line="57">Change parameter name 's' of method ConsoleWriter.WriteLine(String):Void to 'value' in order to match the identifier as it has been declared in TextWriter.WriteLine(String):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DomainManager" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="CreateDomain(NUnit.Core.TestPackage):System.AppDomain" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util\Services" File="DomainManager.cs" Line="59">Replace the call to String.op_Equality(String.Empty) in 'DomainManager.CreateDomain(TestPackage):AppDomain' with a call to String.IsNullOrEmpty.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util\Services" File="DomainManager.cs" Line="64">Replace the call to String.op_Equality(String.Empty) in 'DomainManager.CreateDomain(TestPackage):AppDomain' with a call to String.IsNullOrEmpty.</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util\Services" File="DomainManager.cs" Line="51">Validate parameter 'package' passed to externally visible method DomainManager.CreateDomain(TestPackage):AppDomain.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="DeleteCacheDir(System.IO.DirectoryInfo):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util\Services" File="DomainManager.cs" Line="192">Modify 'DomainManager.DeleteCacheDir(DirectoryInfo):Void' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util\Services" File="DomainManager.cs" Line="205">Modify 'DomainManager.DeleteCacheDir(DirectoryInfo):Void' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util\Services" File="DomainManager.cs" Line="194">DomainManager.DeleteCacheDir(DirectoryInfo):Void makes a call to System.String.Format(System.String,System.Object,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util\Services" File="DomainManager.cs" Line="207">DomainManager.DeleteCacheDir(DirectoryInfo):Void makes a call to System.String.Format(System.String,System.Object,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetCachePath():System.String" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util\Services" File="DomainManager.cs" Line="156">DomainManager.GetCachePath():String creates an exception of type 'System.ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util\Services" File="DomainManager.cs" Line="144">The 'this' parameter (or 'Me' in VB) of DomainManager.GetCachePath():String is never used. Mark the member as static (or Shared in VB) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util\Services" File="DomainManager.cs" Line="147">DomainManager.GetCachePath():String makes a call to System.Int32.ToString that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Int32.ToString(System.IFormatProvider).</Issue>
            </Message>
            <Message Id="System.Int64.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util\Services" File="DomainManager.cs" Line="147">DomainManager.GetCachePath():String makes a call to System.Int64.ToString that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Int64.ToString(System.IFormatProvider).</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util\Services" File="DomainManager.cs" Line="156">DomainManager.GetCachePath():String makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetPrivateBinPath(System.String,System.Collections.IList):System.String" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util\Services" File="DomainManager.cs" Line="223">Validate parameter 'assemblies' passed to externally visible method DomainManager.GetPrivateBinPath(String, IList):String.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="IsTestDomain(System.AppDomain):System.Boolean" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util\Services" File="DomainManager.cs" Line="214">The 'this' parameter (or 'Me' in VB) of DomainManager.IsTestDomain(AppDomain):Boolean is never used. Mark the member as static (or Shared in VB) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="ShadowCopyPath" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="get_ShadowCopyPath():System.String" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util\Services" File="DomainManager.cs" Line="33">Replace the call to String.op_Equality("") in 'DomainManager.get_ShadowCopyPath():String' with a call to String.IsNullOrEmpty.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="Unload(System.AppDomain):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util\Services" File="DomainManager.cs" Line="123">Modify 'DomainManager.Unload(AppDomain):Void' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util\Services" File="DomainManager.cs" Line="115">Validate parameter 'domain' passed to externally visible method DomainManager.Unload(AppDomain):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ISettings" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidOverloadsInComVisibleInterfaces" Category="Microsoft.Interoperability" CheckId="CA1402" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="CriticalWarning">ComVisible(true) interface 'NUnit.Util.ISettings' defines overloaded methods. Give each method a unique name or make the type ComVisible(false).</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="Changed" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'SettingsEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ITestEvents" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="ProjectLoaded" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="ProjectLoadFailed" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="ProjectLoading" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="ProjectUnloaded" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="ProjectUnloadFailed" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="ProjectUnloading" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="RunFinished" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="RunStarting" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SuiteFinished" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SuiteStarting" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TestException" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TestFinished" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TestLoaded" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TestLoadFailed" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TestLoading" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TestOutput" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TestReloaded" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TestReloadFailed" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TestReloading" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TestStarting" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TestUnloaded" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TestUnloadFailed" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TestUnloading" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ITestLoader" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidOverloadsInComVisibleInterfaces" Category="Microsoft.Interoperability" CheckId="CA1402" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="CriticalWarning">ComVisible(true) interface 'NUnit.Util.ITestLoader' defines overloaded methods. Give each method a unique name or make the type ComVisible(false).</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="LoadProject(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="filename" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ShouldBeCompoundWord" Certainty="80" Level="Error">The discrete term 'filename' in parameter 'filename' should be expressed as a compound term, 'fileName'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="LoadProject(System.String,System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="filename" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ShouldBeCompoundWord" Certainty="80" Level="Error">The discrete term 'filename' in parameter 'filename' should be expressed as a compound term, 'fileName'.</Issue>
            </Message>
            <Message Id="1#configname" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning">In method ITestLoader.LoadProject(String, String):Void, correct the spelling of the unrecognized token 'configname' in parameter name 'configname' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="NewProject(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="filename" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ShouldBeCompoundWord" Certainty="80" Level="Error">The discrete term 'filename' in parameter 'filename' should be expressed as a compound term, 'fileName'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MemorySettingsStorage" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on NUnit.Util.MemorySettingsStorage or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="Dispose():System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="MemorySettingsStorage.cs" Line="57">Modify MemorySettingsStorage.Dispose():Void so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in VB), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="settings" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'settings' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MultipleTestDomainRunner" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="Load(NUnit.Core.TestPackage):System.Boolean" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="MultipleTestDomainRunner.cs" Line="26">Validate parameter 'package' passed to externally visible method MultipleTestDomainRunner.Load(TestPackage):Boolean.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NUnitProject" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="NUnitProject.cs" Line="59">NUnitProject.NUnitProject() initializes field projectSeed of type System.Int32 to 0. Remove this initialization as it will be done automatically by the runtime.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name=".ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="NUnitProject.cs" Line="97">NUnitProject.NUnitProject(String) initializes field isAssemblyWrapper of type System.Boolean to false. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="NUnitProject.cs" Line="81">NUnitProject.NUnitProject(String) initializes field isDirty of type System.Boolean to false. Remove this initialization as it will be done automatically by the runtime.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Add(NUnit.Util.VSProject):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="NUnitProject.cs" Line="470">Validate parameter 'vsProject' passed to externally visible method NUnitProject.Add(VSProject):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="BasePath" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="get_BasePath():System.String" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="NUnitProject.cs" Line="318">Replace the call to String.op_Equality(String.Empty) in 'NUnitProject.get_BasePath():String' with a call to String.IsNullOrEmpty.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="set_BasePath(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="NUnitProject.cs" Line="326">Replace the call to String.op_Inequality(String.Empty) in 'NUnitProject.set_BasePath(String):Void' with a call to String.IsNullOrEmpty.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="Configs" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Configs" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="NUnitProject.cs" Line="408">Correct the spelling of the unrecognized token 'Configs' in member name 'NUnitProject.Configs:ProjectConfigCollection'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="FromAssemblies(System.String[]):NUnit.Util.NUnitProject" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="NUnitProject.cs" Line="190">NUnitProject.FromAssemblies(String[]):NUnitProject makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="NUnitProject.cs" Line="179">Validate parameter 'assemblies' passed to externally visible method NUnitProject.FromAssemblies(String[]):NUnitProject.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="FromAssembly(System.String):NUnit.Util.NUnitProject" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="NUnitProject.cs" Line="214">NUnitProject.FromAssembly(String):NUnitProject makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GenerateProjectName():System.String" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="NUnitProject.cs" Line="128">NUnitProject.GenerateProjectName():String makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Load():System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NUnit.Util.ProjectFormatException.#ctor(System.String,System.Int32,System.Int32)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="NUnitProject.cs" Line="495">NUnitProject.Load():Void passes a literal as parameter 1 of a call to ProjectFormatException.ProjectFormatException(String, Int32, Int32). Retrieve the following string argument from a resource table instead: 'Invalid project format: &lt;NUnitProject&gt; expected.'</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="NUnitProject.cs" Line="574">NUnitProject.Load():Void makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="NUnitProject.cs" Line="580">NUnitProject.Load():Void makes a call to System.String.Format(System.String,System.Object,System.Object,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="nunitExtension" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'nunitExtension' is declared as 'static readonly' but is initialized with a constant value '.nunit'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NUnitRegistry" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldBeSealed" Category="Microsoft.Design" CheckId="CA1052" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="CriticalWarning">Mark 'NUnitRegistry' as sealed.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name=".cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="NUnitRegistry.cs" Line="26">NUnitRegistry.NUnitRegistry() initializes field testMode of type System.Boolean to false. Remove this initialization as it will be done automatically by the runtime.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="ClearKey(Microsoft.Win32.RegistryKey):System.Void" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="NUnitRegistry.cs" Line="109">Validate parameter 'key' passed to externally visible method NUnitRegistry.ClearKey(RegistryKey):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="CopyKey(Microsoft.Win32.RegistryKey,Microsoft.Win32.RegistryKey):System.Void" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="NUnitRegistry.cs" Line="132">Validate parameter 'fromKey' passed to externally visible method NUnitRegistry.CopyKey(RegistryKey, RegistryKey):Void.</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="NUnitRegistry.cs" Line="133">Validate parameter 'toKey' passed to externally visible method NUnitRegistry.CopyKey(RegistryKey, RegistryKey):Void.</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="NUnitRegistry.cs" Line="133">Validate parameter 'toKey' passed to externally visible method NUnitRegistry.CopyKey(RegistryKey, RegistryKey):Void.</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="NUnitRegistry.cs" Line="137">Validate parameter 'toKey' passed to externally visible method NUnitRegistry.CopyKey(RegistryKey, RegistryKey):Void.</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="NUnitRegistry.cs" Line="137">Validate parameter 'toKey' passed to externally visible method NUnitRegistry.CopyKey(RegistryKey, RegistryKey):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="KEY" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Member" TypeName="LongAcronymsShouldBePascalCased" Category="Microsoft.Naming" CheckId="CA1705" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the capitalization of member name 'NUnitRegistry.KEY'.</Issue>
            </Message>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'KEY' is declared as 'static readonly' but is initialized with a constant value 'Software\nunit.org\Nunit\2.4'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="LEGACY_KEY" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Member" TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove all underscores from member 'LEGACY_KEY'.</Issue>
            </Message>
            <Message Id="Member" TypeName="LongAcronymsShouldBePascalCased" Category="Microsoft.Naming" CheckId="CA1705" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the capitalization of member name 'NUnitRegistry.LEGACY_KEY'.</Issue>
            </Message>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'LEGACY_KEY' is declared as 'static readonly' but is initialized with a constant value 'Software\Nascent Software\Nunit\'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TEST_KEY" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Member" TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove all underscores from member 'TEST_KEY'.</Issue>
            </Message>
            <Message Id="Member" TypeName="LongAcronymsShouldBePascalCased" Category="Microsoft.Naming" CheckId="CA1705" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the capitalization of member name 'NUnitRegistry.TEST_KEY'.</Issue>
            </Message>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'TEST_KEY' is declared as 'static readonly' but is initialized with a constant value 'Software\nunit.org\Nunit-Test'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PathUtils" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Utils" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of the unrecognized token 'Utils' in type name 'NUnit.Util.PathUtils'.</Issue>
          </Message>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Remove the public constructors from 'PathUtils'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="AltDirectorySeparatorChar" Kind="Field" Static="True" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'AltDirectorySeparatorChar' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Canonicalize(System.String):System.String" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="PathUtils.cs" Line="89">Validate parameter 'path' passed to externally visible method PathUtils.Canonicalize(String):String.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="DirectorySeparatorChar" Kind="Field" Static="True" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'DirectorySeparatorChar' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="FILE_ATTRIBUTE_DIRECTORY" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Member" TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove all underscores from member 'FILE_ATTRIBUTE_DIRECTORY'.</Issue>
            </Message>
            <Message Id="Member" TypeName="LongAcronymsShouldBePascalCased" Category="Microsoft.Naming" CheckId="CA1705" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the capitalization of member name 'PathUtils.FILE_ATTRIBUTE_DIRECTORY'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="FILE_ATTRIBUTE_NORMAL" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Member" TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove all underscores from member 'FILE_ATTRIBUTE_NORMAL'.</Issue>
            </Message>
            <Message Id="Member" TypeName="LongAcronymsShouldBePascalCased" Category="Microsoft.Naming" CheckId="CA1705" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the capitalization of member name 'PathUtils.FILE_ATTRIBUTE_NORMAL'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="IsAssemblyFileType(System.String):System.Boolean" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="stack0" TypeName="AvoidUnnecessaryStringCreation" Category="Microsoft.Performance" CheckId="CA1807" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Name="UseStringCompareLocal" Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="PathUtils.cs" Line="33">PathUtils.IsAssemblyFileType(String):Boolean calls String.op_Equality(String, String):Boolean after converting 'stack0', a local, to upper or lowercase. If possible, eliminate the string creation and call the overload of String.Compare that performs a case-insensitive comparison.</Issue>
             <Issue Name="UseStringCompareLocal" Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="PathUtils.cs" Line="33">PathUtils.IsAssemblyFileType(String):Boolean calls String.op_Equality(String, String):Boolean after converting 'stack0', a local, to upper or lowercase. If possible, eliminate the string creation and call the overload of String.Compare that performs a case-insensitive comparison.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="PathUtils.cs" Line="32">PathUtils.IsAssemblyFileType(String):Boolean makes a call to System.String.ToLower that does not explicitly provide a CultureInfo. This should be replaced with a call to System.String.ToLower(System.Globalization.CultureInfo).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="MAX_PATH" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Member" TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove all underscores from member 'MAX_PATH'.</Issue>
            </Message>
            <Message Id="Member" TypeName="LongAcronymsShouldBePascalCased" Category="Microsoft.Naming" CheckId="CA1705" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the capitalization of member name 'PathUtils.MAX_PATH'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SamePath(System.String,System.String):System.Boolean" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Compare(System.String,System.String,System.Boolean)" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="PathUtils.cs" Line="123">PathUtils.SamePath(String, String):Boolean makes a call to System.String.Compare(System.String,System.String,System.Boolean) that does not explicitly provide a CultureInfo. This should be replaced with a call to System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SamePathOrUnder(System.String,System.String):System.Boolean" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Compare(System.String,System.String,System.Boolean)" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="PathUtils.cs" Line="148">PathUtils.SamePathOrUnder(String, String):Boolean makes a call to System.String.Compare(System.String,System.String,System.Boolean) that does not explicitly provide a CultureInfo. This should be replaced with a call to System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo).</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="PathUtils.cs" Line="152">PathUtils.SamePathOrUnder(String, String):Boolean makes a call to System.String.Compare(System.String,System.String,System.Boolean) that does not explicitly provide a CultureInfo. This should be replaced with a call to System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo).</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ProjectConfig" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldDifferByMoreThanCase" Category="Microsoft.Naming" CheckId="CA1708" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="Member" Certainty="95" Level="Error">Change member names 'project' and 'Project' so that they differ by more than case.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name=".ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="ProjectConfig.cs" Line="34">ProjectConfig.ProjectConfig(String) initializes field project of type NUnit.Util.NUnitProject to null. Remove this initialization as it will be done automatically by the runtime.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="project" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'project' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Project" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotBeWriteOnly" Category="Microsoft.Design" CheckId="CA1044" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="ProjectConfig.cs" Line="79">Add a property getter to 'Project'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ProjectConfigCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="CollectionsShouldImplementGenericInterface" Category="Microsoft.Design" CheckId="CA1010" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
           <Issue Certainty="90" Level="Error">'ProjectConfigCollection' appears to be a non-generic, strongly typed collection. Add an implementation to the instance of IList&lt;T&gt; where T is ProjectConfigCollection's underlying element type.</Issue>
          </Message>
          <Message TypeName="ICollectionImplementationsHaveStronglyTypedMembers" Category="Microsoft.Design" CheckId="CA1035" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">'ProjectConfigCollection' should provide a strongly typed implementation of ICollection.CopyTo.</Issue>
          </Message>
          <Message TypeName="ListsAreStronglyTyped" Category="Microsoft.Design" CheckId="CA1039" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">'ProjectConfigCollection' should provide a strongly typed implementation of IList.Insert.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="Add(NUnit.Util.ProjectConfig):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="ProjectConfigCollection.cs" Line="44">Validate parameter 'config' passed to externally visible method ProjectConfigCollection.Add(ProjectConfig):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="OnInsertComplete(System.Int32,System.Object):System.Void" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="ProjectConfigCollection.cs" Line="91">Change parameter name 'obj' of method ProjectConfigCollection.OnInsertComplete(Int32, Object):Void to 'value' in order to match the identifier as it has been declared in CollectionBase.OnInsertComplete(Int32, Object):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="OnRemoveComplete(System.Int32,System.Object):System.Void" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="ProjectConfigCollection.cs" Line="85">Change parameter name 'obj' of method ProjectConfigCollection.OnRemoveComplete(Int32, Object):Void to 'value' in order to match the identifier as it has been declared in CollectionBase.OnRemoveComplete(Int32, Object):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="project" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'project' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ProjectEventArgs" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="configName" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'configName' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="type" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'type' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ProjectEventHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="UseGenericEventHandlerInstances" Category="Microsoft.Design" CheckId="CA1003" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Remove 'NUnit.Util.ProjectEventHandler' and replace its usage with EventHandler&lt;T&gt;</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ProjectFormatException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add the following constructor to NUnit.Util.ProjectFormatException: protected ProjectFormatException(SerializationInfo, StreamingContext).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'ProjectFormatException' as this type implements ISerializable.</Issue>
          </Message>
          <Message Id="System.ApplicationException" TypeName="TypesShouldNotExtendCertainBaseTypes" Category="Microsoft.Design" CheckId="CA1058" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="System.ApplicationException" Certainty="75" Level="Error">Change ProjectFormatException's base type so that it no longer extends System.ApplicationException. This base exception type does not provide any additional value for framework classes. Extend System.Exception or an existing unsealed exception type instead. Do not create a new exception base type unless there is specific value in enabling the creation of a catch handler for an entire class of exceptions.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ProxyTestRunner" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="CriticalWarning">Change the accessibility of all public constructors in 'ProxyTestRunner' to protected.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name=".ctor(NUnit.Core.TestRunner)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="ProxyTestRunner.cs" Line="55">Validate parameter 'testRunner' passed to externally visible method ProxyTestRunner.ProxyTestRunner(TestRunner).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="listener" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'listener' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="runnerID" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'runnerID' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RecentFileEntry" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="CLRVersion" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Member" TypeName="LongAcronymsShouldBePascalCased" Category="Microsoft.Naming" CheckId="CA1705" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="RecentFileEntry.cs" Line="38">Correct the capitalization of member name 'RecentFileEntry.CLRVersion:Version'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="IsCompatibleCLRVersion" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Member" TypeName="LongAcronymsShouldBePascalCased" Category="Microsoft.Naming" CheckId="CA1705" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="RecentFileEntry.cs" Line="48">Correct the capitalization of member name 'RecentFileEntry.IsCompatibleCLRVersion:Boolean'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Parse(System.String):NUnit.Util.RecentFileEntry" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="RecentFileEntry.cs" Line="58">Validate parameter 'text' passed to externally visible method RecentFileEntry.Parse(String):RecentFileEntry.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Separator" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'Separator' is declared as 'static readonly' but is initialized with a constant value '44'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RecentFiles" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidOverloadsInComVisibleInterfaces" Category="Microsoft.Interoperability" CheckId="CA1402" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="CriticalWarning">ComVisible(true) interface 'NUnit.Util.RecentFiles' defines overloaded methods. Give each method a unique name or make the type ComVisible(false).</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Prefix interface name 'RecentFiles' with 'I'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="RecentFilesCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="CollectionsShouldImplementGenericInterface" Category="Microsoft.Design" CheckId="CA1010" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
           <Issue Certainty="90" Level="Error">'RecentFilesCollection' appears to be a non-generic, strongly typed collection. Add an implementation to the instance of ICollection&lt;T&gt; where T is RecentFilesCollection's underlying element type.</Issue>
          </Message>
          <Message TypeName="ICollectionImplementationsHaveStronglyTypedMembers" Category="Microsoft.Design" CheckId="CA1035" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">'RecentFilesCollection' should provide a strongly typed implementation of ICollection.CopyTo.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="RecentFilesService" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="DefaultSize" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'DefaultSize' is declared as 'static readonly' but is initialized with a constant value '5'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="MaxSize" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'MaxSize' is declared as 'static readonly' but is initialized with a constant value '24'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="MinSize" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'MinSize' is declared as 'static readonly' but is initialized with a constant value '1'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SetMostRecent(NUnit.Util.RecentFileEntry):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util\Services" File="RecentFilesService.cs" Line="94">Validate parameter 'entry' passed to externally visible method RecentFilesService.SetMostRecent(RecentFileEntry):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="ValueName(System.Int32):System.String" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util\Services" File="RecentFilesService.cs" Line="135">The 'this' parameter (or 'Me' in VB) of RecentFilesService.ValueName(Int32):String is never used. Mark the member as static (or Shared in VB) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util\Services" File="RecentFilesService.cs" Line="136">RecentFilesService.ValueName(Int32):String makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RegistrySettingsStorage" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on NUnit.Util.RegistrySettingsStorage or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="Dispose():System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="RegistrySettingsStorage.cs" Line="155">Modify RegistrySettingsStorage.Dispose():Void so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in VB), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetSetting(System.String):System.Object" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="RegistrySettingsStorage.cs" Line="68">Validate parameter 'settingName' passed to externally visible method RegistrySettingsStorage.GetSetting(String):Object.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="MakeChildStorage(System.String):NUnit.Util.ISettingsStorage" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="RegistrySettingsStorage.cs" Line="129">Change parameter name 'storageName' of method RegistrySettingsStorage.MakeChildStorage(String):ISettingsStorage to 'name' in order to match the identifier as it has been declared in ISettingsStorage.MakeChildStorage(String):ISettingsStorage.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="RemoveSetting(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="RegistrySettingsStorage.cs" Line="87">Validate parameter 'settingName' passed to externally visible method RegistrySettingsStorage.RemoveSetting(String):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SaveSetting(System.String,System.Object):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="RegistrySettingsStorage.cs" Line="111">Validate parameter 'settingName' passed to externally visible method RegistrySettingsStorage.SaveSetting(String, Object):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ResultSummarizer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor(NUnit.Core.TestResult)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="ResultSummarizer.cs" Line="21">Validate parameter 'result' passed to externally visible method ResultSummarizer.ResultSummarizer(TestResult).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name=".ctor(NUnit.Core.TestResult[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="ResultSummarizer.cs" Line="26">Validate parameter 'results' passed to externally visible method ResultSummarizer.ResultSummarizer(TestResult[]).</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="ResultSummarizer.cs" Line="26">Validate parameter 'results' passed to externally visible method ResultSummarizer.ResultSummarizer(TestResult[]).</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ServiceManager" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="GetService(System.Type):NUnit.Core.IService" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util\Services" File="ServiceManager.cs" Line="42">Validate parameter 'serviceType' passed to externally visible method ServiceManager.GetService(Type):IService.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Services" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Remove the public constructors from 'Services'.</Issue>
          </Message>
          <Message TypeName="TypeNamesShouldNotMatchNamespaces" Category="Microsoft.Naming" CheckId="CA1724" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">The type name 'Services' conflicts in whole or in part with the namespace name 'System.Web.Services.Protocols'. Change either name to eliminate the conflict.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="AddinManager" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Addin" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="Services.cs" Line="23">Correct the spelling of the unrecognized token 'Addin' in member name 'Services.AddinManager:AddinManager'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="AddinRegistry" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Addin" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="Services.cs" Line="37">Correct the spelling of the unrecognized token 'Addin' in member name 'Services.AddinRegistry:IAddinRegistry'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SettingsEventHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="UseGenericEventHandlerInstances" Category="Microsoft.Design" CheckId="CA1003" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Remove 'NUnit.Util.SettingsEventHandler' and replace its usage with EventHandler&lt;T&gt;</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="SettingsGroup" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldDifferByMoreThanCase" Category="Microsoft.Naming" CheckId="CA1708" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="Member" Certainty="95" Level="Error">Change member names 'Storage' and 'storage' so that they differ by more than case.</Issue>
          </Message>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on NUnit.Util.SettingsGroup or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="Dispose():System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="SettingsGroup.cs" Line="210">Modify SettingsGroup.Dispose():Void so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in VB), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Changed" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'SettingsEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetSetting(System.String,System.Enum):System.Enum" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="SettingsGroup.cs" Line="169">'result', a local, is cast to type 'System.Enum' multiple times in method SettingsGroup.GetSetting(String, Enum):Enum. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="SettingsGroup.cs" Line="171">Validate parameter 'defaultValue' passed to externally visible method SettingsGroup.GetSetting(String, Enum):Enum.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetSetting(System.String,System.Int32):System.Int32" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="SettingsGroup.cs" Line="101">SettingsGroup.GetSetting(String, Int32):Int32 makes a call to System.Int32.Parse(System.String) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Int32.Parse(System.String,System.IFormatProvider).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetSetting(System.String,System.String):System.String" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="SettingsGroup.cs" Line="149">'result', a local, is cast to type 'System.String' multiple times in method SettingsGroup.GetSetting(String, String):String. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="storage" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'storage' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SettingsService" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="settingsFileName" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'settingsFileName' is declared as 'static readonly' but is initialized with a constant value 'NUnitSettings.xml'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SettingsService+LegacySettingsConverter" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="Convert():System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util\Services" File="SettingsService.cs" Line="114">LegacySettingsConverter.Convert():Void makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="current" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'LegacySettingsConverter.current' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StackTraceFilter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Remove the public constructors from 'StackTraceFilter'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="Filter(System.String):System.String" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="StackTraceFilter.cs" Line="32">Modify 'StackTraceFilter.Filter(String):String' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.IO.StringWriter.#ctor" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="StackTraceFilter.cs" Line="20">StackTraceFilter.Filter(String):String makes a call to System.IO.StringWriter.#ctor that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.IO.StringWriter.#ctor(System.IFormatProvider).</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SummaryVisitor" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="SummaryVisitor.cs" Line="36">SummaryVisitor.SummaryVisitor() initializes field initialized of type System.Boolean to false. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="SummaryVisitor.cs" Line="35">SummaryVisitor.SummaryVisitor() initializes field resultCount of type System.Int32 to 0. Remove this initialization as it will be done automatically by the runtime.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Visit(NUnit.Core.TestCaseResult):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="SummaryVisitor.cs" Line="41">Validate parameter 'caseResult' passed to externally visible method SummaryVisitor.Visit(TestCaseResult):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Visit(NUnit.Core.TestSuiteResult):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="SummaryVisitor.cs" Line="65">Validate parameter 'suiteResult' passed to externally visible method SummaryVisitor.Visit(TestSuiteResult):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestEventDispatcher" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="ProjectLoaded" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="ProjectLoadFailed" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="ProjectLoading" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="ProjectUnloaded" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="ProjectUnloadFailed" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="ProjectUnloading" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="RunFinished" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="RunStarting" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SuiteFinished" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SuiteStarting" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TestException" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TestFinished" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TestLoaded" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TestLoadFailed" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TestLoading" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TestOutput" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TestReloaded" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TestReloadFailed" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TestReloading" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TestStarting" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TestUnloaded" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TestUnloadFailed" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="TestUnloading" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'TestEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Fire(NUnit.Util.TestEventHandler,NUnit.Util.TestEventArgs):System.Void" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestEventDispatcher.cs" Line="59">Consider making 'Fire' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="FireProjectLoaded(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestEventDispatcher.cs" Line="72">Consider making 'FireProjectLoaded' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="FireProjectLoadFailed(System.String,System.Exception):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestEventDispatcher.cs" Line="79">Consider making 'FireProjectLoadFailed' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="FireProjectLoading(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestEventDispatcher.cs" Line="65">Consider making 'FireProjectLoading' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="FireProjectUnloaded(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestEventDispatcher.cs" Line="93">Consider making 'FireProjectUnloaded' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="FireProjectUnloadFailed(System.String,System.Exception):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestEventDispatcher.cs" Line="100">Consider making 'FireProjectUnloadFailed' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="FireProjectUnloading(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestEventDispatcher.cs" Line="86">Consider making 'FireProjectUnloading' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="FireRunFinished(NUnit.Core.TestResult):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestEventDispatcher.cs" Line="177">Consider making 'FireRunFinished' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="FireRunFinished(System.Exception):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestEventDispatcher.cs" Line="184">Consider making 'FireRunFinished' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="FireRunStarting(System.String,System.Int32):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestEventDispatcher.cs" Line="170">Consider making 'FireRunStarting' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="FireSuiteFinished(NUnit.Core.TestResult):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestEventDispatcher.cs" Line="212">Consider making 'FireSuiteFinished' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="FireSuiteStarting(NUnit.Core.TestName):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestEventDispatcher.cs" Line="205">Consider making 'FireSuiteStarting' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="FireTestException(System.String,System.Exception):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestEventDispatcher.cs" Line="219">Consider making 'FireTestException' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="FireTestFinished(NUnit.Core.TestResult):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestEventDispatcher.cs" Line="198">Consider making 'FireTestFinished' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="FireTestLoaded(System.String,NUnit.Core.ITest):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestEventDispatcher.cs" Line="114">Consider making 'FireTestLoaded' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="FireTestLoadFailed(System.String,System.Exception):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestEventDispatcher.cs" Line="121">Consider making 'FireTestLoadFailed' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="FireTestLoading(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestEventDispatcher.cs" Line="107">Consider making 'FireTestLoading' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="FireTestOutput(NUnit.Core.TestOutput):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestEventDispatcher.cs" Line="226">Consider making 'FireTestOutput' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="FireTestReloaded(System.String,NUnit.Core.ITest):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestEventDispatcher.cs" Line="156">Consider making 'FireTestReloaded' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="FireTestReloadFailed(System.String,System.Exception):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestEventDispatcher.cs" Line="163">Consider making 'FireTestReloadFailed' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="FireTestReloading(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestEventDispatcher.cs" Line="149">Consider making 'FireTestReloading' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="FireTestStarting(NUnit.Core.TestName):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestEventDispatcher.cs" Line="191">Consider making 'FireTestStarting' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="FireTestUnloaded(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestEventDispatcher.cs" Line="135">Consider making 'FireTestUnloaded' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="FireTestUnloadFailed(System.String,System.Exception):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestEventDispatcher.cs" Line="142">Consider making 'FireTestUnloadFailed' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="FireTestUnloading(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestEventDispatcher.cs" Line="128">Consider making 'FireTestUnloading' an event.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestEventHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="UseGenericEventHandlerInstances" Category="Microsoft.Design" CheckId="CA1003" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Remove 'NUnit.Util.TestEventHandler' and replace its usage with EventHandler&lt;T&gt;</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="TestExceptionHandler" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on NUnit.Util.TestExceptionHandler or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="Dispose():System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestExceptionHandler.cs" Line="36">Modify TestExceptionHandler.Dispose():Void so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in VB), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Finalize():System.Void" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="FinalizeImplementation" Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestExceptionHandler.cs" Line="25">Modify TestExceptionHandler.Finalize():Void so that it calls Dispose(false) and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestLoader" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor(NUnit.Util.TestEventDispatcher)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="92">TestLoader.TestLoader(TestEventDispatcher) initializes field lastException of type System.Exception to null. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="72">TestLoader.TestLoader(TestEventDispatcher) initializes field loadedTest of type NUnit.Core.ITest to null. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="77">TestLoader.TestLoader(TestEventDispatcher) initializes field loadedTestName of type System.String to null. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="109">TestLoader.TestLoader(TestEventDispatcher) initializes field reloadOnChange of type System.Boolean to false. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="127">TestLoader.TestLoader(TestEventDispatcher) initializes field reloadOnRun of type System.Boolean to false. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="103">TestLoader.TestLoader(TestEventDispatcher) initializes field reloadPending of type System.Boolean to false. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="115">TestLoader.TestLoader(TestEventDispatcher) initializes field rerunOnChange of type System.Boolean to false. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="67">TestLoader.TestLoader(TestEventDispatcher) initializes field testProject of type NUnit.Util.NUnitProject to null. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="87">TestLoader.TestLoader(TestEventDispatcher) initializes field testResult of type NUnit.Core.TestResult to null. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="62">TestLoader.TestLoader(TestEventDispatcher) initializes field testRunner of type NUnit.Core.TestRunner to null. Remove this initialization as it will be done automatically by the runtime.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetCategories():System.Collections.IList" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="686">Change 'GetCategories' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="InitializeLifetimeService():System.Object" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="BaseOnly" Certainty="33" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="752">Add the following security attribute to TestLoader.InitializeLifetimeService():Object in order to match a LinkDemand on base method MarshalByRefObject.InitializeLifetimeService():Object:  [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)].</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="LoadProject(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="414">Change parameter name 'filePath' of method TestLoader.LoadProject(String):Void to 'filename' in order to match the identifier as it has been declared in ITestLoader.LoadProject(String):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="LoadProject(System.String,System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="403">Modify 'TestLoader.LoadProject(String, String):Void' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="389">Change parameter name 'filePath' of method TestLoader.LoadProject(String, String):Void to 'filename' in order to match the identifier as it has been declared in ITestLoader.LoadProject(String, String):Void.</Issue>
            </Message>
            <Message Id="1#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="389">Change parameter name 'configName' of method TestLoader.LoadProject(String, String):Void to 'configname' in order to match the identifier as it has been declared in ITestLoader.LoadProject(String, String):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="LoadProject(System.String[]):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="431">Modify 'TestLoader.LoadProject(String[]):Void' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="LoadTest(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="556">Modify 'TestLoader.LoadTest(String):Void' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="536">TestLoader.LoadTest(String):Void creates an exception of type 'System.ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="549">TestLoader.LoadTest(String):Void creates an exception of type 'System.ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="536">TestLoader.LoadTest(String):Void makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="549">TestLoader.LoadTest(String):Void makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="MultiDomain" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Multi" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="216">Correct the spelling of the unrecognized token 'Multi' in member name 'TestLoader.MultiDomain:Boolean'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="NewProject():System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="354">Modify 'TestLoader.NewProject():Void' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="NewProject(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="378">Modify 'TestLoader.NewProject(String):Void' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="365">Change parameter name 'filePath' of method TestLoader.NewProject(String):Void to 'filename' in order to match the identifier as it has been declared in ITestLoader.NewProject(String):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="NUnit.Core.EventListener.RunFinished(NUnit.Core.TestResult):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="257">Make 'TestLoader' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'EventListener.RunFinished(TestResult):Void' and is visible to derived classes.</Issue>
            </Message>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="257">Change parameter name 'testResult' of method TestLoader.NUnit.Core.EventListener.RunFinished(TestResult):Void to 'result' in order to match the identifier as it has been declared in EventListener.RunFinished(TestResult):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="NUnit.Core.EventListener.RunFinished(System.Exception):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="266">Make 'TestLoader' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'EventListener.RunFinished(Exception):Void' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="NUnit.Core.EventListener.RunStarted(System.String,System.Int32):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="252">Make 'TestLoader' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'EventListener.RunStarted(String, Int32):Void' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="NUnit.Core.EventListener.SuiteFinished(NUnit.Core.TestSuiteResult):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="304">Make 'TestLoader' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'EventListener.SuiteFinished(TestSuiteResult):Void' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="NUnit.Core.EventListener.SuiteStarted(NUnit.Core.TestName):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="295">Make 'TestLoader' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'EventListener.SuiteStarted(TestName):Void' and is visible to derived classes.</Issue>
            </Message>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="295">Change parameter name 'suiteName' of method TestLoader.NUnit.Core.EventListener.SuiteStarted(TestName):Void to 'testName' in order to match the identifier as it has been declared in EventListener.SuiteStarted(TestName):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="NUnit.Core.EventListener.TestFinished(NUnit.Core.TestCaseResult):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="286">Make 'TestLoader' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'EventListener.TestFinished(TestCaseResult):Void' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="NUnit.Core.EventListener.TestOutput(NUnit.Core.TestOutput):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="335">Make 'TestLoader' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'EventListener.TestOutput(TestOutput):Void' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="NUnit.Core.EventListener.TestStarted(NUnit.Core.TestName):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="276">Make 'TestLoader' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'EventListener.TestStarted(TestName):Void' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="NUnit.Core.EventListener.UnhandledException(System.Exception):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="313">Make 'TestLoader' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'EventListener.UnhandledException(Exception):Void' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="OnTestChanged(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="637">Modify 'TestLoader.OnTestChanged(String):Void' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="UnloadProject():System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="457">Modify 'TestLoader.UnloadProject():Void' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="UnloadTest():System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestLoader.cs" Line="590">Modify 'TestLoader.UnloadTest():Void' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestObserver" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Prefix interface name 'TestObserver' with 'I'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="TestResultItem" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor(NUnit.Core.TestResult)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestResultItem.cs" Line="24">Validate parameter 'result' passed to externally visible method TestResultItem.TestResultItem(TestResult).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetMessage():System.String" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestResultItem.cs" Line="49">TestResultItem.GetMessage():String makes a call to System.String.Format(System.String,System.Object,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestResultItem.cs" Line="48">Change 'GetMessage' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetToolTipMessage():System.String" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ToolTip" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestResultItem.cs" Line="53">The compound word 'ToolTip' in method 'GetToolTipMessage' exists as a discrete term. If your usage is intended to be single word, case it as 'Tooltip'.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestResultItem.cs" Line="53">Change 'GetToolTipMessage' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="ReplaceTabs(System.String,System.Int32):System.String" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#str" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestResultItem.cs" Line="58">In method TestResultItem.ReplaceTabs(String, Int32):String, correct the spelling of the unrecognized token 'str' in parameter name 'strOriginal' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
            <Message Id="1#n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestResultItem.cs" Line="58">In method TestResultItem.ReplaceTabs(String, Int32):String, correct the spelling of the unrecognized token 'n' in parameter name 'nSpaces' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestResultItem.cs" Line="58">The 'this' parameter (or 'Me' in VB) of TestResultItem.ReplaceTabs(String, Int32):String is never used. Mark the member as static (or Shared in VB) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestResultItem.cs" Line="61">Validate parameter 'strOriginal' passed to externally visible method TestResultItem.ReplaceTabs(String, Int32):String.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="ToString():System.String" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="TestResultItem.cs" Line="42">TestResultItem.ToString():String makes a call to System.String.Format(System.String,System.Object,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="VSProject" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="Configs" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Configs" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="VSProject.cs" Line="107">Correct the spelling of the unrecognized token 'Configs' in member name 'VSProject.Configs:VSProjectConfigCollection'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="IsProjectFile(System.String):System.Boolean" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="VSProject.cs" Line="137">VSProject.IsProjectFile(String):Boolean makes a call to System.String.ToLower that does not explicitly provide a CultureInfo. This should be replaced with a call to System.String.ToLower(System.Globalization.CultureInfo).</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="VSProject.cs" Line="134">Validate parameter 'path' passed to externally visible method VSProject.IsProjectFile(String):Boolean.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Load():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="VSProject.cs" Line="252">Modify 'VSProject.Load():Void' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.Convert.ToInt32(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="VSProject.cs" Line="188">VSProject.Load():Void makes a call to System.Convert.ToInt32(System.String) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Convert.ToInt32(System.String,System.IFormatProvider).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="RequiredAttributeValue(System.Xml.XmlNode,System.String):System.String" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="VSProject.cs" Line="378">VSProject.RequiredAttributeValue(XmlNode, String):String creates an exception of type 'System.ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SafeAttributeValue(System.Xml.XmlNode,System.String):System.String" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="VSProject.cs" Line="367">The 'this' parameter (or 'Me' in VB) of VSProject.SafeAttributeValue(XmlNode, String):String is never used. Mark the member as static (or Shared in VB) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="solutionExtension" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'solutionExtension' is declared as 'static readonly' but is initialized with a constant value '.sln'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="ThrowInvalidFileType(System.String):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="VSProject.cs" Line="353">The 'this' parameter (or 'Me' in VB) of VSProject.ThrowInvalidFileType(String):Void is never used. Mark the member as static (or Shared in VB) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="VSProject.cs" Line="354">VSProject.ThrowInvalidFileType(String):Void makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="ThrowInvalidFormat(System.String,System.Exception):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="VSProject.cs" Line="360">The 'this' parameter (or 'Me' in VB) of VSProject.ThrowInvalidFormat(String, Exception):Void is never used. Mark the member as static (or Shared in VB) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="VSProject.cs" Line="361">VSProject.ThrowInvalidFormat(String, Exception):Void makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="VSProjectConfigCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="CollectionsShouldImplementGenericInterface" Category="Microsoft.Design" CheckId="CA1010" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
           <Issue Certainty="90" Level="Error">'VSProjectConfigCollection' appears to be a non-generic, strongly typed collection. Add an implementation to the instance of IList&lt;T&gt; where T is VSProjectConfigCollection's underlying element type.</Issue>
          </Message>
          <Message TypeName="ICollectionImplementationsHaveStronglyTypedMembers" Category="Microsoft.Design" CheckId="CA1035" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">'VSProjectConfigCollection' should provide a strongly typed implementation of ICollection.CopyTo.</Issue>
          </Message>
          <Message TypeName="ListsAreStronglyTyped" Category="Microsoft.Design" CheckId="CA1039" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">'VSProjectConfigCollection' should provide a strongly typed implementation of IList.IndexOf.</Issue>
           <Issue Certainty="90" Level="Error">'VSProjectConfigCollection' should provide a strongly typed implementation of IList.Insert.</Issue>
           <Issue Certainty="90" Level="Error">'VSProjectConfigCollection' should provide a strongly typed implementation of IList.Remove.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="XmlResultTransform" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="Transform(System.Xml.XPath.IXPathNavigable,System.IO.TextWriter):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#xpnav" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="75" Level="CriticalWarning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="XmlResultTransform.cs" Line="58">In method XmlResultTransform.Transform(IXPathNavigable, TextWriter):Void, correct the spelling of the unrecognized token 'xpnav' in parameter name 'xpnav' or strip it entirely if it represents any sort of hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="XmlResultVisitor" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="CriticalError">Implement IDisposable on 'NUnit.Util.XmlResultVisitor' as it instantiates members of the following IDisposable types: System.Xml.XmlTextWriter, System.IO.MemoryStream</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="EncodeCData(System.String):System.String" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="XmlResultVisitor.cs" Line="177">The 'this' parameter (or 'Me' in VB) of XmlResultVisitor.EncodeCData(String):String is never used. Mark the member as static (or Shared in VB) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Initialize(NUnit.Core.TestResult):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Xml.XmlWriter.WriteComment(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="XmlResultVisitor.cs" Line="45">XmlResultVisitor.Initialize(TestResult):Void passes a literal as parameter 1 of a call to XmlWriter.WriteComment(String):Void. Retrieve the following string argument from a resource table instead: 'This file represents the results of running a test suite'</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="XmlResultVisitor.cs" Line="50">XmlResultVisitor.Initialize(TestResult):Void makes a call to System.Int32.ToString that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Int32.ToString(System.IFormatProvider).</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="XmlResultVisitor.cs" Line="51">XmlResultVisitor.Initialize(TestResult):Void makes a call to System.Int32.ToString that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Int32.ToString(System.IFormatProvider).</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="XmlResultVisitor.cs" Line="52">XmlResultVisitor.Initialize(TestResult):Void makes a call to System.Int32.ToString that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Int32.ToString(System.IFormatProvider).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Visit(NUnit.Core.TestCaseResult):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="XmlResultVisitor.cs" Line="106">XmlResultVisitor.Visit(TestCaseResult):Void makes a call to System.Int32.ToString that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Int32.ToString(System.IFormatProvider).</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="XmlResultVisitor.cs" Line="94">Validate parameter 'caseResult' passed to externally visible method XmlResultVisitor.Visit(TestCaseResult):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Visit(NUnit.Core.TestSuiteResult):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="XmlResultVisitor.cs" Line="221">XmlResultVisitor.Visit(TestSuiteResult):Void makes a call to System.Int32.ToString that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Int32.ToString(System.IFormatProvider).</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="XmlResultVisitor.cs" Line="215">Validate parameter 'suiteResult' passed to externally visible method XmlResultVisitor.Visit(TestSuiteResult):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="WriteCategories(NUnit.Core.TestResult):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="XmlResultVisitor.cs" Line="183">Validate parameter 'result' passed to externally visible method XmlResultVisitor.WriteCategories(TestResult):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="WriteProperties(NUnit.Core.TestResult):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="XmlResultVisitor.cs" Line="198">Validate parameter 'result' passed to externally visible method XmlResultVisitor.WriteProperties(TestResult):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="XmlSettingsStorage" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="LoadSettings():System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.ApplicationException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="XmlSettingsStorage.cs" Line="43">XmlSettingsStorage.LoadSettings():Void passes a literal as parameter 1 of a call to ApplicationException.ApplicationException(String). Retrieve the following string argument from a resource table instead: 'Setting must have 'name' attribute'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="XmlSettingsStorage.cs" Line="46">XmlSettingsStorage.LoadSettings():Void passes a literal as parameter 1 of a call to ApplicationException.ApplicationException(String). Retrieve the following string argument from a resource table instead: 'Setting must have 'value' attribute'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="XmlSettingsStorage.cs" Line="40">XmlSettingsStorage.LoadSettings():Void passes a literal as parameter 1 of a call to ApplicationException.ApplicationException(String). Retrieve the following string argument from a resource table instead: 'Unknown element in settings file: __'</Issue>
            </Message>
            <Message Id="System.ApplicationException.#ctor(System.String,System.Exception)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="XmlSettingsStorage.cs" Line="53">XmlSettingsStorage.LoadSettings():Void passes a literal as parameter 1 of a call to ApplicationException.ApplicationException(String, Exception). Retrieve the following string argument from a resource table instead: 'Error loading settings file'</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="XmlSettingsStorage.cs" Line="40">XmlSettingsStorage.LoadSettings():Void creates an exception of type 'System.ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="XmlSettingsStorage.cs" Line="43">XmlSettingsStorage.LoadSettings():Void creates an exception of type 'System.ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="XmlSettingsStorage.cs" Line="46">XmlSettingsStorage.LoadSettings():Void creates an exception of type 'System.ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\ClientUtilities\util" File="XmlSettingsStorage.cs" Line="53">XmlSettingsStorage.LoadSettings():Void creates an exception of type 'System.ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="$(ProjectDir)/../svnccsm/edu.tum.cs.conqat.dotnet/test-data/edu.tum.cs.conqat.dotnet.scope/NUnit_Folder/GuiRunner/nunit-gui/bin/Debug2005/nunit-gui-runner.dll">
   <Modules>
    <Module Name="nunit-gui-runner.dll">
     <Messages>
      <Message TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
       <Issue Name="NoAttr" Certainty="95" Level="Error">'nunit-gui-runner' should be marked with CLSCompliantAttribute and its value should be true.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithComVisible" Category="Microsoft.Design" CheckId="CA1017" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
       <Issue Name="NoAttribute" Certainty="95" Level="CriticalError">Mark 'nunit-gui-runner' as ComVisible(false) at the assembly level, then mark all types within the assembly that should be exposed to Com clients as ComVisible(true).</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="NUnit.Gui">
       <Types>
        <Type Name="AboutBox" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="AboutBox.cs" Line="54">AboutBox.AboutBox() makes a call to System.String.Format(System.String,System.Object,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="InitializeComponent():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="AboutBox.cs" Line="248">AboutBox.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'About NUnit'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="AboutBox.cs" Line="210">AboutBox.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'CLR Version:'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="AboutBox.cs" Line="192">AboutBox.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Copyright:'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="AboutBox.cs" Line="134">AboutBox.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Developers:'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="AboutBox.cs" Line="165">AboutBox.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Information:'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="AboutBox.cs" Line="143">AboutBox.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'James W. Newkirk, Michael C. Two, Alexei A. Vorontsov, Philip Craig, Ethan Smith, Doug de la Torre, Charlie Poole'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="AboutBox.cs" Line="183">AboutBox.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Kent Beck and Erich Gamma'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="AboutBox.cs" Line="106">AboutBox.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'OK'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="AboutBox.cs" Line="174">AboutBox.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Thanks to:'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="AboutBox.cs" Line="116">AboutBox.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Version:'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="AboutBox.cs" Line="155">AboutBox.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'http://www.nunit.org '</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="AboutBox.cs" Line="125">AboutBox.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'label2'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="AboutBox.cs" Line="201">AboutBox.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'label8'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="AboutBox.cs" Line="219">AboutBox.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'label9'</Issue>
            </Message>
            <Message Id="Vorontsov" TypeName="LiteralsShouldBeSpelledCorrectly" Category="Microsoft.Usage" CheckId="CA2204" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="85" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="AboutBox.cs" Line="143">Correct the spelling of the unrecognized token 'Vorontsov' in the literal 'James W. Newkirk, Michael C. Two, Alexei A. Vorontsov, Philip Craig, Ethan Smith, Doug de la Torre, Charlie Poole'.</Issue>
            </Message>
            <Message Id="nunit" TypeName="LiteralsShouldBeSpelledCorrectly" Category="Microsoft.Usage" CheckId="CA2204" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="85" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="AboutBox.cs" Line="155">Correct the spelling of the unrecognized token 'nunit' in the literal 'http://www.nunit.org '.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AddinDialog" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Addin" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of the unrecognized token 'Addin' in type name 'NUnit.Gui.AddinDialog'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="InitializeComponent():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.ColumnHeader.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="AddinDialog.cs" Line="99">AddinDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to ColumnHeader.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Addin'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="AddinDialog.cs" Line="109">AddinDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to ColumnHeader.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Status'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="AddinDialog.cs" Line="104">AddinDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to ColumnHeader.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Type'</Issue>
            </Message>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="AddinDialog.cs" Line="121">AddinDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: ''</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="AddinDialog.cs" Line="138">AddinDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Close'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="AddinDialog.cs" Line="130">AddinDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Description:'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="AddinDialog.cs" Line="150">AddinDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Registered Addins'</Issue>
            </Message>
            <Message Id="Addin" TypeName="LiteralsShouldBeSpelledCorrectly" Category="Microsoft.Usage" CheckId="CA2204" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="85" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="AddinDialog.cs" Line="99">Correct the spelling of the unrecognized token 'Addin' in the literal 'Addin'.</Issue>
            </Message>
            <Message Id="Addins" TypeName="LiteralsShouldBeSpelledCorrectly" Category="Microsoft.Usage" CheckId="CA2204" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="85" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="AddinDialog.cs" Line="150">Correct the spelling of the unrecognized token 'Addins' in the literal 'Registered Addins'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AppEntry" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Remove the public constructors from 'AppEntry'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="Main(System.String[]):System.Int32" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NUnit.UiKit.UserMessage.DisplayFailure(System.String,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="AppEntry.cs" Line="100">AppEntry.Main(String[]):Int32 passes a literal as parameter 2 of a call to UserMessage.DisplayFailure(String, String):DialogResult. Retrieve the following string argument from a resource table instead: 'Help Syntax'</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DetailResults" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="DisplayResults(NUnit.Core.TestResult):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="DetailResults.cs" Line="33">Validate parameter 'results' passed to externally visible method DetailResults.DisplayResults(TestResult):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="MakeNotRunNode(NUnit.Core.TestResult):System.Windows.Forms.TreeNode" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.TreeNode.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="DetailResults.cs" Line="74">DetailResults.MakeNotRunNode(TestResult):TreeNode passes a literal as parameter 1 of a call to TreeNode.TreeNode(String). Retrieve the following string argument from a resource table instead: 'Reason: __'</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="DetailResults.cs" Line="71">The 'this' parameter (or 'Me' in VB) of DetailResults.MakeNotRunNode(TestResult):TreeNode is never used. Mark the member as static (or Shared in VB) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Visit(NUnit.Core.TestCaseResult):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="DetailResults.cs" Line="41">Change parameter name 'result' of method DetailResults.Visit(TestCaseResult):Void to 'caseResult' in order to match the identifier as it has been declared in ResultVisitor.Visit(TestCaseResult):Void.</Issue>
            </Message>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="DetailResults.cs" Line="42">Validate parameter 'result' passed to externally visible method DetailResults.Visit(TestCaseResult):Void.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Visit(NUnit.Core.TestSuiteResult):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="DetailResults.cs" Line="61">Validate parameter 'suiteResult' passed to externally visible method DetailResults.Visit(TestSuiteResult):Void.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExceptionDetailsForm" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="FormatMessage(System.Exception):System.String" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ExceptionDetailsForm.cs" Line="128">The 'this' parameter (or 'Me' in VB) of ExceptionDetailsForm.FormatMessage(Exception):String is never used. Mark the member as static (or Shared in VB) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="InitializeComponent():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ExceptionDetailsForm.cs" Line="90">ExceptionDetailsForm.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: ''</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ExceptionDetailsForm.cs" Line="110">ExceptionDetailsForm.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Exception Details'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ExceptionDetailsForm.cs" Line="78">ExceptionDetailsForm.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'OK'</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="GuiOptions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name=".ctor(System.String[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="GuiOptions.cs" Line="17">GuiOptions.GuiOptions(String[]) initializes field help of type System.Boolean to false. Remove this initialization as it will be done automatically by the runtime.</Issue>
             <Issue Certainty="90" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="GuiOptions.cs" Line="15">GuiOptions.GuiOptions(String[]) initializes field isInvalid of type System.Boolean to false. Remove this initialization as it will be done automatically by the runtime.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="cleanup" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'cleanup' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="config" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'config' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="exclude" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'exclude' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="fixture" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'fixture' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="framework" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'framework' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="help" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'help' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="include" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'include' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="lang" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'lang' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="noload" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'noload' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
            <Message Id="noload" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of the unrecognized token 'noload' in member name 'GuiOptions.noload'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="run" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'run' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NUnitForm" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="aboutMenuItem" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'aboutMenuItem' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="assemblyDetailsMenuItem_Click(System.Object,System.EventArgs):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="NUnit.UiKit.UserMessage.Display(System.String,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="1207">NUnitForm.assemblyDetailsMenuItem_Click(Object, EventArgs):Void passes a literal as parameter 2 of a call to UserMessage.Display(String, String):DialogResult. Retrieve the following string argument from a resource table instead: 'Test Assembly Info'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="CancelRun():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="NUnit.UiKit.UserMessage.Ask(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="1566">NUnitForm.CancelRun():Void passes a literal as parameter 1 of a call to UserMessage.Ask(String):DialogResult. Retrieve the following string argument from a resource table instead: 'Do you want to cancel the running test?'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="displayFullGui():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="986">Replace the call to String.op_Inequality("") in 'NUnitForm.displayFullGui():Void' with a call to String.IsNullOrEmpty.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="displayMiniGui():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="1018">Replace the call to String.op_Inequality("") in 'NUnitForm.displayMiniGui():Void' with a call to String.IsNullOrEmpty.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="exitMenuItem" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'exitMenuItem' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="fileMenu" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'fileMenu' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="fileMenuSeparator4" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'fileMenuSeparator4' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="groupBox1" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'groupBox1' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="helpItem" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'helpItem' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="helpMenuItem" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'helpMenuItem' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="helpMenuSeparator1" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'helpMenuSeparator1' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="InitializeComponent():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="687">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Run'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="677">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Stop'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="793">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'NUnit'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="258">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Status'</Issue>
            </Message>
            <Message Id="System.Windows.Forms.MenuItem.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="621">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;About NUnit...'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="444">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Assembly Details...'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="427">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Change...'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="305">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Close'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="476">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Configurations'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="766">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Decrease'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="416">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Decrease'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="572">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Exception Details...'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="285">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;File'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="376">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Full GUI'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="604">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Help'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="760">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Increase'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="410">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Increase'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="383">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Mini GUI'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="292">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;New Project...'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="299">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Open Project...'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="583">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Options...'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="469">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Project'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="335">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Reload'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="433">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Restore'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="777">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Restore'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="521">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Run All'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="317">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Save'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="566">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Save Results as XML...'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="456">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Status Bar'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="515">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Test'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="368">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;View'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="422">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '-'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="439">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '-'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="346">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '-'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="389">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '-'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="481">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '-'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="498">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '-'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="394">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '-'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="450">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '-'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="616">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '-'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="329">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '-'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="772">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '-'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="311">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '-'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="542">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '-'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="589">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '-'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="578">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '-'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="486">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Add Assembly...'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="492">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Add VS Project...'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="594">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Addins...'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="351">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'E&amp;xit'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="503">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Edit...'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="755">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Fi&amp;xed Font'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="405">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'GUI Fo&amp;nt'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="610">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'NUnit &amp;Help...'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="341">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Recent &amp;Files'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="536">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Run &amp;Failed'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="528">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Run &amp;Selected'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="547">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'S&amp;top Run'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="323">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Save &amp;As...'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="560">NUnitForm.InitializeComponent():Void passes a literal as parameter 1 of a call to MenuItem.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'T&amp;ools'</Issue>
            </Message>
            <Message Id="Addins" TypeName="LiteralsShouldBeSpelledCorrectly" Category="Microsoft.Usage" CheckId="CA2204" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="85" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="594">Correct the spelling of the unrecognized token 'Addins' in the literal 'Addins...'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="LoadFormSettings():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.ApplicationException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="1385">NUnitForm.LoadFormSettings():Void passes a literal as parameter 1 of a call to ApplicationException.ApplicationException(String). Retrieve the following string argument from a resource table instead: 'Invalid Setting'</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="1385">NUnitForm.LoadFormSettings():Void creates an exception of type 'System.ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="1402">Replace the call to String.op_Equality("") in 'NUnitForm.LoadFormSettings():Void' with a call to String.IsNullOrEmpty.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="mainMenu" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'mainMenu' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="NUnitForm_Closing(System.Object,System.ComponentModel.CancelEventArgs):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="NUnit.UiKit.UserMessage.Ask(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="1526">NUnitForm.NUnitForm_Closing(Object, CancelEventArgs):Void passes a literal as parameter 1 of a call to UserMessage.Ask(String):DialogResult. Retrieve the following string argument from a resource table instead: 'A test is running, do you want to stop the test and exit?'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="OnProjectLoadFailure(System.Object,NUnit.Util.TestEventArgs):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="NUnit.UiKit.UserMessage.DisplayFailure(System.Exception,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="1668">NUnitForm.OnProjectLoadFailure(Object, TestEventArgs):Void passes a literal as parameter 2 of a call to UserMessage.DisplayFailure(Exception, String):DialogResult. Retrieve the following string argument from a resource table instead: 'Project Not Loaded'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="OnRunFinished(System.Object,NUnit.Util.TestEventArgs):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="NUnit.UiKit.UserMessage.DisplayFailure(System.Exception,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="1715">NUnitForm.OnRunFinished(Object, TestEventArgs):Void passes a literal as parameter 2 of a call to UserMessage.DisplayFailure(Exception, String):DialogResult. Retrieve the following string argument from a resource table instead: 'NUnit Test Run Failed'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="OnTestLoaded(System.Object,NUnit.Util.TestEventArgs):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="NUnit.UiKit.UserMessage.Display(System.String,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="1642">NUnitForm.OnTestLoaded(Object, TestEventArgs):Void passes a literal as parameter 1 of a call to UserMessage.Display(String, String):DialogResult. Retrieve the following string argument from a resource table instead: 'This assembly was not built with any known testing framework.'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="1642">NUnitForm.OnTestLoaded(Object, TestEventArgs):Void passes a literal as parameter 2 of a call to UserMessage.Display(String, String):DialogResult. Retrieve the following string argument from a resource table instead: 'Not a Test Assembly'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="OnTestLoadFailure(System.Object,NUnit.Util.TestEventArgs):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="NUnit.UiKit.UserMessage.DisplayFailure(System.Exception,System.String,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="1688">NUnitForm.OnTestLoadFailure(Object, TestEventArgs):Void passes a literal as parameter 3 of a call to UserMessage.DisplayFailure(Exception, String, String):DialogResult. Retrieve the following string argument from a resource table instead: 'Assembly Not Loaded'</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="1683">NUnitForm.OnTestLoadFailure(Object, TestEventArgs):Void makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="progressBar" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'progressBar' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="projectMenu_Popup(System.Object,System.EventArgs):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.Menu+MenuItemCollection.Add(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="1088">NUnitForm.projectMenu_Popup(Object, EventArgs):Void passes a literal as parameter 1 of a call to MenuItemCollection.Add(String):MenuItem. Retrieve the following string argument from a resource table instead: '-'</Issue>
            </Message>
            <Message Id="System.Windows.Forms.Menu+MenuItemCollection.Add(System.String,System.EventHandler)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="1090">NUnitForm.projectMenu_Popup(Object, EventArgs):Void passes a literal as parameter 1 of a call to MenuItemCollection.Add(String, EventHandler):MenuItem. Retrieve the following string argument from a resource table instead: '&amp;Add...'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="1093">NUnitForm.projectMenu_Popup(Object, EventArgs):Void passes a literal as parameter 1 of a call to MenuItemCollection.Add(String, EventHandler):MenuItem. Retrieve the following string argument from a resource table instead: '&amp;Edit...'</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="1080">NUnitForm.projectMenu_Popup(Object, EventArgs):Void makes a call to System.String.Format(System.String,System.Object,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="reloadMenuItem_Click(System.Object,System.EventArgs):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="NUnit.UiKit.LongRunningOperationDisplay.#ctor(System.Windows.Forms.Form,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="890">NUnitForm.reloadMenuItem_Click(Object, EventArgs):Void passes a literal as parameter 2 of a call to LongRunningOperationDisplay.LongRunningOperationDisplay(Form, String). Retrieve the following string argument from a resource table instead: 'Reloading...'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="resultTabs" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'resultTabs' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="rightPanel" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'rightPanel' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="runButton" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'runButton' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SetTitleBar(System.String):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="NUnitForm.cs" Line="1731">NUnitForm.SetTitleBar(String):Void makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="statusBar" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'statusBar' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="suiteName" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'suiteName' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="toolTip" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="toolTip" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'toolTip' in field 'toolTip' exists as a discrete term. If your usage is intended to be single word, case it as 'tooltip'.</Issue>
            </Message>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'toolTip' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="treeSplitter" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'treeSplitter' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NUnitForm+CommandLineOptions" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'NUnit.Gui.NUnitForm+CommandLineOptions'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'NUnit.Gui.NUnitForm+CommandLineOptions' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'NUnit.Gui.NUnitForm+CommandLineOptions' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="autorun" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'autorun' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
            <Message Id="autorun" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of the unrecognized token 'autorun' in member name 'CommandLineOptions.autorun'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="categories" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'categories' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="configName" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'configName' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="exclude" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'exclude' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="noload" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'noload' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
            <Message Id="noload" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of the unrecognized token 'noload' in member name 'CommandLineOptions.noload'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="testFileName" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'testFileName' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="testName" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'testName' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="OptionsDialog" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="InitializeComponent():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="297">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: ''</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="330">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Assembly Reload'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="472">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Automatic Namespace suites'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="195">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Cancel'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="217">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Clear results when reloading.'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="278">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Display'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="694">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Display Console Error Output'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="660">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Display Console Standard Output'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="602">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Display Errors and Failures'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="613">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Display Failure ToolTips'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="635">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Display Tests Not Run'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="565">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Display Trace Output'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="388">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Enable Shadow Copy'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="413">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Enable Visual Studio Support'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="623">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Enable Word Wrap'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="462">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Flat list of TestFixtures'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="370">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'General'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="553">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'In Separate Tab'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="717">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'In Separate Tab'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="241">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Initial display on load:'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="671">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Label Test Cases'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="507">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Load in a single AppDomain'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="518">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Load in separate AppDomains'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="206">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Load most recent project at startup.'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="495">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Merge tests across assemblies'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="705">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Merge with Console Output'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="576">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Merge with Console Output'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="485">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Multiple Assemblies'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="735">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'NUnit Options'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="181">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'OK'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="341">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Re-run last tests run'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="315">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Recent Files'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="268">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Reload before each test run'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="229">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Reload when test assembly changes'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="380">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Shadow Copy'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="440">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Test Load'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="530">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Test Output'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="590">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Test Results'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="452">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Test Structure'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="648">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Text Output'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="428">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Tree View'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="401">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Visual Studio'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="288">OptionsDialog.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'files in list'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="okButton_Click(System.Object,System.EventArgs):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="NUnit.UiKit.UserMessage.DisplayInfo(System.String,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="811">OptionsDialog.okButton_Click(Object, EventArgs):Void passes a literal as parameter 2 of a call to UserMessage.DisplayInfo(String, String):DialogResult. Retrieve the following string argument from a resource table instead: 'NUnit Options'</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="807">OptionsDialog.okButton_Click(Object, EventArgs):Void makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="OptionsDialog_Load(System.Object,System.EventArgs):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="762">OptionsDialog.OptionsDialog_Load(Object, EventArgs):Void makes a call to System.Int32.ToString that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Int32.ToString(System.IFormatProvider).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="recentFilesCountTextBox_Validated(System.Object,System.EventArgs):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="889">OptionsDialog.recentFilesCountTextBox_Validated(Object, EventArgs):Void makes a call to System.Int32.Parse(System.String) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Int32.Parse(System.String,System.IFormatProvider).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="recentFilesCountTextBox_Validating(System.Object,System.ComponentModel.CancelEventArgs):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="873">Modify 'OptionsDialog.recentFilesCountTextBox_Validating(Object, CancelEventArgs):Void' to catch a more specific exception than 'System.Object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="864">OptionsDialog.recentFilesCountTextBox_Validating(Object, CancelEventArgs):Void makes a call to System.Int32.Parse(System.String) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Int32.Parse(System.String,System.IFormatProvider).</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="854">OptionsDialog.recentFilesCountTextBox_Validating(Object, CancelEventArgs):Void makes a call to System.Int32.ToString that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Int32.ToString(System.IFormatProvider).</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="OptionsDialog.cs" Line="869">OptionsDialog.recentFilesCountTextBox_Validating(Object, CancelEventArgs):Void makes a call to System.String.Format(System.String,System.Object,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ProjectEditor" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="applicationBaseTextBox_Validating(System.Object,System.ComponentModel.CancelEventArgs):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="713">Modify 'ProjectEditor.applicationBaseTextBox_Validating(Object, CancelEventArgs):Void' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="NUnit.UiKit.UserMessage.Ask(System.String,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="732">ProjectEditor.applicationBaseTextBox_Validating(Object, CancelEventArgs):Void passes a literal as parameter 2 of a call to UserMessage.Ask(String, String):DialogResult. Retrieve the following string argument from a resource table instead: 'Project Editor'</Issue>
            </Message>
            <Message Id="NUnit.UiKit.UserMessage.DisplayFailure(System.Exception,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="716">ProjectEditor.applicationBaseTextBox_Validating(Object, CancelEventArgs):Void passes a literal as parameter 2 of a call to UserMessage.DisplayFailure(Exception, String):DialogResult. Retrieve the following string argument from a resource table instead: 'Invalid Entry'</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="729">ProjectEditor.applicationBaseTextBox_Validating(Object, CancelEventArgs):Void makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="704">Replace the call to String.op_Inequality(String.Empty) in 'ProjectEditor.applicationBaseTextBox_Validating(Object, CancelEventArgs):Void' with a call to String.IsNullOrEmpty.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="browseBasePathButton_Click(System.Object,System.EventArgs):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="CP.Windows.Shell.FolderBrowser.set_Caption(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="922">ProjectEditor.browseBasePathButton_Click(Object, EventArgs):Void passes a literal as parameter 1 of a call to FolderBrowser.set_Caption(String):Void. Retrieve the following string argument from a resource table instead: 'Project Editor'</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="923">ProjectEditor.browseBasePathButton_Click(Object, EventArgs):Void makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="configFileTextBox_Validated(System.Object,System.EventArgs):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="802">Replace the call to String.op_Equality(String.Empty) in 'ProjectEditor.configFileTextBox_Validated(Object, EventArgs):Void' with a call to String.IsNullOrEmpty.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="configFileTextBox_Validating(System.Object,System.ComponentModel.CancelEventArgs):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="784">Modify 'ProjectEditor.configFileTextBox_Validating(Object, CancelEventArgs):Void' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="NUnit.UiKit.UserMessage.DisplayFailure(System.Exception,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="787">ProjectEditor.configFileTextBox_Validating(Object, CancelEventArgs):Void passes a literal as parameter 2 of a call to UserMessage.DisplayFailure(Exception, String):DialogResult. Retrieve the following string argument from a resource table instead: 'Invalid Entry'</Issue>
            </Message>
            <Message Id="NUnit.UiKit.UserMessage.DisplayFailure(System.String,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="794">ProjectEditor.configFileTextBox_Validating(Object, CancelEventArgs):Void passes a literal as parameter 1 of a call to UserMessage.DisplayFailure(String, String):DialogResult. Retrieve the following string argument from a resource table instead: 'Specify configuration file as filename and extension only'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="794">ProjectEditor.configFileTextBox_Validating(Object, CancelEventArgs):Void passes a literal as parameter 2 of a call to UserMessage.DisplayFailure(String, String):DialogResult. Retrieve the following string argument from a resource table instead: 'Invalid Entry'</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="778">Replace the call to String.op_Inequality(String.Empty) in 'ProjectEditor.configFileTextBox_Validating(Object, CancelEventArgs):Void' with a call to String.IsNullOrEmpty.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="InitializeComponent():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.ColumnHeader.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="436">ProjectEditor.InitializeComponent():Void passes a literal as parameter 1 of a call to ColumnHeader.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'File Name'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="441">ProjectEditor.InitializeComponent():Void passes a literal as parameter 1 of a call to ColumnHeader.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Full Path'</Issue>
            </Message>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="329">ProjectEditor.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: ''</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="497">ProjectEditor.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: ''</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="277">ProjectEditor.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: ''</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="303">ProjectEditor.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: ''</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="408">ProjectEditor.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Add Assembly...'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="149">ProjectEditor.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Edit Configs...'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="395">ProjectEditor.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Edit Path...'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="421">ProjectEditor.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: '&amp;Remove Assembly'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="382">ProjectEditor.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Add &amp;VS Project...'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="342">ProjectEditor.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'ApplicationBase:'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="357">ProjectEditor.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Assemblies'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="454">ProjectEditor.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Close'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="316">ProjectEditor.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Configuration File Name:'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="173">ProjectEditor.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Configuration:'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="208">ProjectEditor.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'General'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="228">ProjectEditor.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Generated automatically from assembly locations'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="432">ProjectEditor.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Indicate assemblies with tests by checking the box.'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="527">ProjectEditor.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'NUnit Test Project Editor'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="250">ProjectEditor.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'None - or specified in Configuration File'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="290">ProjectEditor.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'PrivateBinPath:'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="486">ProjectEditor.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Project Base:'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="465">ProjectEditor.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Project Path:'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="239">ProjectEditor.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Specified manually'</Issue>
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="218">ProjectEditor.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Value:'</Issue>
            </Message>
            <Message Id="Configs" TypeName="LiteralsShouldBeSpelledCorrectly" Category="Microsoft.Usage" CheckId="CA2204" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="85" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="149">Correct the spelling of the unrecognized token 'Configs' in the literal '&amp;Edit Configs...'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="privateBinPathTextBox_Validated(System.Object,System.EventArgs):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="834">Replace the call to String.op_Equality(String.Empty) in 'ProjectEditor.privateBinPathTextBox_Validated(Object, EventArgs):Void' with a call to String.IsNullOrEmpty.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="privateBinPathTextBox_Validating(System.Object,System.ComponentModel.CancelEventArgs):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="822">Modify 'ProjectEditor.privateBinPathTextBox_Validating(Object, CancelEventArgs):Void' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="NUnit.UiKit.UserMessage.DisplayFailure(System.Exception,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="825">ProjectEditor.privateBinPathTextBox_Validating(Object, CancelEventArgs):Void passes a literal as parameter 2 of a call to UserMessage.DisplayFailure(Exception, String):DialogResult. Retrieve the following string argument from a resource table instead: 'Invalid Entry'</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="813">Replace the call to String.op_Inequality(String.Empty) in 'ProjectEditor.privateBinPathTextBox_Validating(Object, CancelEventArgs):Void' with a call to String.IsNullOrEmpty.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="projectBaseTextBox_Validated(System.Object,System.EventArgs):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="694">Replace the call to String.op_Equality(String.Empty) in 'ProjectEditor.projectBaseTextBox_Validated(Object, EventArgs):Void' with a call to String.IsNullOrEmpty.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="projectBaseTextBox_Validating(System.Object,System.ComponentModel.CancelEventArgs):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="664">Modify 'ProjectEditor.projectBaseTextBox_Validating(Object, CancelEventArgs):Void' to catch a more specific exception than 'System.Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="NUnit.UiKit.UserMessage.Ask(System.String,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="676">ProjectEditor.projectBaseTextBox_Validating(Object, CancelEventArgs):Void passes a literal as parameter 2 of a call to UserMessage.Ask(String, String):DialogResult. Retrieve the following string argument from a resource table instead: 'Project Editor'</Issue>
            </Message>
            <Message Id="NUnit.UiKit.UserMessage.DisplayFailure(System.Exception,System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="667">ProjectEditor.projectBaseTextBox_Validating(Object, CancelEventArgs):Void passes a literal as parameter 2 of a call to UserMessage.DisplayFailure(Exception, String):DialogResult. Retrieve the following string argument from a resource table instead: 'Invalid Entry'</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="673">ProjectEditor.projectBaseTextBox_Validating(Object, CancelEventArgs):Void makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="656">Replace the call to String.op_Inequality(String.Empty) in 'ProjectEditor.projectBaseTextBox_Validating(Object, CancelEventArgs):Void' with a call to String.IsNullOrEmpty.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="ProjectEditor_Load(System.Object,System.EventArgs):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="847">ProjectEditor.ProjectEditor_Load(Object, EventArgs):Void makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="UpdateApplicationBase(System.String):System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-11-25 10:20:12Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="z:\location_unlikely_to_exist\nunit-2.4.1\src\GuiRunner\nunit-gui" File="ProjectEditor.cs" Line="757">Replace the call to String.op_Inequality(String.Empty) in 'ProjectEditor.UpdateApplicationBase(String):Void' with a call to String.IsNullOrEmpty.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012">
   <Name>Abstract types should not have constructors</Name>
   <Description>Public constructors for abstract types do not make sense because you cannot create instances of abstract types.</Description>
   <Resolution Name="Default">Change the accessibility of all public constructors in '{0}' to protected.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Design/AbstractTypesShouldNotHaveConstructors.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="DesignRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020">
   <Name>Avoid namespaces with few types</Name>
   <Description>A namespace should generally have more than five types.</Description>
   <Resolution Name="Default">Consider merging the types defined in '{0}' with another namespace.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Design/AvoidNamespacesWithFewTypes.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="DesignRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021">
   <Name>Avoid out parameters</Name>
   <Description>Using out parameters might indicate a design flaw. Although there are legitimate times to use out parameters, their use frequently indicates a design that does not conform to the design guidelines for managed code.</Description>
   <Resolution Name="Default">Consider a design that does not require that '{0}' be an out parameter.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Design/AvoidOutParameters.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="DesignRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="AvoidOverloadsInComVisibleInterfaces" Category="Microsoft.Interoperability" CheckId="CA1402">
   <Name>Avoid overloads in ComVisible interfaces</Name>
   <Description>Interfaces that are visible to COM should not define overloads, as they will be renamed and cannot be implemented by VB6 clients. COM interfaces cannot contain overloaded methods.</Description>
   <Resolution Name="Default">ComVisible(true) interface '{0}' defines overloaded methods. Give each method a unique name or make the type ComVisible(false).</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Interoperability/AvoidOverloadsInComVisibleInterfaces.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">CriticalWarning</MessageLevel>
   <File Name="InteroperabilityRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="AvoidTypeNamesInParameters" Category="Microsoft.Naming" CheckId="CA1720">
   <Name>Avoid type names in parameters</Name>
   <Description>Do not use type names to name parameters; use a generic name instead. Types names might not be intuitive for all developers. It is recommended that you select a generic name. If this is not sufficient, be sure to use the type name as it is defined in the .NET Framework Library. For example, use 'Boolean' instead of 'Bool'.</Description>
   <Resolution Name="Default">Remove the type identifier from parameter name '{0}'.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Naming/AvoidTypeNamesInParameters.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811">
   <Name>Avoid uncalled private code</Name>
   <Description>There is uncalled code that is not externally visible and is not a known runtime entry point. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">'{0}' appears to have no upstream public or protected callers.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Performance/AvoidUncalledPrivateCode.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="AvoidUnnecessaryStringCreation" Category="Microsoft.Performance" CheckId="CA1807">
   <Name>Avoid unnecessary string creation</Name>
   <Description>Avoid creating strings unnecessarily. When converting strings to upper or lowercase, cache the result when necessary rather than duplicating a previous string creation. Prefer String.Compare over converting strings to upper or lowercase when performing case-insensitive comparisons. Do not create strings that are not subsequently assigned to variables.</Description>
   <Resolution Name="UseStringCompareLocal">{0} calls {1} after converting '{2}', a local, to upper or lowercase. If possible, eliminate the string creation and call the overload of String.Compare that performs a case-insensitive comparison.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Performance/AvoidUnnecessaryStringCreation.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="AvoidUnsealedAttributes" Category="Microsoft.Performance" CheckId="CA1813">
   <Name>Avoid unsealed attributes</Name>
   <Description>Seal attribute types for improved performance. Sealing attribute types speeds up performance during reflection on custom attributes.</Description>
   <Resolution Name="Default">Seal '{0}', if possible.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Performance/AvoidUnsealedAttributes.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823">
   <Name>Avoid unused private fields</Name>
   <Description>Private fields were detected that do not appear to be accessed within the assembly. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">It appears that field '{0}' is never used or is only ever assigned to. Use this field or remove it.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Performance/AvoidUnusedPrivateFields.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227">
   <Name>Collection properties should be read only</Name>
   <Description>Properties that return collections should be read-only so that users cannot entirely replace the backing store. Users can still modify the contents of the collection by calling relevant methods on the collection. Note that the XmlSerializer class has special support for deserializing read-only collections. See the XmlSerializer overview for more information.</Description>
   <Resolution Name="Default">Change '{0}' to be read-only by removing the property setter.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Usage/CollectionPropertiesShouldBeReadOnly.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="UsageRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="CollectionsShouldImplementGenericInterface" Category="Microsoft.Design" CheckId="CA1010">
   <Name>Collections should implement generic interface</Name>
   <Description>Non-generic strongly typed collections should implement one of the generic collection interfaces. This will allow better integration of the collection with generic API.</Description>
   <Resolution Name="Default">'{0}' appears to be a non-generic, strongly typed collection. Add an implementation to the instance of {1}&lt;T&gt; where T is {0}'s underlying element type.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Design/CollectionsShouldImplementGenericInterface.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702">
   <Name>Compound words should be cased correctly</Name>
   <Description>Avoid creating compound words from terms which exist in the dictionary as discrete terms. Do not create a compound word such as 'StopWatch' or 'PopUp'. These terms are recognized in the dictionary and should be cased as 'Stopwatch' and 'Popup'.</Description>
   <Resolution Name="ShouldBeCompoundWord">The discrete term '{0}' in {1} '{2}' should be expressed as a compound term, '{3}'.</Resolution>
   <Resolution Name="ShouldBeDiscreteTerm">The compound word '{0}' in {1} '{2}' exists as a discrete term. If your usage is intended to be single word, case it as '{3}'.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Naming/CompoundWordsShouldBeCasedCorrectly.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="80">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="ComVisibleTypeBaseTypesShouldBeComVisible" Category="Microsoft.Interoperability" CheckId="CA1405">
   <Name>Com visible type base types should be ComVisible</Name>
   <Description>COM visible types should have an object hierarchy that is uniformly COM visible.</Description>
   <Resolution Name="Default">'{0}' is marked ComVisible(true) but has the following ComVisible(false) types in its object hierarchy: {1}</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Interoperability/ComVisibleTypeBaseTypesShouldBeComVisible.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="InteroperabilityRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011">
   <Name>Consider passing base types as parameters</Name>
   <Description>Using base types as parameters to methods improves re-use of these methods if you only use methods &amp; properties from the parameter's base class. E.g. use Stream instead of FileStream as a parameter when only calling Stream.Read(), this makes the method work on all kind of streams instead of just File streams.</Description>
   <Resolution Name="Default">Consider changing the type of parameter '{0}' in {1} from {2} to its base type {3}. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Design/ConsiderPassingBaseTypesAsParameters.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009">
   <Name>Declare event handlers correctly</Name>
   <Description>By convention, .NET events have two parameters that specify the event sender and event data. Event handler signatures should follow this form: void MyEventHandler(object sender, EventArgs e). The 'sender' parameter is always of type System.Object, even if it is possible to employ a more specific type. The 'e' parameter is always of type System.EventArgs. Events that do not provide event data should use the System.EventHandler delegate type. Event handlers return void so that they can send each event to multiple target methods. Any value returned by a target would be lost after the first call.</Description>
   <Resolution Name="First">Declare the first parameter of '{0}' as an object named 'sender'.</Resolution>
   <Resolution Name="Second">Declare the second parameter of '{0}' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Design/DeclareEventHandlersCorrectly.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214">
   <Name>Do not call overridable methods in constructors</Name>
   <Description>Virtual methods defined on the class should not be called from constructors. If a derived class has overridden the method, the derived class version will be called (before the derived class constructor is called).</Description>
   <Resolution Name="Default">'{0}' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: {1}</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Usage/DoNotCallOverridableMethodsInConstructors.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="UsageRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800">
   <Name>Do not cast unnecessarily</Name>
   <Description>Avoid duplicate casts where possible, since there is a cost associated with them.</Description>
   <Resolution Name="Local">'{0}', a local, is cast to type '{1}' multiple times in method {2}. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant {3} instruction.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Performance/DoNotCastUnnecessarily.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
   <Name>Do not catch general exception types</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Resolution Name="Default">Modify '{0}' to catch a more specific exception than '{1}' or rethrow the exception.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Design/DoNotCatchGeneralExceptionTypes.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="DesignRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="DoNotConcatenateStringsInsideLoops" Category="Microsoft.Performance" CheckId="CA1818">
   <Name>Do not concatenate strings inside loops</Name>
   <Description>Use StringBuilder instead.</Description>
   <Resolution Name="Default">Change {0} to use StringBuilder instead of String.Concat or +=</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Performance/DoNotConcatenateStringsInsideLoops.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="PerformanceRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051">
   <Name>Do not declare visible instance fields</Name>
   <Description>Public or protected instance fields limit your ability to change the implementation details for those data items. Use properties instead. They do not compromise usability or performance and they do provide flexibility in that they conceal the  implementation details of the underlying data.</Description>
   <Resolution Name="Default">Make '{0}' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Design/DoNotDeclareVisibleInstanceFields.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805">
   <Name>Do not initialize unnecessarily</Name>
   <Description>Do not make initializations that have already been done by the runtime.</Description>
   <Resolution Name="Default">{0} initializes field {1} of type {2} to {3}. Remove this initialization as it will be done automatically by the runtime.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Performance/DoNotInitializeUnnecessarily.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303">
   <Name>Do not pass literals as localized parameters</Name>
   <Description>String literals that are embedded in source code are difficult to localize. Avoid passing string literals as arguments in circumstances where a localized string is generally expected. Most localized applications, for example, should localize string arguments that are passed to exception constructors. When creating an Exception instance, therefore, a string argument retrieved from a string table is more appropriate than a string literal.</Description>
   <Resolution Name="Default">{0} passes a literal as parameter {1} of a call to {2}. Retrieve the following string argument from a resource table instead: '{3}'</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Globalization/DoNotPassLiteralsAsLocalizedParameters.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="GlobalizationRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045">
   <Name>Do not pass types by reference</Name>
   <Description>Although there are legitimate times to use reference parameters, such use frequently indicates a design that does not conform to the design guidelines for managed code.</Description>
   <Resolution Name="Default">Consider a design that does not require that '{0}' be a reference parameter.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Design/DoNotPassTypesByReference.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="DesignRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201">
   <Name>Do not raise reserved exception types</Name>
   <Description>User code should not create and raise exceptions of certain types that are reserved by the runtime or which are of a too general exception type. Exception types that are too general include Exception, SystemException, and ApplicationException. Exception types that are reserved by the runtime include ThreadAbortException, OutOfMemoryException, ExecutionEngineException, and IndexOutOfRangeException.</Description>
   <Resolution Name="TooGeneric">{0} creates an exception of type '{1}', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Usage/DoNotRaiseReservedExceptionTypes.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="UsageRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="DoNotUseTimersThatPreventPowerStateChanges" Category="Microsoft.Mobility" CheckId="CA1601">
   <Name>Do not use timers that prevent power state changes</Name>
   <Description>Do not poll more often than or utilize timers that fire more frequently than once per second. Higher frequency periodic activity will keep the CPU busy and interfere with power-saving idle timers that turn off the display and hard disks.</Description>
   <Resolution Name="Default">Modify the call to {0} in method {1} to set the timer interval to a value that's greater than or equal to one second.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Mobility/DoNotUseTimersThatPreventPowerStateChanges.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="MobilityRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="FlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1714">
   <Name>Flags enums should have plural names</Name>
   <Description>An enumeration marked with FlagsAttribute should have a plural name.</Description>
   <Resolution Name="Default">If enumeration name '{0}' is singular, change it to a plural form.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Naming/FlagsEnumsShouldHavePluralNames.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="ICollectionImplementationsHaveStronglyTypedMembers" Category="Microsoft.Design" CheckId="CA1035">
   <Name>ICollection implementations have strongly typed members</Name>
   <Description>Types that implement ICollection should also provide a version of CopyTo with the first parameter set to a strong type, namely a type other than an array of objects or System.Array. Implement the interface member explicitly and make the strongly typed version public. It is safe to ignore violations of this rule when you are implementing a new object-based collection, such as a binary tree, where types based on your collection will determine what the strong type is. These types should expose strongly typed members.</Description>
   <Resolution Name="Default">'{0}' should provide a strongly typed implementation of ICollection.CopyTo.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Design/ICollectionImplementationsHaveStronglyTypedMembers.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
   <Name>Identifiers should be cased correctly</Name>
   <Description>Type, namespace, and member identifiers are pascal-cased. Parameter identifiers are camel-cased. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor.</Description>
   <Resolution Name="Member">Correct the casing of member name '{0}'.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Naming/IdentifiersShouldBeCasedCorrectly.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="Member">Correct the spelling of the unrecognized token '{0}' in member name '{1}'.</Resolution>
   <Resolution Name="Namespace">Correct the spelling of the unrecognized token '{0}' in namespace '{1}'.</Resolution>
   <Resolution Name="Parameter">In method {0}, correct the spelling of the unrecognized token '{1}' in parameter name '{2}' or strip it entirely if it represents any sort of hungarian notation.</Resolution>
   <Resolution Name="ParameterOneLetter">In method {0}, consider providing a more meaningful name than the one-letter parameter name '{1}'.</Resolution>
   <Resolution Name="Type">Correct the spelling of the unrecognized token '{0}' in type name '{1}'.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Naming/IdentifiersShouldBeSpelledCorrectly.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="NamingRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldDifferByMoreThanCase" Category="Microsoft.Naming" CheckId="CA1708">
   <Name>Identifiers should differ by more than case</Name>
   <Description>Do not use names that require case sensitivity for uniqueness. Components must be fully usable from both case-sensitive and case-insensitive languages. Since case-insensitive languages cannot distinguish between two names within the same context that differ only by case, components must avoid this situation.</Description>
   <Resolution Name="Member">Change member names {0} and '{1}' so that they differ by more than case.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Naming/IdentifiersShouldDifferByMoreThanCase.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715">
   <Name>Identifiers should have correct prefix</Name>
   <Description>Prefix interface names with the letter I to indicate that the type is an interface, as in IFormattable. Use Pascal casing for interfaces names. Use abbreviations sparingly. Do not use the underscore character. Do use similar names when defining a class/interface pair where the class is a standard implementation of the interface. The names should differ only by the letter I prefixed on the interface name, as with Component and IComponent.</Description>
   <Resolution Name="Default">Prefix interface name '{0}' with 'I'.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Naming/IdentifiersShouldHaveCorrectPrefix.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710">
   <Name>Identifiers should have correct suffix</Name>
   <Description>Types that extend certain base types have specified name suffixes. Types that extend Attribute, for example, should be suffixed in 'Attribute', as in ObsoleteAttribute. This rules checks types that extend several base types, including Attribute, Exception, EventArgs, IMembershipPermission, Stream, and others.</Description>
   <Resolution Name="Default">Rename '{0}' to end in '{1}'.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Naming/IdentifiersShouldHaveCorrectSuffix.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707">
   <Name>Identifiers should not contain underscores</Name>
   <Description>Do not use underscores when specifying identifiers. Some generated Visual Studio identifiers for applications contain underscore characters. Underscore characters should generally be avoided in public identifiers.</Description>
   <Resolution Name="Member">Remove all underscores from member '{0}'.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Naming/IdentifiersShouldNotContainUnderscores.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711">
   <Name>Identifiers should not have incorrect suffix</Name>
   <Description>Types that do not extend certain base types should not use reserved name suffixes.</Description>
   <Resolution Name="Default">Rename '{0}' so that it does not end in '{1}'.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Naming/IdentifiersShouldNotHaveIncorrectSuffix.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="NamingRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716">
   <Name>Identifiers should not match keywords</Name>
   <Description>Identifiers which conflict in whole or in part with reserved keywords should be avoided. See the .NET Design Guidelines, section 2.3 for more information regarding defining namespaces.</Description>
   <Resolution Name="Type">Change type name '{0}' so that it does not conflict with reserved keyword:'{1}'.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Naming/IdentifiersShouldNotMatchKeywords.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063">
   <Name>Implement IDisposable Correctly</Name>
   <Description>All IDisposable types should implement the Dispose pattern correctly.</Description>
   <Resolution Name="DisposeImplementation">Modify {0} so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in VB), and then returns.</Resolution>
   <Resolution Name="FinalizeImplementation">Modify {0} so that it calls Dispose(false) and then returns.</Resolution>
   <Resolution Name="ProvideDisposeBool">Provide an overridable implementation of Dispose(bool) on {0} or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Design/ImplementIDisposableCorrectly.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032">
   <Name>Implement standard exception constructors</Name>
   <Description>Multiple constructors are required to correctly implement a custom exception. Missing constructors can make your exception unusable in certain scenarios. For example, the serialization constructor is required for handling exceptions in XML Web services.</Description>
   <Resolution Name="Default">Add the following constructor to {0}: {1}.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Design/ImplementStandardExceptionConstructors.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208">
   <Name>Instantiate argument exceptions correctly</Name>
   <Description>String arguments passed to constructors of ArgumentException and its derived types should be correct. Types derived from ArgumentException have inconsistent constructor overloads with respect to the message and paramName parameters as compared to ArgumentException.</Description>
   <Resolution Name="TwoArgumentsSecondShouldBeParameterName">Calls to {0}'s constructor '{1}' should be in the order message, paramName instead of '{2}', '{3}'. Note that the provided parameter name should have the exact casing as declared on the method.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Usage/InstantiateArgumentExceptionsCorrectly.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="UsageRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033">
   <Name>Interface methods should be callable by child types</Name>
   <Description>Explicit method implementations are defined with private accessibility. Classes that derive from classes with explicit method implementations and choose to re-declare them on the class will not be able to call into the base class implementation unless the base class has provided an alternate method with appropriate accessibility. When overriding a base class method that has been hidden by explicit interface implementation, in order to call into the base class implementation, a derived class must cast the base pointer to the relevant interface. When calling through this reference, however, the derived class implementation will actually be invoked, resulting in recursion and an eventual stack overflow.</Description>
   <Resolution Name="Default">Make '{0}' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of '{1}' and is visible to derived classes.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Design/InterfaceMethodsShouldBeCallableByChildTypes.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="ListsAreStronglyTyped" Category="Microsoft.Design" CheckId="CA1039">
   <Name>Lists are strongly typed</Name>
   <Description>IList implementations should also provide versions of the IList members that are strongly typed, namely they should specify types other than Object for method and property parameter and return types. Implement the interface members explicitly and make the strongly typed versions public. It is safe to ignore violations of this rule when you are implementing a new object-based collection, such as a linked list, where types based on your collection will determine what the strong type is. These types should expose strongly typed members.</Description>
   <Resolution Name="Default">'{0}' should provide a strongly typed implementation of IList.{1}.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Design/ListsAreStronglyTyped.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="LiteralsShouldBeSpelledCorrectly" Category="Microsoft.Usage" CheckId="CA2204">
   <Name>Literals should be spelled correctly</Name>
   <Description>Literals should consist of correctly spelled words.</Description>
   <Resolution Name="Default">Correct the spelling of the unrecognized token '{0}' in the literal '{1}'.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Usage/LiteralsShouldBeSpelledCorrectly.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="UsageRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="LongAcronymsShouldBePascalCased" Category="Microsoft.Naming" CheckId="CA1705">
   <Name>Long acronyms should be pascal-cased</Name>
   <Description>Acronyms of three or more letters should be Pascal-cased. For example, use XmlSpace rather than XMLSpace. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="Member">Correct the capitalization of member name '{0}'.</Resolution>
   <Resolution Name="Parameter">Correct the capitalization of parameter name '{0}'.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Naming/LongAcronymsShouldBePascalCased.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014">
   <Name>Mark assemblies with CLSCompliant</Name>
   <Description>Assemblies should explicitly state their Cls compliance using the CLSCompliant attribute. An assembly without this attribute is not CLS-compliant. Assemblies, modules, and types can be CLS-compliant even if some parts of the assembly, module, or type are not CLS-compliant. The following rules apply: 1) If the element is marked CLSCompliant, any noncompliant members must have the CLSCompliant attribute present with its argument set to false. 2) A comparable CLS-compliant alternative member must be supplied for each member that is not CLS-compliant.</Description>
   <Resolution Name="NoAttr">'{0}' should be marked with CLSCompliantAttribute and its value should be true.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Design/MarkAssembliesWithClsCompliant.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithComVisible" Category="Microsoft.Design" CheckId="CA1017">
   <Name>Mark assemblies with ComVisible</Name>
   <Description>The System.Runtime.InteropServices.ComVisible attribute indicates whether COM clients can use the library. Good design dictates that developers explicitly indicate COM visibility. The default value for this attribute is 'true'. However, the best design is to mark the assembly ComVisible false, and then mark types, interfaces, and individual members as ComVisible true, as appropriate.</Description>
   <Resolution Name="NoAttribute">Mark '{0}' as ComVisible(false) at the assembly level, then mark all types within the assembly that should be exposed to Com clients as ComVisible(true).</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Design/MarkAssembliesWithComVisible.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError, Error</MessageLevel>
   <File Name="DesignRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237">
   <Name>Mark ISerializable types with serializable</Name>
   <Description>The System.Runtime.Serialization.ISerializable interface allows the type to customize its serialization, while the Serializable attribute enables the common language runtime to recognize the type as being serializable.</Description>
   <Resolution Name="Default">Add [Serializable] to '{0}' as this type implements ISerializable.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Usage/MarkISerializableTypesWithSerializable.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error, Warning</MessageLevel>
   <File Name="UsageRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
   <Name>Mark members as static</Name>
   <Description>Methods which do not access instance data or call instance methods can be marked as static (Shared in VB). After doing so, the compiler will emit non-virtual call sites to these members which will prevent a check at runtime for each call that insures the current object pointer is non-null. This can result in a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.</Description>
   <Resolution Name="Default">The 'this' parameter (or 'Me' in VB) of {0} is never used. Mark the member as static (or Shared in VB) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Performance/MarkMembersAsStatic.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060">
   <Name>Move pinvokes to native methods class</Name>
   <Description>This type contains members with the DllImport attribute. Members with the DllImport attribute should be contained in classes named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Description>
   <Resolution Name="Default">Because it is a DllImport method, {0} should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Design/MovePInvokesToNativeMethodsClass.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="DesignRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034">
   <Name>Nested types should not be visible</Name>
   <Description>Do not use public, protected or protected internal (Protected Friend) nested types as a way of grouping types. Use namespaces for this purpose. There are very limited scenarios where nested types are the best design. Also, nested type member accessibility is not clearly understood by all audiences. Enumerators are exempt from this rule.</Description>
   <Resolution Name="Default">Do not nest type '{0}'. Alternatively, change its accessibility so that it is not externally visible.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Design/NestedTypesShouldNotBeVisible.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211">
   <Name>Non-constant fields should not be visible</Name>
   <Description>Static fields should be constant unless you carefully manage access to the field using locks. Using static variables without making them thread safe can compromise execution state. This rule applies to managed code libraries. If the analyzed assembly is an application, it is usually safe to exclude violations of this rule.</Description>
   <Resolution Name="Default">Consider making '{0}' non-public or a constant.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Usage/NonConstantFieldsShouldNotBeVisible.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="UsageRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815">
   <Name>Override equals and operator equals on value types</Name>
   <Description>The default System.ValueType implementation might not perform as well as a custom implementation.</Description>
   <Resolution Name="Equals">'{0}' should override Equals.</Resolution>
   <Resolution Name="op_Equality">'{0}' should override the equality (==) and inequality (!=) operators.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Performance/OverrideEqualsAndOperatorEqualsOnValueTypes.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123">
   <Name>Override link demands should be identical to base</Name>
   <Description>If a virtual method has a LinkDemand, in many cases, so should any override of it, and if an override has a LinkDemand, so should the overridden virtual method. As it is possible to call any of the overrides of a virtual method explicitly, they should all have the same LinkDemand status or, if not, should be reviewed. This also applies to LinkDemand security checks for methods that part of an interface implementation, because the caller might use an interface-typed reference to access the method.</Description>
   <Resolution Name="BaseOnly">Add the following security attribute to {0} in order to match a LinkDemand on base method {1}:  {2}.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Security/OverrideLinkDemandsShouldBeIdenticalToBase.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="33">CriticalError</MessageLevel>
   <File Name="SecurityRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036">
   <Name>Override methods on comparable types</Name>
   <Description>Types that implement IComparable should redefine Equals and comparison operators to keep the meanings of less than, greater than, and equals consistent throughout the type.</Description>
   <Resolution Name="Equals">{0} should override Equals since it implements IComparable.</Resolution>
   <Resolution Name="Operator">{0} should define operator '{1}' since it implements IComparable.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Design/OverrideMethodsOnComparableTypes.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725">
   <Name>Parameter names should match base declaration</Name>
   <Description>For usability reasons, parameter names in overridden methods should match those of the base declaration.</Description>
   <Resolution Name="Default">Change parameter name '{0}' of method {1} to '{2}' in order to match the identifier as it has been declared in {3}.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Naming/ParameterNamesShouldMatchBaseDeclaration.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="ParameterNamesShouldNotMatchMemberNames" Category="Microsoft.Naming" CheckId="CA1719">
   <Name>Parameter names should not match member names</Name>
   <Description>Parameter names should be distinct from member names.</Description>
   <Resolution Name="Default">Change either member or parameter name '{0}' so that one differs from the other.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Naming/ParameterNamesShouldNotMatchMemberNames.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901">
   <Name>PInvoke declarations should be portable</Name>
   <Description>.</Description>
   <Resolution Name="Return">As it is declared in your code, the return type of PInvoke {0} will be {1} bytes wide on {2} platforms. This is not correct, as the actual native declaration of this API indicates it should be {3} bytes wide on {2} platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of '{4}'.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Portability/PInvokeDeclarationsShouldBePortable.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="PortabilityRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="PropertiesShouldNotBeWriteOnly" Category="Microsoft.Design" CheckId="CA1044">
   <Name>Properties should not be write only</Name>
   <Description>Write-only properties usually indicate a flawed design.</Description>
   <Resolution Name="Default">Add a property getter to '{0}'.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Design/PropertiesShouldNotBeWriteOnly.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819">
   <Name>Properties should not return arrays</Name>
   <Description>Properties that return arrays are prone to code inefficiencies. Consider using a collection or making this a method. See the design guidelines for more information.</Description>
   <Resolution Name="Default">Change {0} to return a collection or make it a method.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Performance/PropertiesShouldNotReturnArrays.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801">
   <Name>Review unused parameters</Name>
   <Description>Review parameters in non-virtual methods that are not used in the method body to insure no correctness exists around failure to access them. Unused parameters incur maintenance and performance costs. Sometimes a violation of this rule can point to an implementation bug in the method (i.e. the parameter should actually have been used in the method body). Exclude warnings of this rule if the parameter has to exist because of backward compatibility.</Description>
   <Resolution Name="Default">Parameter '{0}' of {1} is never used. Remove the parameter or use it in the method body.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Usage/ReviewUnusedParameters.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="UsageRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="ReviewVisibleEventHandlers" Category="Microsoft.Security" CheckId="CA2109">
   <Name>Review visible event handlers</Name>
   <Description>It appears that an event handler is externally visible or that an EventArgs parameter is being exposed in a visible method decorated with a security demand. There can be problems exposing sensitive functionality in an event handler function; the security demand might not do what you expect.</Description>
   <Resolution Name="Default">Consider making {0} not externally visible.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Security/ReviewVisibleEventHandlers.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="40">CriticalError</MessageLevel>
   <File Name="SecurityRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="ShortAcronymsShouldBeUppercase" Category="Microsoft.Naming" CheckId="CA1706">
   <Name>Short acronyms should be uppercase</Name>
   <Description>Two letter acronyms should be upper-cased. For example, use System.IO instead of System.Io. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="Member">Correct the capitalization of '{0}' in member name '{1}'.</Resolution>
   <Resolution Name="MemberId">'Id' is an abbreviation and therefore is not subject to acronym casing guidelines. Correct the capitalization of 'ID' in member name '{0}' by changing it to 'Id'.</Resolution>
   <Resolution Name="Namespace">Correct the capitalization of '{0}' in namespace name '{1}'.</Resolution>
   <Resolution Name="ParameterId">'Id' is an abbreviation and therefore is not subject to acronym casing guidelines. Correct the capitalization of '{0}' in parameter name '{1}' by changing it to '{2}'.</Resolution>
   <Resolution Name="TypeId">'Id' is an abbreviation and therefore is not subject to acronym casing guidelines. Correct the capitalization of 'ID' in type name '{0}' by changing it to 'Id'.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Naming/ShortAcronymsShouldBeUppercase.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304">
   <Name>Specify CultureInfo</Name>
   <Description>If an overload exists that takes a System.Globalization.CultureInfo argument, it should always be called in favor of an overload that does not. The CultureInfo type contains culture-specific information required for performing numeric and string operations, such as casing, formatting, and string comparisons. In scenarios where conversion and parsing behavior should never change between cultures, specify CultureInfo.InvariantCulture.</Description>
   <Resolution Name="Default">{0} makes a call to {1} that does not explicitly provide a CultureInfo. This should be replaced with a call to {2}.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Globalization/SpecifyCultureInfo.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="GlobalizationRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the common language runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture.</Description>
   <Resolution Name="Default">{0} makes a call to {1} that does not explicitly provide an IFormatProvider. This should be replaced with a call to {2}.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Globalization/SpecifyIFormatProvider.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="GlobalizationRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300">
   <Name>Specify MessageBoxOptions</Name>
   <Description>In order to run correctly on right-to-left systems, all calls to MessageBox.Show should use the overload that specifies MessageBoxOptions as an argument. Programs should detect whether they are running on a right-to-left system at run-time and pass the appropriate MessageBoxOptions value in order to display correctly.</Description>
   <Resolution Name="Default">Change {0} to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control. If it is set to RightTolLeft.Inherit, check its parent until a value indicating Yes or No is found.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Globalization/SpecifyMessageBoxOptions.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="GlobalizationRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="StaticHolderTypesShouldBeSealed" Category="Microsoft.Design" CheckId="CA1052">
   <Name>Static holder types should be sealed</Name>
   <Description>Static holder types do not provide functionality that derived instances can extend. Inheriting from such a type indicates a flawed design.</Description>
   <Resolution Name="Default">Mark '{0}' as sealed.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Design/StaticHolderTypesShouldBeSealed.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="DesignRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053">
   <Name>Static holder types should not have constructors</Name>
   <Description>Instances of types that define only static members do not need to be created. Many compilers will automatically add a public default constructor if no constructor is specified.  To prevent this, adding an empty private constructor may be required.</Description>
   <Resolution Name="Default">Remove the public constructors from '{0}'.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Design/StaticHolderTypesShouldNotHaveConstructors.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820">
   <Name>Test for empty strings using string length</Name>
   <Description>To test for empty strings, check if String.Length is equal to zero. Constructs such as "".Equals(someString) and String.Empty.Equals(someString) are less efficient than testing the string length. Replace these with checks for someString.Length == 0.</Description>
   <Resolution Name="IsNullOrEmpty">Replace the call to String.{0}({1}) in '{2}' with a call to String.IsNullOrEmpty.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Performance/TestForEmptyStringsUsingStringLength.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="TypeNamesShouldNotMatchNamespaces" Category="Microsoft.Naming" CheckId="CA1724">
   <Name>Type names should not match namespaces</Name>
   <Description>Identifiers which conflict in whole or in part with namespace names should be avoided. Names that describe the purpose or contents of a type are preferred.</Description>
   <Resolution Name="Default">The type name '{0}' conflicts in whole or in part with the namespace name '{1}'. Change either name to eliminate the conflict.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Naming/TypeNamesShouldNotMatchNamespaces.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="TypesShouldNotExtendCertainBaseTypes" Category="Microsoft.Design" CheckId="CA1058">
   <Name>Types should not extend certain base types</Name>
   <Description>Types do not extend inheritance vulnerable types.</Description>
   <Resolution Name="System.ApplicationException">Change {0}'s base type so that it no longer extends {1}. This base exception type does not provide any additional value for framework classes. Extend System.Exception or an existing unsealed exception type instead. Do not create a new exception base type unless there is specific value in enabling the creation of a catch handler for an entire class of exceptions.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Design/TypesShouldNotExtendCertainBaseTypes.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001">
   <Name>Types that own disposable fields should be disposable</Name>
   <Description>Types that declare disposable members should also implement IDisposable. If the type does not own any unmanaged resources, do not implement a finalizer on it.</Description>
   <Resolution Name="Default">Implement IDisposable on '{0}' as it instantiates members of the following IDisposable types: {1}</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Design/TypesThatOwnDisposableFieldsShouldBeDisposable.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="DesignRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="TypesThatOwnNativeResourcesShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1049">
   <Name>Types that own native resources should be disposable</Name>
   <Description>Types that allocate unmanaged resources should implement IDisposable to allow callers to release those resources on demand. Failure to implement IDisposable can result in unmanaged resources being unavailable or underutilized.</Description>
   <Resolution Name="Default">Implement IDisposable on '{0}'.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Design/TypesThatOwnNativeResourcesShouldBeDisposable.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">CriticalError</MessageLevel>
   <File Name="DesignRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030">
   <Name>Use events where appropriate</Name>
   <Description>A method name suggestive of event functionality was encountered.</Description>
   <Resolution Name="Default">Consider making '{0}' an event.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Design/UseEventsWhereAppropriate.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="DesignRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="UseGenericEventHandlerInstances" Category="Microsoft.Design" CheckId="CA1003">
   <Name>Use generic event handler instances</Name>
   <Description>do not declare new delegates to be used as event handlers when targeting a version of the .Net Framework that supports generics. Use an instance EventHandler&lt;T&gt; instead.</Description>
   <Resolution Name="Default">Remove '{0}' and replace its usage with EventHandler&lt;T&gt;</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Design/UseGenericEventHandlerInstances.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="UseGenericsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1007">
   <Name>Use generics where appropriate</Name>
   <Description>References passed to ref parameters must be the exact type of the parameter. Using generics enable the method for general use.</Description>
   <Resolution Name="Default">Consider using generics instead of a reference to System.Object in {0}.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Design/UseGenericsWhereAppropriate.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="DesignRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802">
   <Name>Use literals where appropriate</Name>
   <Description>Prefer literals over InitOnly fields if values do not have to be calculated at runtime.</Description>
   <Resolution Name="Default">Field '{0}' is declared as 'static readonly' but is initialized with a constant value '{1}'. Mark this field as 'const' instead.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Performance/UseLiteralsWhereAppropriate.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024">
   <Name>Use properties where appropriate</Name>
   <Description>Properties should be used instead of Get/Set methods in most situations. Methods are preferable to properties in the following situations: the operation is a conversion, is expensive or has an observable side-effect; the order of execution is important; calling the member twice in succession creates different results; a member is static but returns a mutable value; or the member returns an array.</Description>
   <Resolution Name="Default">Change '{0}' to a property if appropriate.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Design/UsePropertiesWhereAppropriate.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="DesignRules.dll" Version="1.35.0.0" />
  </Rule>
  <Rule TypeName="ValidateArgumentsOfPublicMethods" Category="Microsoft.Design" CheckId="CA1062">
   <Name>Validate arguments of public methods</Name>
   <Description>All reference arguments passed to public methods should be tested against null (Nothing in VB), as they can be provided by arbitrary callers.</Description>
   <Resolution Name="Default">Validate parameter {0} passed to externally visible method {1}.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.35&amp;url=/Design/ValidateArgumentsOfPublicMethods.html</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="1.35.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="Line">Line</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
