/*-------------------------------------------------------------------------+
|                                                                          |
| Copyright 2005-2011 the ConQAT Project                                   |
|                                                                          |
| Licensed under the Apache License, Version 2.0 (the "License");          |
| you may not use this file except in compliance with the License.         |
| You may obtain a copy of the License at                                  |
|                                                                          |
|    http://www.apache.org/licenses/LICENSE-2.0                            |
|                                                                          |
| Unless required by applicable law or agreed to in writing, software      |
| distributed under the License is distributed on an "AS IS" BASIS,        |
| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
| See the License for the specific language governing permissions and      |
| limitations under the License.                                           |
+-------------------------------------------------------------------------*/
package org.conqat.engine.dotnet.spcop;

import org.conqat.engine.commons.findings.Finding;
import org.conqat.engine.commons.findings.util.FindingUtils;
import org.conqat.engine.core.core.AConQATKey;
import org.conqat.engine.core.core.AConQATProcessor;
import org.conqat.engine.core.core.ConQATException;
import org.conqat.engine.resource.IElement;
import org.conqat.engine.resource.base.ReportReaderBase;
import org.conqat.engine.resource.text.ITextElement;
import org.conqat.engine.resource.text.TextElementUtils;
import org.conqat.engine.resource.util.TextElementXMLReader;
import org.conqat.lib.commons.xml.IXMLElementProcessor;

/**
 * {ConQAT.Doc}
 * 
 * @author $Author: pfaller $
 * @version $Rev: 47078 $
 * @ConQAT.Rating YELLOW Hash: 2423615DAFB09656E60202CABA0C3E36
 */
@AConQATProcessor(description = "Reads an XML report generated by SPCop and "
		+ "annotates the findings to the corresponding elements in the scope."
		+ "The XML report can be generated using the processor SPCopExecutor.")
public class SPCopReportReader extends ReportReaderBase {

	/** {@ConQAT.Doc} */
	@AConQATKey(description = "Key for SPCop findings.", type = "org.conqat.engine.commons.findings.FindingsList")
	public static final String SPCOP_FINDINGS_KEY = "SPCop";

	/** {@inheritDoc} */
	@Override
	protected void loadReport(ITextElement report) throws ConQATException {
		new SPCopXMLParser(report).parse();
	}

	/** {@inheritDoc} */
	@Override
	protected String obtainRuleDescription(String ruleId) {
		return null;
	}

	/** Parses an XML report generated by SPCop. */
	private class SPCopXMLParser
			extends
			TextElementXMLReader<ESPCopElement, ESPCopAttribute, ConQATException> {

		/** Constructor. */
		public SPCopXMLParser(ITextElement report) throws ConQATException {
			super(report, ESPCopAttribute.class);
		}

		/** Parses the report and process the relevant elements. */
		public void parse() throws ConQATException {
			parseAndWrapExceptions();
			processDecendantElements(new VisitorGroupParser());
		}

		/** Parses a VisitorGroup which corresponds to a FindingGroup. */
		private class VisitorGroupParser implements
				IXMLElementProcessor<ESPCopElement, ConQATException> {

			/** {@inheritDoc} */
			@Override
			public ESPCopElement getTargetElement() {
				return ESPCopElement.VisitorGroup;
			}

			/** {@inheritDoc} */
			@Override
			public void process() throws ConQATException {
				String visitorGroupName = getStringAttribute(ESPCopAttribute.Name);
				processDecendantElements(new NotificationParser(
						visitorGroupName));
			}

		}

		/**
		 * Parses a single notification and creates a finding if the
		 * notification is relevant.
		 */
		private class NotificationParser implements
				IXMLElementProcessor<ESPCopElement, ConQATException> {

			/** Rule ID that should be used for the notifications. */
			private final String visitorGroupName;

			/** Constructor. */
			public NotificationParser(String visitorGroupName) {
				this.visitorGroupName = visitorGroupName;
			}

			/** {@inheritDoc} */
			@Override
			public ESPCopElement getTargetElement() {
				return ESPCopElement.Notification;
			}

			/** {@inheritDoc} */
			@Override
			public void process() throws ConQATException {
				String location = getChildText(ESPCopElement.HiveLocation);
				String ruleId = buildRuleId();
				// Consider only notifications (the target elements and the
				// SPCop equivalent of findings) that refer to XML elements.
				if (!location.toLowerCase().endsWith(".xml")) {
					return;
				}

				IElement element = obtainElementAndReportProblem(location);
				if (!(element instanceof ITextElement)) {
					// Do not issue a warning here, because SPCop analyzes a WSP
					// archive that is likely to contain elements which are not
					// in the scope.
					return;
				}

				ESpCopSeverity severity = getEnumAttribute(
						ESPCopAttribute.Severity, ESpCopSeverity.class);
				String message = getChildText(ESPCopElement.Message);
				int lineNumber = getChildTextAsInteger(ESPCopElement.LineNumber);

				Finding finding = null;

				if (lineNumber > 0
						&& lineNumber <= TextElementUtils
								.getLines((ITextElement) element).length) {
					finding = createLineFinding(ruleId, message, location,
							lineNumber);
				} else {
					if (lineNumber > 0) {
						getLogger().warn(
								"SpCop finding reported at invalid line "
										+ lineNumber + " of "
										+ element.getUniformPath());
					}
					finding = createFindingForFileLocation(ruleId, message,
							location);
				}

				if (finding != null) {
					FindingUtils.setFindingColor(finding, severity.getColor());
				}

			}

			/**
			 * Builds the rule id. This will constructed from VistiorGroup.Name,
			 * Notification.CheckId, Notification.Name and Notification.Severity
			 */
			private String buildRuleId() {
				String checkId = getStringAttribute(ESPCopAttribute.CheckID);
				String name = getStringAttribute(ESPCopAttribute.Name);
				String severity = getStringAttribute(ESPCopAttribute.Severity);
				return  name + " (" + checkId + ") ["
						+ severity + ", " + visitorGroupName + "]";
			}

			/**
			 * Returns the text content of the given child as integer. If the
			 * child element does not exist or its text content cannot be parsed
			 * as integer, this method returns -1.
			 */
			private int getChildTextAsInteger(ESPCopElement element) {
				String text = getChildText(element);
				if (text != null) {
					try {
						return Integer.parseInt(text);
					} catch (NumberFormatException e) {
						getLogger().warn("Invalid integer value: " + text);
					}
				}
				return -1;
			}

		}

	}

}
